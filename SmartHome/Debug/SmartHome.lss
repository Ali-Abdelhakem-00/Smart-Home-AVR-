
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000067b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000023a  00800060  000067b2  00006846  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080029a  0080029a  00006a80  2**0
                  ALLOC
  3 .stab         000048d8  00000000  00000000  00006a80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002213  00000000  00000000  0000b358  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000d56b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020f  00000000  00000000  0000d72b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000030e2  00000000  00000000  0000d93a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000156a  00000000  00000000  00010a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014dd  00000000  00000000  00011f86  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00013464  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000375  00000000  00000000  00013644  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000022ac  00000000  00000000  000139b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  00015c65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 6f 18 	jmp	0x30de	; 0x30de <__vector_10>
      2c:	0c 94 a2 18 	jmp	0x3144	; 0x3144 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__vector_13>
      38:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	f7 e6       	ldi	r31, 0x67	; 103
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3a       	cpi	r26, 0xAA	; 170
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 30 31 	call	0x6260	; 0x6260 <main>
      8a:	0c 94 d7 33 	jmp	0x67ae	; 0x67ae <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <__subsf3>
     1bc:	0e 94 b9 11 	call	0x2372	; 0x2372 <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 b9 11 	call	0x2372	; 0x2372 <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__udivdi3>:
     1e8:	ae e5       	ldi	r26, 0x5E	; 94
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 a0 33 	jmp	0x6740	; 0x6740 <__prologue_saves__>
     1f4:	a8 e0       	ldi	r26, 0x08	; 8
     1f6:	4e 01       	movw	r8, r28
     1f8:	08 94       	sec
     1fa:	81 1c       	adc	r8, r1
     1fc:	91 1c       	adc	r9, r1
     1fe:	f4 01       	movw	r30, r8
     200:	6a 2e       	mov	r6, r26
     202:	11 92       	st	Z+, r1
     204:	6a 94       	dec	r6
     206:	e9 f7       	brne	.-6      	; 0x202 <__udivdi3+0x1a>
     208:	29 83       	std	Y+1, r18	; 0x01
     20a:	3a 83       	std	Y+2, r19	; 0x02
     20c:	4b 83       	std	Y+3, r20	; 0x03
     20e:	5c 83       	std	Y+4, r21	; 0x04
     210:	6d 83       	std	Y+5, r22	; 0x05
     212:	7e 83       	std	Y+6, r23	; 0x06
     214:	8f 83       	std	Y+7, r24	; 0x07
     216:	98 87       	std	Y+8, r25	; 0x08
     218:	ce 01       	movw	r24, r28
     21a:	09 96       	adiw	r24, 0x09	; 9
     21c:	fc 01       	movw	r30, r24
     21e:	11 92       	st	Z+, r1
     220:	aa 95       	dec	r26
     222:	e9 f7       	brne	.-6      	; 0x21e <__udivdi3+0x36>
     224:	a9 86       	std	Y+9, r10	; 0x09
     226:	ba 86       	std	Y+10, r11	; 0x0a
     228:	cb 86       	std	Y+11, r12	; 0x0b
     22a:	dc 86       	std	Y+12, r13	; 0x0c
     22c:	ed 86       	std	Y+13, r14	; 0x0d
     22e:	fe 86       	std	Y+14, r15	; 0x0e
     230:	0f 87       	std	Y+15, r16	; 0x0f
     232:	18 8b       	std	Y+16, r17	; 0x10
     234:	29 84       	ldd	r2, Y+9	; 0x09
     236:	3a 84       	ldd	r3, Y+10	; 0x0a
     238:	4b 84       	ldd	r4, Y+11	; 0x0b
     23a:	5c 84       	ldd	r5, Y+12	; 0x0c
     23c:	ed 84       	ldd	r14, Y+13	; 0x0d
     23e:	fe 84       	ldd	r15, Y+14	; 0x0e
     240:	0f 85       	ldd	r16, Y+15	; 0x0f
     242:	18 89       	ldd	r17, Y+16	; 0x10
     244:	69 80       	ldd	r6, Y+1	; 0x01
     246:	7a 80       	ldd	r7, Y+2	; 0x02
     248:	8b 80       	ldd	r8, Y+3	; 0x03
     24a:	9c 80       	ldd	r9, Y+4	; 0x04
     24c:	6d a6       	std	Y+45, r6	; 0x2d
     24e:	7e a6       	std	Y+46, r7	; 0x2e
     250:	8f a6       	std	Y+47, r8	; 0x2f
     252:	98 aa       	std	Y+48, r9	; 0x30
     254:	6d 80       	ldd	r6, Y+5	; 0x05
     256:	7e 80       	ldd	r7, Y+6	; 0x06
     258:	8f 80       	ldd	r8, Y+7	; 0x07
     25a:	98 84       	ldd	r9, Y+8	; 0x08
     25c:	e1 14       	cp	r14, r1
     25e:	f1 04       	cpc	r15, r1
     260:	01 05       	cpc	r16, r1
     262:	11 05       	cpc	r17, r1
     264:	09 f0       	breq	.+2      	; 0x268 <__udivdi3+0x80>
     266:	b3 c3       	rjmp	.+1894   	; 0x9ce <__stack+0x16f>
     268:	62 14       	cp	r6, r2
     26a:	73 04       	cpc	r7, r3
     26c:	84 04       	cpc	r8, r4
     26e:	95 04       	cpc	r9, r5
     270:	08 f0       	brcs	.+2      	; 0x274 <__udivdi3+0x8c>
     272:	3d c1       	rjmp	.+634    	; 0x4ee <__udivdi3+0x306>
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	20 16       	cp	r2, r16
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	30 06       	cpc	r3, r16
     27c:	01 e0       	ldi	r16, 0x01	; 1
     27e:	40 06       	cpc	r4, r16
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	50 06       	cpc	r5, r16
     284:	88 f4       	brcc	.+34     	; 0x2a8 <__udivdi3+0xc0>
     286:	1f ef       	ldi	r17, 0xFF	; 255
     288:	21 16       	cp	r2, r17
     28a:	31 04       	cpc	r3, r1
     28c:	41 04       	cpc	r4, r1
     28e:	51 04       	cpc	r5, r1
     290:	39 f0       	breq	.+14     	; 0x2a0 <__udivdi3+0xb8>
     292:	30 f0       	brcs	.+12     	; 0x2a0 <__udivdi3+0xb8>
     294:	48 e0       	ldi	r20, 0x08	; 8
     296:	e4 2e       	mov	r14, r20
     298:	f1 2c       	mov	r15, r1
     29a:	01 2d       	mov	r16, r1
     29c:	11 2d       	mov	r17, r1
     29e:	18 c0       	rjmp	.+48     	; 0x2d0 <__udivdi3+0xe8>
     2a0:	ee 24       	eor	r14, r14
     2a2:	ff 24       	eor	r15, r15
     2a4:	87 01       	movw	r16, r14
     2a6:	14 c0       	rjmp	.+40     	; 0x2d0 <__udivdi3+0xe8>
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	22 16       	cp	r2, r18
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	32 06       	cpc	r3, r18
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	42 06       	cpc	r4, r18
     2b4:	21 e0       	ldi	r18, 0x01	; 1
     2b6:	52 06       	cpc	r5, r18
     2b8:	30 f0       	brcs	.+12     	; 0x2c6 <__udivdi3+0xde>
     2ba:	38 e1       	ldi	r19, 0x18	; 24
     2bc:	e3 2e       	mov	r14, r19
     2be:	f1 2c       	mov	r15, r1
     2c0:	01 2d       	mov	r16, r1
     2c2:	11 2d       	mov	r17, r1
     2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <__udivdi3+0xe8>
     2c6:	20 e1       	ldi	r18, 0x10	; 16
     2c8:	e2 2e       	mov	r14, r18
     2ca:	f1 2c       	mov	r15, r1
     2cc:	01 2d       	mov	r16, r1
     2ce:	11 2d       	mov	r17, r1
     2d0:	d2 01       	movw	r26, r4
     2d2:	c1 01       	movw	r24, r2
     2d4:	0e 2c       	mov	r0, r14
     2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <__udivdi3+0xf8>
     2d8:	b6 95       	lsr	r27
     2da:	a7 95       	ror	r26
     2dc:	97 95       	ror	r25
     2de:	87 95       	ror	r24
     2e0:	0a 94       	dec	r0
     2e2:	d2 f7       	brpl	.-12     	; 0x2d8 <__udivdi3+0xf0>
     2e4:	8b 58       	subi	r24, 0x8B	; 139
     2e6:	9e 4f       	sbci	r25, 0xFE	; 254
     2e8:	dc 01       	movw	r26, r24
     2ea:	2c 91       	ld	r18, X
     2ec:	80 e2       	ldi	r24, 0x20	; 32
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	a0 e0       	ldi	r26, 0x00	; 0
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	8e 19       	sub	r24, r14
     2f6:	9f 09       	sbc	r25, r15
     2f8:	a0 0b       	sbc	r26, r16
     2fa:	b1 0b       	sbc	r27, r17
     2fc:	7c 01       	movw	r14, r24
     2fe:	8d 01       	movw	r16, r26
     300:	e2 1a       	sub	r14, r18
     302:	f1 08       	sbc	r15, r1
     304:	01 09       	sbc	r16, r1
     306:	11 09       	sbc	r17, r1
     308:	e1 14       	cp	r14, r1
     30a:	f1 04       	cpc	r15, r1
     30c:	01 05       	cpc	r16, r1
     30e:	11 05       	cpc	r17, r1
     310:	a1 f1       	breq	.+104    	; 0x37a <__udivdi3+0x192>
     312:	0e 2c       	mov	r0, r14
     314:	04 c0       	rjmp	.+8      	; 0x31e <__udivdi3+0x136>
     316:	22 0c       	add	r2, r2
     318:	33 1c       	adc	r3, r3
     31a:	44 1c       	adc	r4, r4
     31c:	55 1c       	adc	r5, r5
     31e:	0a 94       	dec	r0
     320:	d2 f7       	brpl	.-12     	; 0x316 <__udivdi3+0x12e>
     322:	a4 01       	movw	r20, r8
     324:	93 01       	movw	r18, r6
     326:	0e 2c       	mov	r0, r14
     328:	04 c0       	rjmp	.+8      	; 0x332 <__udivdi3+0x14a>
     32a:	22 0f       	add	r18, r18
     32c:	33 1f       	adc	r19, r19
     32e:	44 1f       	adc	r20, r20
     330:	55 1f       	adc	r21, r21
     332:	0a 94       	dec	r0
     334:	d2 f7       	brpl	.-12     	; 0x32a <__udivdi3+0x142>
     336:	80 e2       	ldi	r24, 0x20	; 32
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	8e 19       	sub	r24, r14
     33c:	9f 09       	sbc	r25, r15
     33e:	6d a4       	ldd	r6, Y+45	; 0x2d
     340:	7e a4       	ldd	r7, Y+46	; 0x2e
     342:	8f a4       	ldd	r8, Y+47	; 0x2f
     344:	98 a8       	ldd	r9, Y+48	; 0x30
     346:	04 c0       	rjmp	.+8      	; 0x350 <__udivdi3+0x168>
     348:	96 94       	lsr	r9
     34a:	87 94       	ror	r8
     34c:	77 94       	ror	r7
     34e:	67 94       	ror	r6
     350:	8a 95       	dec	r24
     352:	d2 f7       	brpl	.-12     	; 0x348 <__udivdi3+0x160>
     354:	62 2a       	or	r6, r18
     356:	73 2a       	or	r7, r19
     358:	84 2a       	or	r8, r20
     35a:	95 2a       	or	r9, r21
     35c:	ad a4       	ldd	r10, Y+45	; 0x2d
     35e:	be a4       	ldd	r11, Y+46	; 0x2e
     360:	cf a4       	ldd	r12, Y+47	; 0x2f
     362:	d8 a8       	ldd	r13, Y+48	; 0x30
     364:	04 c0       	rjmp	.+8      	; 0x36e <__udivdi3+0x186>
     366:	aa 0c       	add	r10, r10
     368:	bb 1c       	adc	r11, r11
     36a:	cc 1c       	adc	r12, r12
     36c:	dd 1c       	adc	r13, r13
     36e:	ea 94       	dec	r14
     370:	d2 f7       	brpl	.-12     	; 0x366 <__udivdi3+0x17e>
     372:	ad a6       	std	Y+45, r10	; 0x2d
     374:	be a6       	std	Y+46, r11	; 0x2e
     376:	cf a6       	std	Y+47, r12	; 0x2f
     378:	d8 aa       	std	Y+48, r13	; 0x30
     37a:	62 01       	movw	r12, r4
     37c:	ee 24       	eor	r14, r14
     37e:	ff 24       	eor	r15, r15
     380:	cd aa       	std	Y+53, r12	; 0x35
     382:	de aa       	std	Y+54, r13	; 0x36
     384:	ef aa       	std	Y+55, r14	; 0x37
     386:	f8 ae       	std	Y+56, r15	; 0x38
     388:	92 01       	movw	r18, r4
     38a:	81 01       	movw	r16, r2
     38c:	20 70       	andi	r18, 0x00	; 0
     38e:	30 70       	andi	r19, 0x00	; 0
     390:	09 af       	std	Y+57, r16	; 0x39
     392:	1a af       	std	Y+58, r17	; 0x3a
     394:	2b af       	std	Y+59, r18	; 0x3b
     396:	3c af       	std	Y+60, r19	; 0x3c
     398:	c4 01       	movw	r24, r8
     39a:	b3 01       	movw	r22, r6
     39c:	a7 01       	movw	r20, r14
     39e:	96 01       	movw	r18, r12
     3a0:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
     3a4:	7b 01       	movw	r14, r22
     3a6:	8c 01       	movw	r16, r24
     3a8:	c4 01       	movw	r24, r8
     3aa:	b3 01       	movw	r22, r6
     3ac:	2d a9       	ldd	r18, Y+53	; 0x35
     3ae:	3e a9       	ldd	r19, Y+54	; 0x36
     3b0:	4f a9       	ldd	r20, Y+55	; 0x37
     3b2:	58 ad       	ldd	r21, Y+56	; 0x38
     3b4:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
     3b8:	c9 01       	movw	r24, r18
     3ba:	da 01       	movw	r26, r20
     3bc:	3c 01       	movw	r6, r24
     3be:	4d 01       	movw	r8, r26
     3c0:	c4 01       	movw	r24, r8
     3c2:	b3 01       	movw	r22, r6
     3c4:	29 ad       	ldd	r18, Y+57	; 0x39
     3c6:	3a ad       	ldd	r19, Y+58	; 0x3a
     3c8:	4b ad       	ldd	r20, Y+59	; 0x3b
     3ca:	5c ad       	ldd	r21, Y+60	; 0x3c
     3cc:	0e 94 81 33 	call	0x6702	; 0x6702 <__mulsi3>
     3d0:	9b 01       	movw	r18, r22
     3d2:	ac 01       	movw	r20, r24
     3d4:	87 01       	movw	r16, r14
     3d6:	ff 24       	eor	r15, r15
     3d8:	ee 24       	eor	r14, r14
     3da:	ad a4       	ldd	r10, Y+45	; 0x2d
     3dc:	be a4       	ldd	r11, Y+46	; 0x2e
     3de:	cf a4       	ldd	r12, Y+47	; 0x2f
     3e0:	d8 a8       	ldd	r13, Y+48	; 0x30
     3e2:	c6 01       	movw	r24, r12
     3e4:	aa 27       	eor	r26, r26
     3e6:	bb 27       	eor	r27, r27
     3e8:	57 01       	movw	r10, r14
     3ea:	68 01       	movw	r12, r16
     3ec:	a8 2a       	or	r10, r24
     3ee:	b9 2a       	or	r11, r25
     3f0:	ca 2a       	or	r12, r26
     3f2:	db 2a       	or	r13, r27
     3f4:	a2 16       	cp	r10, r18
     3f6:	b3 06       	cpc	r11, r19
     3f8:	c4 06       	cpc	r12, r20
     3fa:	d5 06       	cpc	r13, r21
     3fc:	e0 f4       	brcc	.+56     	; 0x436 <__udivdi3+0x24e>
     3fe:	08 94       	sec
     400:	61 08       	sbc	r6, r1
     402:	71 08       	sbc	r7, r1
     404:	81 08       	sbc	r8, r1
     406:	91 08       	sbc	r9, r1
     408:	a2 0c       	add	r10, r2
     40a:	b3 1c       	adc	r11, r3
     40c:	c4 1c       	adc	r12, r4
     40e:	d5 1c       	adc	r13, r5
     410:	a2 14       	cp	r10, r2
     412:	b3 04       	cpc	r11, r3
     414:	c4 04       	cpc	r12, r4
     416:	d5 04       	cpc	r13, r5
     418:	70 f0       	brcs	.+28     	; 0x436 <__udivdi3+0x24e>
     41a:	a2 16       	cp	r10, r18
     41c:	b3 06       	cpc	r11, r19
     41e:	c4 06       	cpc	r12, r20
     420:	d5 06       	cpc	r13, r21
     422:	48 f4       	brcc	.+18     	; 0x436 <__udivdi3+0x24e>
     424:	08 94       	sec
     426:	61 08       	sbc	r6, r1
     428:	71 08       	sbc	r7, r1
     42a:	81 08       	sbc	r8, r1
     42c:	91 08       	sbc	r9, r1
     42e:	a2 0c       	add	r10, r2
     430:	b3 1c       	adc	r11, r3
     432:	c4 1c       	adc	r12, r4
     434:	d5 1c       	adc	r13, r5
     436:	a2 1a       	sub	r10, r18
     438:	b3 0a       	sbc	r11, r19
     43a:	c4 0a       	sbc	r12, r20
     43c:	d5 0a       	sbc	r13, r21
     43e:	c6 01       	movw	r24, r12
     440:	b5 01       	movw	r22, r10
     442:	2d a9       	ldd	r18, Y+53	; 0x35
     444:	3e a9       	ldd	r19, Y+54	; 0x36
     446:	4f a9       	ldd	r20, Y+55	; 0x37
     448:	58 ad       	ldd	r21, Y+56	; 0x38
     44a:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
     44e:	7b 01       	movw	r14, r22
     450:	8c 01       	movw	r16, r24
     452:	c6 01       	movw	r24, r12
     454:	b5 01       	movw	r22, r10
     456:	2d a9       	ldd	r18, Y+53	; 0x35
     458:	3e a9       	ldd	r19, Y+54	; 0x36
     45a:	4f a9       	ldd	r20, Y+55	; 0x37
     45c:	58 ad       	ldd	r21, Y+56	; 0x38
     45e:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
     462:	c9 01       	movw	r24, r18
     464:	da 01       	movw	r26, r20
     466:	5c 01       	movw	r10, r24
     468:	6d 01       	movw	r12, r26
     46a:	c6 01       	movw	r24, r12
     46c:	b5 01       	movw	r22, r10
     46e:	29 ad       	ldd	r18, Y+57	; 0x39
     470:	3a ad       	ldd	r19, Y+58	; 0x3a
     472:	4b ad       	ldd	r20, Y+59	; 0x3b
     474:	5c ad       	ldd	r21, Y+60	; 0x3c
     476:	0e 94 81 33 	call	0x6702	; 0x6702 <__mulsi3>
     47a:	9b 01       	movw	r18, r22
     47c:	ac 01       	movw	r20, r24
     47e:	87 01       	movw	r16, r14
     480:	ff 24       	eor	r15, r15
     482:	ee 24       	eor	r14, r14
     484:	8d a5       	ldd	r24, Y+45	; 0x2d
     486:	9e a5       	ldd	r25, Y+46	; 0x2e
     488:	af a5       	ldd	r26, Y+47	; 0x2f
     48a:	b8 a9       	ldd	r27, Y+48	; 0x30
     48c:	a0 70       	andi	r26, 0x00	; 0
     48e:	b0 70       	andi	r27, 0x00	; 0
     490:	e8 2a       	or	r14, r24
     492:	f9 2a       	or	r15, r25
     494:	0a 2b       	or	r16, r26
     496:	1b 2b       	or	r17, r27
     498:	e2 16       	cp	r14, r18
     49a:	f3 06       	cpc	r15, r19
     49c:	04 07       	cpc	r16, r20
     49e:	15 07       	cpc	r17, r21
     4a0:	c0 f4       	brcc	.+48     	; 0x4d2 <__udivdi3+0x2ea>
     4a2:	08 94       	sec
     4a4:	a1 08       	sbc	r10, r1
     4a6:	b1 08       	sbc	r11, r1
     4a8:	c1 08       	sbc	r12, r1
     4aa:	d1 08       	sbc	r13, r1
     4ac:	e2 0c       	add	r14, r2
     4ae:	f3 1c       	adc	r15, r3
     4b0:	04 1d       	adc	r16, r4
     4b2:	15 1d       	adc	r17, r5
     4b4:	e2 14       	cp	r14, r2
     4b6:	f3 04       	cpc	r15, r3
     4b8:	04 05       	cpc	r16, r4
     4ba:	15 05       	cpc	r17, r5
     4bc:	50 f0       	brcs	.+20     	; 0x4d2 <__udivdi3+0x2ea>
     4be:	e2 16       	cp	r14, r18
     4c0:	f3 06       	cpc	r15, r19
     4c2:	04 07       	cpc	r16, r20
     4c4:	15 07       	cpc	r17, r21
     4c6:	28 f4       	brcc	.+10     	; 0x4d2 <__udivdi3+0x2ea>
     4c8:	08 94       	sec
     4ca:	a1 08       	sbc	r10, r1
     4cc:	b1 08       	sbc	r11, r1
     4ce:	c1 08       	sbc	r12, r1
     4d0:	d1 08       	sbc	r13, r1
     4d2:	d3 01       	movw	r26, r6
     4d4:	99 27       	eor	r25, r25
     4d6:	88 27       	eor	r24, r24
     4d8:	86 01       	movw	r16, r12
     4da:	75 01       	movw	r14, r10
     4dc:	e8 2a       	or	r14, r24
     4de:	f9 2a       	or	r15, r25
     4e0:	0a 2b       	or	r16, r26
     4e2:	1b 2b       	or	r17, r27
     4e4:	e9 aa       	std	Y+49, r14	; 0x31
     4e6:	fa aa       	std	Y+50, r15	; 0x32
     4e8:	0b ab       	std	Y+51, r16	; 0x33
     4ea:	1c ab       	std	Y+52, r17	; 0x34
     4ec:	cf c4       	rjmp	.+2462   	; 0xe8c <__stack+0x62d>
     4ee:	21 14       	cp	r2, r1
     4f0:	31 04       	cpc	r3, r1
     4f2:	41 04       	cpc	r4, r1
     4f4:	51 04       	cpc	r5, r1
     4f6:	71 f4       	brne	.+28     	; 0x514 <__udivdi3+0x32c>
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
     50c:	c9 01       	movw	r24, r18
     50e:	da 01       	movw	r26, r20
     510:	1c 01       	movw	r2, r24
     512:	2d 01       	movw	r4, r26
     514:	00 e0       	ldi	r16, 0x00	; 0
     516:	20 16       	cp	r2, r16
     518:	00 e0       	ldi	r16, 0x00	; 0
     51a:	30 06       	cpc	r3, r16
     51c:	01 e0       	ldi	r16, 0x01	; 1
     51e:	40 06       	cpc	r4, r16
     520:	00 e0       	ldi	r16, 0x00	; 0
     522:	50 06       	cpc	r5, r16
     524:	88 f4       	brcc	.+34     	; 0x548 <__udivdi3+0x360>
     526:	1f ef       	ldi	r17, 0xFF	; 255
     528:	21 16       	cp	r2, r17
     52a:	31 04       	cpc	r3, r1
     52c:	41 04       	cpc	r4, r1
     52e:	51 04       	cpc	r5, r1
     530:	31 f0       	breq	.+12     	; 0x53e <__udivdi3+0x356>
     532:	28 f0       	brcs	.+10     	; 0x53e <__udivdi3+0x356>
     534:	48 e0       	ldi	r20, 0x08	; 8
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	17 c0       	rjmp	.+46     	; 0x56c <__udivdi3+0x384>
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	12 c0       	rjmp	.+36     	; 0x56c <__udivdi3+0x384>
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	22 16       	cp	r2, r18
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	32 06       	cpc	r3, r18
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	42 06       	cpc	r4, r18
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	52 06       	cpc	r5, r18
     558:	28 f0       	brcs	.+10     	; 0x564 <__udivdi3+0x37c>
     55a:	48 e1       	ldi	r20, 0x18	; 24
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	04 c0       	rjmp	.+8      	; 0x56c <__udivdi3+0x384>
     564:	40 e1       	ldi	r20, 0x10	; 16
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	d2 01       	movw	r26, r4
     56e:	c1 01       	movw	r24, r2
     570:	04 2e       	mov	r0, r20
     572:	04 c0       	rjmp	.+8      	; 0x57c <__udivdi3+0x394>
     574:	b6 95       	lsr	r27
     576:	a7 95       	ror	r26
     578:	97 95       	ror	r25
     57a:	87 95       	ror	r24
     57c:	0a 94       	dec	r0
     57e:	d2 f7       	brpl	.-12     	; 0x574 <__udivdi3+0x38c>
     580:	8b 58       	subi	r24, 0x8B	; 139
     582:	9e 4f       	sbci	r25, 0xFE	; 254
     584:	dc 01       	movw	r26, r24
     586:	2c 91       	ld	r18, X
     588:	e0 e2       	ldi	r30, 0x20	; 32
     58a:	ee 2e       	mov	r14, r30
     58c:	f1 2c       	mov	r15, r1
     58e:	01 2d       	mov	r16, r1
     590:	11 2d       	mov	r17, r1
     592:	d8 01       	movw	r26, r16
     594:	c7 01       	movw	r24, r14
     596:	84 1b       	sub	r24, r20
     598:	95 0b       	sbc	r25, r21
     59a:	a6 0b       	sbc	r26, r22
     59c:	b7 0b       	sbc	r27, r23
     59e:	82 1b       	sub	r24, r18
     5a0:	91 09       	sbc	r25, r1
     5a2:	a1 09       	sbc	r26, r1
     5a4:	b1 09       	sbc	r27, r1
     5a6:	00 97       	sbiw	r24, 0x00	; 0
     5a8:	a1 05       	cpc	r26, r1
     5aa:	b1 05       	cpc	r27, r1
     5ac:	61 f4       	brne	.+24     	; 0x5c6 <__udivdi3+0x3de>
     5ae:	64 01       	movw	r12, r8
     5b0:	53 01       	movw	r10, r6
     5b2:	a2 18       	sub	r10, r2
     5b4:	b3 08       	sbc	r11, r3
     5b6:	c4 08       	sbc	r12, r4
     5b8:	d5 08       	sbc	r13, r5
     5ba:	31 e0       	ldi	r19, 0x01	; 1
     5bc:	63 2e       	mov	r6, r19
     5be:	71 2c       	mov	r7, r1
     5c0:	81 2c       	mov	r8, r1
     5c2:	91 2c       	mov	r9, r1
     5c4:	1e c1       	rjmp	.+572    	; 0x802 <__udivdi3+0x61a>
     5c6:	6f 96       	adiw	r28, 0x1f	; 31
     5c8:	8f af       	std	Y+63, r24	; 0x3f
     5ca:	6f 97       	sbiw	r28, 0x1f	; 31
     5cc:	08 2e       	mov	r0, r24
     5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <__udivdi3+0x3f0>
     5d0:	22 0c       	add	r2, r2
     5d2:	33 1c       	adc	r3, r3
     5d4:	44 1c       	adc	r4, r4
     5d6:	55 1c       	adc	r5, r5
     5d8:	0a 94       	dec	r0
     5da:	d2 f7       	brpl	.-12     	; 0x5d0 <__udivdi3+0x3e8>
     5dc:	ee 2d       	mov	r30, r14
     5de:	e8 1b       	sub	r30, r24
     5e0:	64 01       	movw	r12, r8
     5e2:	53 01       	movw	r10, r6
     5e4:	0e 2e       	mov	r0, r30
     5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <__udivdi3+0x408>
     5e8:	d6 94       	lsr	r13
     5ea:	c7 94       	ror	r12
     5ec:	b7 94       	ror	r11
     5ee:	a7 94       	ror	r10
     5f0:	0a 94       	dec	r0
     5f2:	d2 f7       	brpl	.-12     	; 0x5e8 <__udivdi3+0x400>
     5f4:	a4 01       	movw	r20, r8
     5f6:	93 01       	movw	r18, r6
     5f8:	6f 96       	adiw	r28, 0x1f	; 31
     5fa:	0f ac       	ldd	r0, Y+63	; 0x3f
     5fc:	6f 97       	sbiw	r28, 0x1f	; 31
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <__udivdi3+0x420>
     600:	22 0f       	add	r18, r18
     602:	33 1f       	adc	r19, r19
     604:	44 1f       	adc	r20, r20
     606:	55 1f       	adc	r21, r21
     608:	0a 94       	dec	r0
     60a:	d2 f7       	brpl	.-12     	; 0x600 <__udivdi3+0x418>
     60c:	6d a4       	ldd	r6, Y+45	; 0x2d
     60e:	7e a4       	ldd	r7, Y+46	; 0x2e
     610:	8f a4       	ldd	r8, Y+47	; 0x2f
     612:	98 a8       	ldd	r9, Y+48	; 0x30
     614:	0e 2e       	mov	r0, r30
     616:	04 c0       	rjmp	.+8      	; 0x620 <__udivdi3+0x438>
     618:	96 94       	lsr	r9
     61a:	87 94       	ror	r8
     61c:	77 94       	ror	r7
     61e:	67 94       	ror	r6
     620:	0a 94       	dec	r0
     622:	d2 f7       	brpl	.-12     	; 0x618 <__udivdi3+0x430>
     624:	84 01       	movw	r16, r8
     626:	73 01       	movw	r14, r6
     628:	e2 2a       	or	r14, r18
     62a:	f3 2a       	or	r15, r19
     62c:	04 2b       	or	r16, r20
     62e:	15 2b       	or	r17, r21
     630:	e9 a6       	std	Y+41, r14	; 0x29
     632:	fa a6       	std	Y+42, r15	; 0x2a
     634:	0b a7       	std	Y+43, r16	; 0x2b
     636:	1c a7       	std	Y+44, r17	; 0x2c
     638:	32 01       	movw	r6, r4
     63a:	88 24       	eor	r8, r8
     63c:	99 24       	eor	r9, r9
     63e:	92 01       	movw	r18, r4
     640:	81 01       	movw	r16, r2
     642:	20 70       	andi	r18, 0x00	; 0
     644:	30 70       	andi	r19, 0x00	; 0
     646:	21 96       	adiw	r28, 0x01	; 1
     648:	0c af       	std	Y+60, r16	; 0x3c
     64a:	1d af       	std	Y+61, r17	; 0x3d
     64c:	2e af       	std	Y+62, r18	; 0x3e
     64e:	3f af       	std	Y+63, r19	; 0x3f
     650:	21 97       	sbiw	r28, 0x01	; 1
     652:	c6 01       	movw	r24, r12
     654:	b5 01       	movw	r22, r10
     656:	a4 01       	movw	r20, r8
     658:	93 01       	movw	r18, r6
     65a:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
     65e:	7b 01       	movw	r14, r22
     660:	8c 01       	movw	r16, r24
     662:	c6 01       	movw	r24, r12
     664:	b5 01       	movw	r22, r10
     666:	a4 01       	movw	r20, r8
     668:	93 01       	movw	r18, r6
     66a:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
     66e:	c9 01       	movw	r24, r18
     670:	da 01       	movw	r26, r20
     672:	25 96       	adiw	r28, 0x05	; 5
     674:	8c af       	std	Y+60, r24	; 0x3c
     676:	9d af       	std	Y+61, r25	; 0x3d
     678:	ae af       	std	Y+62, r26	; 0x3e
     67a:	bf af       	std	Y+63, r27	; 0x3f
     67c:	25 97       	sbiw	r28, 0x05	; 5
     67e:	bc 01       	movw	r22, r24
     680:	cd 01       	movw	r24, r26
     682:	21 96       	adiw	r28, 0x01	; 1
     684:	2c ad       	ldd	r18, Y+60	; 0x3c
     686:	3d ad       	ldd	r19, Y+61	; 0x3d
     688:	4e ad       	ldd	r20, Y+62	; 0x3e
     68a:	5f ad       	ldd	r21, Y+63	; 0x3f
     68c:	21 97       	sbiw	r28, 0x01	; 1
     68e:	0e 94 81 33 	call	0x6702	; 0x6702 <__mulsi3>
     692:	9b 01       	movw	r18, r22
     694:	ac 01       	movw	r20, r24
     696:	87 01       	movw	r16, r14
     698:	ff 24       	eor	r15, r15
     69a:	ee 24       	eor	r14, r14
     69c:	a9 a4       	ldd	r10, Y+41	; 0x29
     69e:	ba a4       	ldd	r11, Y+42	; 0x2a
     6a0:	cb a4       	ldd	r12, Y+43	; 0x2b
     6a2:	dc a4       	ldd	r13, Y+44	; 0x2c
     6a4:	c6 01       	movw	r24, r12
     6a6:	aa 27       	eor	r26, r26
     6a8:	bb 27       	eor	r27, r27
     6aa:	5c 01       	movw	r10, r24
     6ac:	6d 01       	movw	r12, r26
     6ae:	ae 28       	or	r10, r14
     6b0:	bf 28       	or	r11, r15
     6b2:	c0 2a       	or	r12, r16
     6b4:	d1 2a       	or	r13, r17
     6b6:	a2 16       	cp	r10, r18
     6b8:	b3 06       	cpc	r11, r19
     6ba:	c4 06       	cpc	r12, r20
     6bc:	d5 06       	cpc	r13, r21
     6be:	60 f5       	brcc	.+88     	; 0x718 <__udivdi3+0x530>
     6c0:	25 96       	adiw	r28, 0x05	; 5
     6c2:	6c ad       	ldd	r22, Y+60	; 0x3c
     6c4:	7d ad       	ldd	r23, Y+61	; 0x3d
     6c6:	8e ad       	ldd	r24, Y+62	; 0x3e
     6c8:	9f ad       	ldd	r25, Y+63	; 0x3f
     6ca:	25 97       	sbiw	r28, 0x05	; 5
     6cc:	61 50       	subi	r22, 0x01	; 1
     6ce:	70 40       	sbci	r23, 0x00	; 0
     6d0:	80 40       	sbci	r24, 0x00	; 0
     6d2:	90 40       	sbci	r25, 0x00	; 0
     6d4:	25 96       	adiw	r28, 0x05	; 5
     6d6:	6c af       	std	Y+60, r22	; 0x3c
     6d8:	7d af       	std	Y+61, r23	; 0x3d
     6da:	8e af       	std	Y+62, r24	; 0x3e
     6dc:	9f af       	std	Y+63, r25	; 0x3f
     6de:	25 97       	sbiw	r28, 0x05	; 5
     6e0:	a2 0c       	add	r10, r2
     6e2:	b3 1c       	adc	r11, r3
     6e4:	c4 1c       	adc	r12, r4
     6e6:	d5 1c       	adc	r13, r5
     6e8:	a2 14       	cp	r10, r2
     6ea:	b3 04       	cpc	r11, r3
     6ec:	c4 04       	cpc	r12, r4
     6ee:	d5 04       	cpc	r13, r5
     6f0:	98 f0       	brcs	.+38     	; 0x718 <__udivdi3+0x530>
     6f2:	a2 16       	cp	r10, r18
     6f4:	b3 06       	cpc	r11, r19
     6f6:	c4 06       	cpc	r12, r20
     6f8:	d5 06       	cpc	r13, r21
     6fa:	70 f4       	brcc	.+28     	; 0x718 <__udivdi3+0x530>
     6fc:	61 50       	subi	r22, 0x01	; 1
     6fe:	70 40       	sbci	r23, 0x00	; 0
     700:	80 40       	sbci	r24, 0x00	; 0
     702:	90 40       	sbci	r25, 0x00	; 0
     704:	25 96       	adiw	r28, 0x05	; 5
     706:	6c af       	std	Y+60, r22	; 0x3c
     708:	7d af       	std	Y+61, r23	; 0x3d
     70a:	8e af       	std	Y+62, r24	; 0x3e
     70c:	9f af       	std	Y+63, r25	; 0x3f
     70e:	25 97       	sbiw	r28, 0x05	; 5
     710:	a2 0c       	add	r10, r2
     712:	b3 1c       	adc	r11, r3
     714:	c4 1c       	adc	r12, r4
     716:	d5 1c       	adc	r13, r5
     718:	a2 1a       	sub	r10, r18
     71a:	b3 0a       	sbc	r11, r19
     71c:	c4 0a       	sbc	r12, r20
     71e:	d5 0a       	sbc	r13, r21
     720:	c6 01       	movw	r24, r12
     722:	b5 01       	movw	r22, r10
     724:	a4 01       	movw	r20, r8
     726:	93 01       	movw	r18, r6
     728:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
     72c:	7b 01       	movw	r14, r22
     72e:	8c 01       	movw	r16, r24
     730:	c6 01       	movw	r24, r12
     732:	b5 01       	movw	r22, r10
     734:	a4 01       	movw	r20, r8
     736:	93 01       	movw	r18, r6
     738:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
     73c:	c9 01       	movw	r24, r18
     73e:	da 01       	movw	r26, r20
     740:	3c 01       	movw	r6, r24
     742:	4d 01       	movw	r8, r26
     744:	c4 01       	movw	r24, r8
     746:	b3 01       	movw	r22, r6
     748:	21 96       	adiw	r28, 0x01	; 1
     74a:	2c ad       	ldd	r18, Y+60	; 0x3c
     74c:	3d ad       	ldd	r19, Y+61	; 0x3d
     74e:	4e ad       	ldd	r20, Y+62	; 0x3e
     750:	5f ad       	ldd	r21, Y+63	; 0x3f
     752:	21 97       	sbiw	r28, 0x01	; 1
     754:	0e 94 81 33 	call	0x6702	; 0x6702 <__mulsi3>
     758:	9b 01       	movw	r18, r22
     75a:	ac 01       	movw	r20, r24
     75c:	87 01       	movw	r16, r14
     75e:	ff 24       	eor	r15, r15
     760:	ee 24       	eor	r14, r14
     762:	89 a5       	ldd	r24, Y+41	; 0x29
     764:	9a a5       	ldd	r25, Y+42	; 0x2a
     766:	ab a5       	ldd	r26, Y+43	; 0x2b
     768:	bc a5       	ldd	r27, Y+44	; 0x2c
     76a:	a0 70       	andi	r26, 0x00	; 0
     76c:	b0 70       	andi	r27, 0x00	; 0
     76e:	57 01       	movw	r10, r14
     770:	68 01       	movw	r12, r16
     772:	a8 2a       	or	r10, r24
     774:	b9 2a       	or	r11, r25
     776:	ca 2a       	or	r12, r26
     778:	db 2a       	or	r13, r27
     77a:	a2 16       	cp	r10, r18
     77c:	b3 06       	cpc	r11, r19
     77e:	c4 06       	cpc	r12, r20
     780:	d5 06       	cpc	r13, r21
     782:	e0 f4       	brcc	.+56     	; 0x7bc <__udivdi3+0x5d4>
     784:	08 94       	sec
     786:	61 08       	sbc	r6, r1
     788:	71 08       	sbc	r7, r1
     78a:	81 08       	sbc	r8, r1
     78c:	91 08       	sbc	r9, r1
     78e:	a2 0c       	add	r10, r2
     790:	b3 1c       	adc	r11, r3
     792:	c4 1c       	adc	r12, r4
     794:	d5 1c       	adc	r13, r5
     796:	a2 14       	cp	r10, r2
     798:	b3 04       	cpc	r11, r3
     79a:	c4 04       	cpc	r12, r4
     79c:	d5 04       	cpc	r13, r5
     79e:	70 f0       	brcs	.+28     	; 0x7bc <__udivdi3+0x5d4>
     7a0:	a2 16       	cp	r10, r18
     7a2:	b3 06       	cpc	r11, r19
     7a4:	c4 06       	cpc	r12, r20
     7a6:	d5 06       	cpc	r13, r21
     7a8:	48 f4       	brcc	.+18     	; 0x7bc <__udivdi3+0x5d4>
     7aa:	08 94       	sec
     7ac:	61 08       	sbc	r6, r1
     7ae:	71 08       	sbc	r7, r1
     7b0:	81 08       	sbc	r8, r1
     7b2:	91 08       	sbc	r9, r1
     7b4:	a2 0c       	add	r10, r2
     7b6:	b3 1c       	adc	r11, r3
     7b8:	c4 1c       	adc	r12, r4
     7ba:	d5 1c       	adc	r13, r5
     7bc:	8d a5       	ldd	r24, Y+45	; 0x2d
     7be:	9e a5       	ldd	r25, Y+46	; 0x2e
     7c0:	af a5       	ldd	r26, Y+47	; 0x2f
     7c2:	b8 a9       	ldd	r27, Y+48	; 0x30
     7c4:	6f 96       	adiw	r28, 0x1f	; 31
     7c6:	0f ac       	ldd	r0, Y+63	; 0x3f
     7c8:	6f 97       	sbiw	r28, 0x1f	; 31
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <__udivdi3+0x5ec>
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	aa 1f       	adc	r26, r26
     7d2:	bb 1f       	adc	r27, r27
     7d4:	0a 94       	dec	r0
     7d6:	d2 f7       	brpl	.-12     	; 0x7cc <__udivdi3+0x5e4>
     7d8:	8d a7       	std	Y+45, r24	; 0x2d
     7da:	9e a7       	std	Y+46, r25	; 0x2e
     7dc:	af a7       	std	Y+47, r26	; 0x2f
     7de:	b8 ab       	std	Y+48, r27	; 0x30
     7e0:	a2 1a       	sub	r10, r18
     7e2:	b3 0a       	sbc	r11, r19
     7e4:	c4 0a       	sbc	r12, r20
     7e6:	d5 0a       	sbc	r13, r21
     7e8:	25 96       	adiw	r28, 0x05	; 5
     7ea:	ec ac       	ldd	r14, Y+60	; 0x3c
     7ec:	fd ac       	ldd	r15, Y+61	; 0x3d
     7ee:	0e ad       	ldd	r16, Y+62	; 0x3e
     7f0:	1f ad       	ldd	r17, Y+63	; 0x3f
     7f2:	25 97       	sbiw	r28, 0x05	; 5
     7f4:	d7 01       	movw	r26, r14
     7f6:	99 27       	eor	r25, r25
     7f8:	88 27       	eor	r24, r24
     7fa:	68 2a       	or	r6, r24
     7fc:	79 2a       	or	r7, r25
     7fe:	8a 2a       	or	r8, r26
     800:	9b 2a       	or	r9, r27
     802:	82 01       	movw	r16, r4
     804:	22 27       	eor	r18, r18
     806:	33 27       	eor	r19, r19
     808:	29 96       	adiw	r28, 0x09	; 9
     80a:	0c af       	std	Y+60, r16	; 0x3c
     80c:	1d af       	std	Y+61, r17	; 0x3d
     80e:	2e af       	std	Y+62, r18	; 0x3e
     810:	3f af       	std	Y+63, r19	; 0x3f
     812:	29 97       	sbiw	r28, 0x09	; 9
     814:	a2 01       	movw	r20, r4
     816:	91 01       	movw	r18, r2
     818:	40 70       	andi	r20, 0x00	; 0
     81a:	50 70       	andi	r21, 0x00	; 0
     81c:	2d 96       	adiw	r28, 0x0d	; 13
     81e:	2c af       	std	Y+60, r18	; 0x3c
     820:	3d af       	std	Y+61, r19	; 0x3d
     822:	4e af       	std	Y+62, r20	; 0x3e
     824:	5f af       	std	Y+63, r21	; 0x3f
     826:	2d 97       	sbiw	r28, 0x0d	; 13
     828:	c6 01       	movw	r24, r12
     82a:	b5 01       	movw	r22, r10
     82c:	29 96       	adiw	r28, 0x09	; 9
     82e:	2c ad       	ldd	r18, Y+60	; 0x3c
     830:	3d ad       	ldd	r19, Y+61	; 0x3d
     832:	4e ad       	ldd	r20, Y+62	; 0x3e
     834:	5f ad       	ldd	r21, Y+63	; 0x3f
     836:	29 97       	sbiw	r28, 0x09	; 9
     838:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
     83c:	7b 01       	movw	r14, r22
     83e:	8c 01       	movw	r16, r24
     840:	c6 01       	movw	r24, r12
     842:	b5 01       	movw	r22, r10
     844:	29 96       	adiw	r28, 0x09	; 9
     846:	2c ad       	ldd	r18, Y+60	; 0x3c
     848:	3d ad       	ldd	r19, Y+61	; 0x3d
     84a:	4e ad       	ldd	r20, Y+62	; 0x3e
     84c:	5f ad       	ldd	r21, Y+63	; 0x3f
     84e:	29 97       	sbiw	r28, 0x09	; 9
     850:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
     854:	c9 01       	movw	r24, r18
     856:	da 01       	movw	r26, r20
     858:	61 96       	adiw	r28, 0x11	; 17
     85a:	8c af       	std	Y+60, r24	; 0x3c
     85c:	9d af       	std	Y+61, r25	; 0x3d
     85e:	ae af       	std	Y+62, r26	; 0x3e
     860:	bf af       	std	Y+63, r27	; 0x3f
     862:	61 97       	sbiw	r28, 0x11	; 17
     864:	bc 01       	movw	r22, r24
     866:	cd 01       	movw	r24, r26
     868:	2d 96       	adiw	r28, 0x0d	; 13
     86a:	2c ad       	ldd	r18, Y+60	; 0x3c
     86c:	3d ad       	ldd	r19, Y+61	; 0x3d
     86e:	4e ad       	ldd	r20, Y+62	; 0x3e
     870:	5f ad       	ldd	r21, Y+63	; 0x3f
     872:	2d 97       	sbiw	r28, 0x0d	; 13
     874:	0e 94 81 33 	call	0x6702	; 0x6702 <__mulsi3>
     878:	9b 01       	movw	r18, r22
     87a:	ac 01       	movw	r20, r24
     87c:	87 01       	movw	r16, r14
     87e:	ff 24       	eor	r15, r15
     880:	ee 24       	eor	r14, r14
     882:	ad a4       	ldd	r10, Y+45	; 0x2d
     884:	be a4       	ldd	r11, Y+46	; 0x2e
     886:	cf a4       	ldd	r12, Y+47	; 0x2f
     888:	d8 a8       	ldd	r13, Y+48	; 0x30
     88a:	c6 01       	movw	r24, r12
     88c:	aa 27       	eor	r26, r26
     88e:	bb 27       	eor	r27, r27
     890:	57 01       	movw	r10, r14
     892:	68 01       	movw	r12, r16
     894:	a8 2a       	or	r10, r24
     896:	b9 2a       	or	r11, r25
     898:	ca 2a       	or	r12, r26
     89a:	db 2a       	or	r13, r27
     89c:	a2 16       	cp	r10, r18
     89e:	b3 06       	cpc	r11, r19
     8a0:	c4 06       	cpc	r12, r20
     8a2:	d5 06       	cpc	r13, r21
     8a4:	60 f5       	brcc	.+88     	; 0x8fe <__stack+0x9f>
     8a6:	61 96       	adiw	r28, 0x11	; 17
     8a8:	6c ad       	ldd	r22, Y+60	; 0x3c
     8aa:	7d ad       	ldd	r23, Y+61	; 0x3d
     8ac:	8e ad       	ldd	r24, Y+62	; 0x3e
     8ae:	9f ad       	ldd	r25, Y+63	; 0x3f
     8b0:	61 97       	sbiw	r28, 0x11	; 17
     8b2:	61 50       	subi	r22, 0x01	; 1
     8b4:	70 40       	sbci	r23, 0x00	; 0
     8b6:	80 40       	sbci	r24, 0x00	; 0
     8b8:	90 40       	sbci	r25, 0x00	; 0
     8ba:	61 96       	adiw	r28, 0x11	; 17
     8bc:	6c af       	std	Y+60, r22	; 0x3c
     8be:	7d af       	std	Y+61, r23	; 0x3d
     8c0:	8e af       	std	Y+62, r24	; 0x3e
     8c2:	9f af       	std	Y+63, r25	; 0x3f
     8c4:	61 97       	sbiw	r28, 0x11	; 17
     8c6:	a2 0c       	add	r10, r2
     8c8:	b3 1c       	adc	r11, r3
     8ca:	c4 1c       	adc	r12, r4
     8cc:	d5 1c       	adc	r13, r5
     8ce:	a2 14       	cp	r10, r2
     8d0:	b3 04       	cpc	r11, r3
     8d2:	c4 04       	cpc	r12, r4
     8d4:	d5 04       	cpc	r13, r5
     8d6:	98 f0       	brcs	.+38     	; 0x8fe <__stack+0x9f>
     8d8:	a2 16       	cp	r10, r18
     8da:	b3 06       	cpc	r11, r19
     8dc:	c4 06       	cpc	r12, r20
     8de:	d5 06       	cpc	r13, r21
     8e0:	70 f4       	brcc	.+28     	; 0x8fe <__stack+0x9f>
     8e2:	61 50       	subi	r22, 0x01	; 1
     8e4:	70 40       	sbci	r23, 0x00	; 0
     8e6:	80 40       	sbci	r24, 0x00	; 0
     8e8:	90 40       	sbci	r25, 0x00	; 0
     8ea:	61 96       	adiw	r28, 0x11	; 17
     8ec:	6c af       	std	Y+60, r22	; 0x3c
     8ee:	7d af       	std	Y+61, r23	; 0x3d
     8f0:	8e af       	std	Y+62, r24	; 0x3e
     8f2:	9f af       	std	Y+63, r25	; 0x3f
     8f4:	61 97       	sbiw	r28, 0x11	; 17
     8f6:	a2 0c       	add	r10, r2
     8f8:	b3 1c       	adc	r11, r3
     8fa:	c4 1c       	adc	r12, r4
     8fc:	d5 1c       	adc	r13, r5
     8fe:	a2 1a       	sub	r10, r18
     900:	b3 0a       	sbc	r11, r19
     902:	c4 0a       	sbc	r12, r20
     904:	d5 0a       	sbc	r13, r21
     906:	c6 01       	movw	r24, r12
     908:	b5 01       	movw	r22, r10
     90a:	29 96       	adiw	r28, 0x09	; 9
     90c:	2c ad       	ldd	r18, Y+60	; 0x3c
     90e:	3d ad       	ldd	r19, Y+61	; 0x3d
     910:	4e ad       	ldd	r20, Y+62	; 0x3e
     912:	5f ad       	ldd	r21, Y+63	; 0x3f
     914:	29 97       	sbiw	r28, 0x09	; 9
     916:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
     91a:	7b 01       	movw	r14, r22
     91c:	8c 01       	movw	r16, r24
     91e:	c6 01       	movw	r24, r12
     920:	b5 01       	movw	r22, r10
     922:	29 96       	adiw	r28, 0x09	; 9
     924:	2c ad       	ldd	r18, Y+60	; 0x3c
     926:	3d ad       	ldd	r19, Y+61	; 0x3d
     928:	4e ad       	ldd	r20, Y+62	; 0x3e
     92a:	5f ad       	ldd	r21, Y+63	; 0x3f
     92c:	29 97       	sbiw	r28, 0x09	; 9
     92e:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
     932:	c9 01       	movw	r24, r18
     934:	da 01       	movw	r26, r20
     936:	5c 01       	movw	r10, r24
     938:	6d 01       	movw	r12, r26
     93a:	c6 01       	movw	r24, r12
     93c:	b5 01       	movw	r22, r10
     93e:	2d 96       	adiw	r28, 0x0d	; 13
     940:	2c ad       	ldd	r18, Y+60	; 0x3c
     942:	3d ad       	ldd	r19, Y+61	; 0x3d
     944:	4e ad       	ldd	r20, Y+62	; 0x3e
     946:	5f ad       	ldd	r21, Y+63	; 0x3f
     948:	2d 97       	sbiw	r28, 0x0d	; 13
     94a:	0e 94 81 33 	call	0x6702	; 0x6702 <__mulsi3>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	87 01       	movw	r16, r14
     954:	ff 24       	eor	r15, r15
     956:	ee 24       	eor	r14, r14
     958:	8d a5       	ldd	r24, Y+45	; 0x2d
     95a:	9e a5       	ldd	r25, Y+46	; 0x2e
     95c:	af a5       	ldd	r26, Y+47	; 0x2f
     95e:	b8 a9       	ldd	r27, Y+48	; 0x30
     960:	a0 70       	andi	r26, 0x00	; 0
     962:	b0 70       	andi	r27, 0x00	; 0
     964:	e8 2a       	or	r14, r24
     966:	f9 2a       	or	r15, r25
     968:	0a 2b       	or	r16, r26
     96a:	1b 2b       	or	r17, r27
     96c:	e2 16       	cp	r14, r18
     96e:	f3 06       	cpc	r15, r19
     970:	04 07       	cpc	r16, r20
     972:	15 07       	cpc	r17, r21
     974:	c0 f4       	brcc	.+48     	; 0x9a6 <__stack+0x147>
     976:	08 94       	sec
     978:	a1 08       	sbc	r10, r1
     97a:	b1 08       	sbc	r11, r1
     97c:	c1 08       	sbc	r12, r1
     97e:	d1 08       	sbc	r13, r1
     980:	e2 0c       	add	r14, r2
     982:	f3 1c       	adc	r15, r3
     984:	04 1d       	adc	r16, r4
     986:	15 1d       	adc	r17, r5
     988:	e2 14       	cp	r14, r2
     98a:	f3 04       	cpc	r15, r3
     98c:	04 05       	cpc	r16, r4
     98e:	15 05       	cpc	r17, r5
     990:	50 f0       	brcs	.+20     	; 0x9a6 <__stack+0x147>
     992:	e2 16       	cp	r14, r18
     994:	f3 06       	cpc	r15, r19
     996:	04 07       	cpc	r16, r20
     998:	15 07       	cpc	r17, r21
     99a:	28 f4       	brcc	.+10     	; 0x9a6 <__stack+0x147>
     99c:	08 94       	sec
     99e:	a1 08       	sbc	r10, r1
     9a0:	b1 08       	sbc	r11, r1
     9a2:	c1 08       	sbc	r12, r1
     9a4:	d1 08       	sbc	r13, r1
     9a6:	61 96       	adiw	r28, 0x11	; 17
     9a8:	ec ac       	ldd	r14, Y+60	; 0x3c
     9aa:	fd ac       	ldd	r15, Y+61	; 0x3d
     9ac:	0e ad       	ldd	r16, Y+62	; 0x3e
     9ae:	1f ad       	ldd	r17, Y+63	; 0x3f
     9b0:	61 97       	sbiw	r28, 0x11	; 17
     9b2:	d7 01       	movw	r26, r14
     9b4:	99 27       	eor	r25, r25
     9b6:	88 27       	eor	r24, r24
     9b8:	96 01       	movw	r18, r12
     9ba:	85 01       	movw	r16, r10
     9bc:	08 2b       	or	r16, r24
     9be:	19 2b       	or	r17, r25
     9c0:	2a 2b       	or	r18, r26
     9c2:	3b 2b       	or	r19, r27
     9c4:	09 ab       	std	Y+49, r16	; 0x31
     9c6:	1a ab       	std	Y+50, r17	; 0x32
     9c8:	2b ab       	std	Y+51, r18	; 0x33
     9ca:	3c ab       	std	Y+52, r19	; 0x34
     9cc:	62 c2       	rjmp	.+1220   	; 0xe92 <__stack+0x633>
     9ce:	6e 14       	cp	r6, r14
     9d0:	7f 04       	cpc	r7, r15
     9d2:	80 06       	cpc	r8, r16
     9d4:	91 06       	cpc	r9, r17
     9d6:	08 f4       	brcc	.+2      	; 0x9da <__stack+0x17b>
     9d8:	51 c2       	rjmp	.+1186   	; 0xe7c <__stack+0x61d>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	e2 16       	cp	r14, r18
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	f2 06       	cpc	r15, r18
     9e2:	21 e0       	ldi	r18, 0x01	; 1
     9e4:	02 07       	cpc	r16, r18
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	12 07       	cpc	r17, r18
     9ea:	88 f4       	brcc	.+34     	; 0xa0e <__stack+0x1af>
     9ec:	3f ef       	ldi	r19, 0xFF	; 255
     9ee:	e3 16       	cp	r14, r19
     9f0:	f1 04       	cpc	r15, r1
     9f2:	01 05       	cpc	r16, r1
     9f4:	11 05       	cpc	r17, r1
     9f6:	31 f0       	breq	.+12     	; 0xa04 <__stack+0x1a5>
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__stack+0x1a5>
     9fa:	48 e0       	ldi	r20, 0x08	; 8
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	17 c0       	rjmp	.+46     	; 0xa32 <__stack+0x1d3>
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__stack+0x1d3>
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	e4 16       	cp	r14, r20
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	f4 06       	cpc	r15, r20
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	04 07       	cpc	r16, r20
     a1a:	41 e0       	ldi	r20, 0x01	; 1
     a1c:	14 07       	cpc	r17, r20
     a1e:	28 f0       	brcs	.+10     	; 0xa2a <__stack+0x1cb>
     a20:	48 e1       	ldi	r20, 0x18	; 24
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <__stack+0x1d3>
     a2a:	40 e1       	ldi	r20, 0x10	; 16
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	d8 01       	movw	r26, r16
     a34:	c7 01       	movw	r24, r14
     a36:	04 2e       	mov	r0, r20
     a38:	04 c0       	rjmp	.+8      	; 0xa42 <__stack+0x1e3>
     a3a:	b6 95       	lsr	r27
     a3c:	a7 95       	ror	r26
     a3e:	97 95       	ror	r25
     a40:	87 95       	ror	r24
     a42:	0a 94       	dec	r0
     a44:	d2 f7       	brpl	.-12     	; 0xa3a <__stack+0x1db>
     a46:	8b 58       	subi	r24, 0x8B	; 139
     a48:	9e 4f       	sbci	r25, 0xFE	; 254
     a4a:	dc 01       	movw	r26, r24
     a4c:	2c 91       	ld	r18, X
     a4e:	30 e2       	ldi	r19, 0x20	; 32
     a50:	a3 2e       	mov	r10, r19
     a52:	b1 2c       	mov	r11, r1
     a54:	c1 2c       	mov	r12, r1
     a56:	d1 2c       	mov	r13, r1
     a58:	d6 01       	movw	r26, r12
     a5a:	c5 01       	movw	r24, r10
     a5c:	84 1b       	sub	r24, r20
     a5e:	95 0b       	sbc	r25, r21
     a60:	a6 0b       	sbc	r26, r22
     a62:	b7 0b       	sbc	r27, r23
     a64:	82 1b       	sub	r24, r18
     a66:	91 09       	sbc	r25, r1
     a68:	a1 09       	sbc	r26, r1
     a6a:	b1 09       	sbc	r27, r1
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	a1 05       	cpc	r26, r1
     a70:	b1 05       	cpc	r27, r1
     a72:	89 f4       	brne	.+34     	; 0xa96 <__stack+0x237>
     a74:	e6 14       	cp	r14, r6
     a76:	f7 04       	cpc	r15, r7
     a78:	08 05       	cpc	r16, r8
     a7a:	19 05       	cpc	r17, r9
     a7c:	08 f4       	brcc	.+2      	; 0xa80 <__stack+0x221>
     a7e:	f2 c1       	rjmp	.+996    	; 0xe64 <__stack+0x605>
     a80:	6d a4       	ldd	r6, Y+45	; 0x2d
     a82:	7e a4       	ldd	r7, Y+46	; 0x2e
     a84:	8f a4       	ldd	r8, Y+47	; 0x2f
     a86:	98 a8       	ldd	r9, Y+48	; 0x30
     a88:	62 14       	cp	r6, r2
     a8a:	73 04       	cpc	r7, r3
     a8c:	84 04       	cpc	r8, r4
     a8e:	95 04       	cpc	r9, r5
     a90:	08 f0       	brcs	.+2      	; 0xa94 <__stack+0x235>
     a92:	e8 c1       	rjmp	.+976    	; 0xe64 <__stack+0x605>
     a94:	f3 c1       	rjmp	.+998    	; 0xe7c <__stack+0x61d>
     a96:	6e 96       	adiw	r28, 0x1e	; 30
     a98:	8f af       	std	Y+63, r24	; 0x3f
     a9a:	6e 97       	sbiw	r28, 0x1e	; 30
     a9c:	08 2e       	mov	r0, r24
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__stack+0x249>
     aa0:	ee 0c       	add	r14, r14
     aa2:	ff 1c       	adc	r15, r15
     aa4:	00 1f       	adc	r16, r16
     aa6:	11 1f       	adc	r17, r17
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__stack+0x241>
     aac:	6a 2d       	mov	r22, r10
     aae:	68 1b       	sub	r22, r24
     ab0:	d2 01       	movw	r26, r4
     ab2:	c1 01       	movw	r24, r2
     ab4:	06 2e       	mov	r0, r22
     ab6:	04 c0       	rjmp	.+8      	; 0xac0 <__stack+0x261>
     ab8:	b6 95       	lsr	r27
     aba:	a7 95       	ror	r26
     abc:	97 95       	ror	r25
     abe:	87 95       	ror	r24
     ac0:	0a 94       	dec	r0
     ac2:	d2 f7       	brpl	.-12     	; 0xab8 <__stack+0x259>
     ac4:	5c 01       	movw	r10, r24
     ac6:	6d 01       	movw	r12, r26
     ac8:	ae 28       	or	r10, r14
     aca:	bf 28       	or	r11, r15
     acc:	c0 2a       	or	r12, r16
     ace:	d1 2a       	or	r13, r17
     ad0:	ad a2       	std	Y+37, r10	; 0x25
     ad2:	be a2       	std	Y+38, r11	; 0x26
     ad4:	cf a2       	std	Y+39, r12	; 0x27
     ad6:	d8 a6       	std	Y+40, r13	; 0x28
     ad8:	72 01       	movw	r14, r4
     ada:	61 01       	movw	r12, r2
     adc:	6e 96       	adiw	r28, 0x1e	; 30
     ade:	0f ac       	ldd	r0, Y+63	; 0x3f
     ae0:	6e 97       	sbiw	r28, 0x1e	; 30
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__stack+0x28d>
     ae4:	cc 0c       	add	r12, r12
     ae6:	dd 1c       	adc	r13, r13
     ae8:	ee 1c       	adc	r14, r14
     aea:	ff 1c       	adc	r15, r15
     aec:	0a 94       	dec	r0
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__stack+0x285>
     af0:	c9 a2       	std	Y+33, r12	; 0x21
     af2:	da a2       	std	Y+34, r13	; 0x22
     af4:	eb a2       	std	Y+35, r14	; 0x23
     af6:	fc a2       	std	Y+36, r15	; 0x24
     af8:	64 01       	movw	r12, r8
     afa:	53 01       	movw	r10, r6
     afc:	06 2e       	mov	r0, r22
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__stack+0x2a9>
     b00:	d6 94       	lsr	r13
     b02:	c7 94       	ror	r12
     b04:	b7 94       	ror	r11
     b06:	a7 94       	ror	r10
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__stack+0x2a1>
     b0c:	d4 01       	movw	r26, r8
     b0e:	c3 01       	movw	r24, r6
     b10:	6e 96       	adiw	r28, 0x1e	; 30
     b12:	0f ac       	ldd	r0, Y+63	; 0x3f
     b14:	6e 97       	sbiw	r28, 0x1e	; 30
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <__stack+0x2c1>
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	aa 1f       	adc	r26, r26
     b1e:	bb 1f       	adc	r27, r27
     b20:	0a 94       	dec	r0
     b22:	d2 f7       	brpl	.-12     	; 0xb18 <__stack+0x2b9>
     b24:	ed a4       	ldd	r14, Y+45	; 0x2d
     b26:	fe a4       	ldd	r15, Y+46	; 0x2e
     b28:	0f a5       	ldd	r16, Y+47	; 0x2f
     b2a:	18 a9       	ldd	r17, Y+48	; 0x30
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__stack+0x2d7>
     b2e:	16 95       	lsr	r17
     b30:	07 95       	ror	r16
     b32:	f7 94       	ror	r15
     b34:	e7 94       	ror	r14
     b36:	6a 95       	dec	r22
     b38:	d2 f7       	brpl	.-12     	; 0xb2e <__stack+0x2cf>
     b3a:	37 01       	movw	r6, r14
     b3c:	48 01       	movw	r8, r16
     b3e:	68 2a       	or	r6, r24
     b40:	79 2a       	or	r7, r25
     b42:	8a 2a       	or	r8, r26
     b44:	9b 2a       	or	r9, r27
     b46:	6d 8e       	std	Y+29, r6	; 0x1d
     b48:	7e 8e       	std	Y+30, r7	; 0x1e
     b4a:	8f 8e       	std	Y+31, r8	; 0x1f
     b4c:	98 a2       	std	Y+32, r9	; 0x20
     b4e:	ed a0       	ldd	r14, Y+37	; 0x25
     b50:	fe a0       	ldd	r15, Y+38	; 0x26
     b52:	0f a1       	ldd	r16, Y+39	; 0x27
     b54:	18 a5       	ldd	r17, Y+40	; 0x28
     b56:	38 01       	movw	r6, r16
     b58:	88 24       	eor	r8, r8
     b5a:	99 24       	eor	r9, r9
     b5c:	98 01       	movw	r18, r16
     b5e:	87 01       	movw	r16, r14
     b60:	20 70       	andi	r18, 0x00	; 0
     b62:	30 70       	andi	r19, 0x00	; 0
     b64:	65 96       	adiw	r28, 0x15	; 21
     b66:	0c af       	std	Y+60, r16	; 0x3c
     b68:	1d af       	std	Y+61, r17	; 0x3d
     b6a:	2e af       	std	Y+62, r18	; 0x3e
     b6c:	3f af       	std	Y+63, r19	; 0x3f
     b6e:	65 97       	sbiw	r28, 0x15	; 21
     b70:	c6 01       	movw	r24, r12
     b72:	b5 01       	movw	r22, r10
     b74:	a4 01       	movw	r20, r8
     b76:	93 01       	movw	r18, r6
     b78:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
     b7c:	7b 01       	movw	r14, r22
     b7e:	8c 01       	movw	r16, r24
     b80:	c6 01       	movw	r24, r12
     b82:	b5 01       	movw	r22, r10
     b84:	a4 01       	movw	r20, r8
     b86:	93 01       	movw	r18, r6
     b88:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
     b8c:	c9 01       	movw	r24, r18
     b8e:	da 01       	movw	r26, r20
     b90:	1c 01       	movw	r2, r24
     b92:	2d 01       	movw	r4, r26
     b94:	c2 01       	movw	r24, r4
     b96:	b1 01       	movw	r22, r2
     b98:	65 96       	adiw	r28, 0x15	; 21
     b9a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b9c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b9e:	4e ad       	ldd	r20, Y+62	; 0x3e
     ba0:	5f ad       	ldd	r21, Y+63	; 0x3f
     ba2:	65 97       	sbiw	r28, 0x15	; 21
     ba4:	0e 94 81 33 	call	0x6702	; 0x6702 <__mulsi3>
     ba8:	9b 01       	movw	r18, r22
     baa:	ac 01       	movw	r20, r24
     bac:	87 01       	movw	r16, r14
     bae:	ff 24       	eor	r15, r15
     bb0:	ee 24       	eor	r14, r14
     bb2:	ad 8c       	ldd	r10, Y+29	; 0x1d
     bb4:	be 8c       	ldd	r11, Y+30	; 0x1e
     bb6:	cf 8c       	ldd	r12, Y+31	; 0x1f
     bb8:	d8 a0       	ldd	r13, Y+32	; 0x20
     bba:	c6 01       	movw	r24, r12
     bbc:	aa 27       	eor	r26, r26
     bbe:	bb 27       	eor	r27, r27
     bc0:	57 01       	movw	r10, r14
     bc2:	68 01       	movw	r12, r16
     bc4:	a8 2a       	or	r10, r24
     bc6:	b9 2a       	or	r11, r25
     bc8:	ca 2a       	or	r12, r26
     bca:	db 2a       	or	r13, r27
     bcc:	a2 16       	cp	r10, r18
     bce:	b3 06       	cpc	r11, r19
     bd0:	c4 06       	cpc	r12, r20
     bd2:	d5 06       	cpc	r13, r21
     bd4:	00 f5       	brcc	.+64     	; 0xc16 <__stack+0x3b7>
     bd6:	08 94       	sec
     bd8:	21 08       	sbc	r2, r1
     bda:	31 08       	sbc	r3, r1
     bdc:	41 08       	sbc	r4, r1
     bde:	51 08       	sbc	r5, r1
     be0:	ed a0       	ldd	r14, Y+37	; 0x25
     be2:	fe a0       	ldd	r15, Y+38	; 0x26
     be4:	0f a1       	ldd	r16, Y+39	; 0x27
     be6:	18 a5       	ldd	r17, Y+40	; 0x28
     be8:	ae 0c       	add	r10, r14
     bea:	bf 1c       	adc	r11, r15
     bec:	c0 1e       	adc	r12, r16
     bee:	d1 1e       	adc	r13, r17
     bf0:	ae 14       	cp	r10, r14
     bf2:	bf 04       	cpc	r11, r15
     bf4:	c0 06       	cpc	r12, r16
     bf6:	d1 06       	cpc	r13, r17
     bf8:	70 f0       	brcs	.+28     	; 0xc16 <__stack+0x3b7>
     bfa:	a2 16       	cp	r10, r18
     bfc:	b3 06       	cpc	r11, r19
     bfe:	c4 06       	cpc	r12, r20
     c00:	d5 06       	cpc	r13, r21
     c02:	48 f4       	brcc	.+18     	; 0xc16 <__stack+0x3b7>
     c04:	08 94       	sec
     c06:	21 08       	sbc	r2, r1
     c08:	31 08       	sbc	r3, r1
     c0a:	41 08       	sbc	r4, r1
     c0c:	51 08       	sbc	r5, r1
     c0e:	ae 0c       	add	r10, r14
     c10:	bf 1c       	adc	r11, r15
     c12:	c0 1e       	adc	r12, r16
     c14:	d1 1e       	adc	r13, r17
     c16:	a2 1a       	sub	r10, r18
     c18:	b3 0a       	sbc	r11, r19
     c1a:	c4 0a       	sbc	r12, r20
     c1c:	d5 0a       	sbc	r13, r21
     c1e:	c6 01       	movw	r24, r12
     c20:	b5 01       	movw	r22, r10
     c22:	a4 01       	movw	r20, r8
     c24:	93 01       	movw	r18, r6
     c26:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
     c2a:	7b 01       	movw	r14, r22
     c2c:	8c 01       	movw	r16, r24
     c2e:	c6 01       	movw	r24, r12
     c30:	b5 01       	movw	r22, r10
     c32:	a4 01       	movw	r20, r8
     c34:	93 01       	movw	r18, r6
     c36:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
     c3a:	c9 01       	movw	r24, r18
     c3c:	da 01       	movw	r26, r20
     c3e:	3c 01       	movw	r6, r24
     c40:	4d 01       	movw	r8, r26
     c42:	c4 01       	movw	r24, r8
     c44:	b3 01       	movw	r22, r6
     c46:	65 96       	adiw	r28, 0x15	; 21
     c48:	2c ad       	ldd	r18, Y+60	; 0x3c
     c4a:	3d ad       	ldd	r19, Y+61	; 0x3d
     c4c:	4e ad       	ldd	r20, Y+62	; 0x3e
     c4e:	5f ad       	ldd	r21, Y+63	; 0x3f
     c50:	65 97       	sbiw	r28, 0x15	; 21
     c52:	0e 94 81 33 	call	0x6702	; 0x6702 <__mulsi3>
     c56:	9b 01       	movw	r18, r22
     c58:	ac 01       	movw	r20, r24
     c5a:	87 01       	movw	r16, r14
     c5c:	ff 24       	eor	r15, r15
     c5e:	ee 24       	eor	r14, r14
     c60:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c62:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c64:	af 8d       	ldd	r26, Y+31	; 0x1f
     c66:	b8 a1       	ldd	r27, Y+32	; 0x20
     c68:	a0 70       	andi	r26, 0x00	; 0
     c6a:	b0 70       	andi	r27, 0x00	; 0
     c6c:	57 01       	movw	r10, r14
     c6e:	68 01       	movw	r12, r16
     c70:	a8 2a       	or	r10, r24
     c72:	b9 2a       	or	r11, r25
     c74:	ca 2a       	or	r12, r26
     c76:	db 2a       	or	r13, r27
     c78:	a2 16       	cp	r10, r18
     c7a:	b3 06       	cpc	r11, r19
     c7c:	c4 06       	cpc	r12, r20
     c7e:	d5 06       	cpc	r13, r21
     c80:	00 f5       	brcc	.+64     	; 0xcc2 <__stack+0x463>
     c82:	08 94       	sec
     c84:	61 08       	sbc	r6, r1
     c86:	71 08       	sbc	r7, r1
     c88:	81 08       	sbc	r8, r1
     c8a:	91 08       	sbc	r9, r1
     c8c:	6d a1       	ldd	r22, Y+37	; 0x25
     c8e:	7e a1       	ldd	r23, Y+38	; 0x26
     c90:	8f a1       	ldd	r24, Y+39	; 0x27
     c92:	98 a5       	ldd	r25, Y+40	; 0x28
     c94:	a6 0e       	add	r10, r22
     c96:	b7 1e       	adc	r11, r23
     c98:	c8 1e       	adc	r12, r24
     c9a:	d9 1e       	adc	r13, r25
     c9c:	a6 16       	cp	r10, r22
     c9e:	b7 06       	cpc	r11, r23
     ca0:	c8 06       	cpc	r12, r24
     ca2:	d9 06       	cpc	r13, r25
     ca4:	70 f0       	brcs	.+28     	; 0xcc2 <__stack+0x463>
     ca6:	a2 16       	cp	r10, r18
     ca8:	b3 06       	cpc	r11, r19
     caa:	c4 06       	cpc	r12, r20
     cac:	d5 06       	cpc	r13, r21
     cae:	48 f4       	brcc	.+18     	; 0xcc2 <__stack+0x463>
     cb0:	08 94       	sec
     cb2:	61 08       	sbc	r6, r1
     cb4:	71 08       	sbc	r7, r1
     cb6:	81 08       	sbc	r8, r1
     cb8:	91 08       	sbc	r9, r1
     cba:	a6 0e       	add	r10, r22
     cbc:	b7 1e       	adc	r11, r23
     cbe:	c8 1e       	adc	r12, r24
     cc0:	d9 1e       	adc	r13, r25
     cc2:	d6 01       	movw	r26, r12
     cc4:	c5 01       	movw	r24, r10
     cc6:	82 1b       	sub	r24, r18
     cc8:	93 0b       	sbc	r25, r19
     cca:	a4 0b       	sbc	r26, r20
     ccc:	b5 0b       	sbc	r27, r21
     cce:	89 8f       	std	Y+25, r24	; 0x19
     cd0:	9a 8f       	std	Y+26, r25	; 0x1a
     cd2:	ab 8f       	std	Y+27, r26	; 0x1b
     cd4:	bc 8f       	std	Y+28, r27	; 0x1c
     cd6:	d1 01       	movw	r26, r2
     cd8:	99 27       	eor	r25, r25
     cda:	88 27       	eor	r24, r24
     cdc:	64 01       	movw	r12, r8
     cde:	53 01       	movw	r10, r6
     ce0:	a8 2a       	or	r10, r24
     ce2:	b9 2a       	or	r11, r25
     ce4:	ca 2a       	or	r12, r26
     ce6:	db 2a       	or	r13, r27
     ce8:	a9 aa       	std	Y+49, r10	; 0x31
     cea:	ba aa       	std	Y+50, r11	; 0x32
     cec:	cb aa       	std	Y+51, r12	; 0x33
     cee:	dc aa       	std	Y+52, r13	; 0x34
     cf0:	86 01       	movw	r16, r12
     cf2:	75 01       	movw	r14, r10
     cf4:	2f ef       	ldi	r18, 0xFF	; 255
     cf6:	3f ef       	ldi	r19, 0xFF	; 255
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	e2 22       	and	r14, r18
     cfe:	f3 22       	and	r15, r19
     d00:	04 23       	and	r16, r20
     d02:	15 23       	and	r17, r21
     d04:	a6 01       	movw	r20, r12
     d06:	66 27       	eor	r22, r22
     d08:	77 27       	eor	r23, r23
     d0a:	6d 96       	adiw	r28, 0x1d	; 29
     d0c:	4c af       	std	Y+60, r20	; 0x3c
     d0e:	5d af       	std	Y+61, r21	; 0x3d
     d10:	6e af       	std	Y+62, r22	; 0x3e
     d12:	7f af       	std	Y+63, r23	; 0x3f
     d14:	6d 97       	sbiw	r28, 0x1d	; 29
     d16:	a9 a0       	ldd	r10, Y+33	; 0x21
     d18:	ba a0       	ldd	r11, Y+34	; 0x22
     d1a:	cb a0       	ldd	r12, Y+35	; 0x23
     d1c:	dc a0       	ldd	r13, Y+36	; 0x24
     d1e:	6f ef       	ldi	r22, 0xFF	; 255
     d20:	7f ef       	ldi	r23, 0xFF	; 255
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a6 22       	and	r10, r22
     d28:	b7 22       	and	r11, r23
     d2a:	c8 22       	and	r12, r24
     d2c:	d9 22       	and	r13, r25
     d2e:	89 a1       	ldd	r24, Y+33	; 0x21
     d30:	9a a1       	ldd	r25, Y+34	; 0x22
     d32:	ab a1       	ldd	r26, Y+35	; 0x23
     d34:	bc a1       	ldd	r27, Y+36	; 0x24
     d36:	1d 01       	movw	r2, r26
     d38:	44 24       	eor	r4, r4
     d3a:	55 24       	eor	r5, r5
     d3c:	c8 01       	movw	r24, r16
     d3e:	b7 01       	movw	r22, r14
     d40:	a6 01       	movw	r20, r12
     d42:	95 01       	movw	r18, r10
     d44:	0e 94 81 33 	call	0x6702	; 0x6702 <__mulsi3>
     d48:	69 96       	adiw	r28, 0x19	; 25
     d4a:	6c af       	std	Y+60, r22	; 0x3c
     d4c:	7d af       	std	Y+61, r23	; 0x3d
     d4e:	8e af       	std	Y+62, r24	; 0x3e
     d50:	9f af       	std	Y+63, r25	; 0x3f
     d52:	69 97       	sbiw	r28, 0x19	; 25
     d54:	c8 01       	movw	r24, r16
     d56:	b7 01       	movw	r22, r14
     d58:	a2 01       	movw	r20, r4
     d5a:	91 01       	movw	r18, r2
     d5c:	0e 94 81 33 	call	0x6702	; 0x6702 <__mulsi3>
     d60:	3b 01       	movw	r6, r22
     d62:	4c 01       	movw	r8, r24
     d64:	6d 96       	adiw	r28, 0x1d	; 29
     d66:	6c ad       	ldd	r22, Y+60	; 0x3c
     d68:	7d ad       	ldd	r23, Y+61	; 0x3d
     d6a:	8e ad       	ldd	r24, Y+62	; 0x3e
     d6c:	9f ad       	ldd	r25, Y+63	; 0x3f
     d6e:	6d 97       	sbiw	r28, 0x1d	; 29
     d70:	a6 01       	movw	r20, r12
     d72:	95 01       	movw	r18, r10
     d74:	0e 94 81 33 	call	0x6702	; 0x6702 <__mulsi3>
     d78:	7b 01       	movw	r14, r22
     d7a:	8c 01       	movw	r16, r24
     d7c:	6d 96       	adiw	r28, 0x1d	; 29
     d7e:	6c ad       	ldd	r22, Y+60	; 0x3c
     d80:	7d ad       	ldd	r23, Y+61	; 0x3d
     d82:	8e ad       	ldd	r24, Y+62	; 0x3e
     d84:	9f ad       	ldd	r25, Y+63	; 0x3f
     d86:	6d 97       	sbiw	r28, 0x1d	; 29
     d88:	a2 01       	movw	r20, r4
     d8a:	91 01       	movw	r18, r2
     d8c:	0e 94 81 33 	call	0x6702	; 0x6702 <__mulsi3>
     d90:	5b 01       	movw	r10, r22
     d92:	6c 01       	movw	r12, r24
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	26 0d       	add	r18, r6
     d9a:	37 1d       	adc	r19, r7
     d9c:	48 1d       	adc	r20, r8
     d9e:	59 1d       	adc	r21, r9
     da0:	69 96       	adiw	r28, 0x19	; 25
     da2:	6c ac       	ldd	r6, Y+60	; 0x3c
     da4:	7d ac       	ldd	r7, Y+61	; 0x3d
     da6:	8e ac       	ldd	r8, Y+62	; 0x3e
     da8:	9f ac       	ldd	r9, Y+63	; 0x3f
     daa:	69 97       	sbiw	r28, 0x19	; 25
     dac:	c4 01       	movw	r24, r8
     dae:	aa 27       	eor	r26, r26
     db0:	bb 27       	eor	r27, r27
     db2:	28 0f       	add	r18, r24
     db4:	39 1f       	adc	r19, r25
     db6:	4a 1f       	adc	r20, r26
     db8:	5b 1f       	adc	r21, r27
     dba:	2e 15       	cp	r18, r14
     dbc:	3f 05       	cpc	r19, r15
     dbe:	40 07       	cpc	r20, r16
     dc0:	51 07       	cpc	r21, r17
     dc2:	48 f4       	brcc	.+18     	; 0xdd6 <__stack+0x577>
     dc4:	e1 2c       	mov	r14, r1
     dc6:	f1 2c       	mov	r15, r1
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	06 2f       	mov	r16, r22
     dcc:	11 2d       	mov	r17, r1
     dce:	ae 0c       	add	r10, r14
     dd0:	bf 1c       	adc	r11, r15
     dd2:	c0 1e       	adc	r12, r16
     dd4:	d1 1e       	adc	r13, r17
     dd6:	ca 01       	movw	r24, r20
     dd8:	aa 27       	eor	r26, r26
     dda:	bb 27       	eor	r27, r27
     ddc:	bc 01       	movw	r22, r24
     dde:	cd 01       	movw	r24, r26
     de0:	6a 0d       	add	r22, r10
     de2:	7b 1d       	adc	r23, r11
     de4:	8c 1d       	adc	r24, r12
     de6:	9d 1d       	adc	r25, r13
     de8:	69 8c       	ldd	r6, Y+25	; 0x19
     dea:	7a 8c       	ldd	r7, Y+26	; 0x1a
     dec:	8b 8c       	ldd	r8, Y+27	; 0x1b
     dee:	9c 8c       	ldd	r9, Y+28	; 0x1c
     df0:	66 16       	cp	r6, r22
     df2:	77 06       	cpc	r7, r23
     df4:	88 06       	cpc	r8, r24
     df6:	99 06       	cpc	r9, r25
     df8:	40 f1       	brcs	.+80     	; 0xe4a <__stack+0x5eb>
     dfa:	66 15       	cp	r22, r6
     dfc:	77 05       	cpc	r23, r7
     dfe:	88 05       	cpc	r24, r8
     e00:	99 05       	cpc	r25, r9
     e02:	09 f0       	breq	.+2      	; 0xe06 <__stack+0x5a7>
     e04:	43 c0       	rjmp	.+134    	; 0xe8c <__stack+0x62d>
     e06:	d9 01       	movw	r26, r18
     e08:	99 27       	eor	r25, r25
     e0a:	88 27       	eor	r24, r24
     e0c:	69 96       	adiw	r28, 0x19	; 25
     e0e:	2c ad       	ldd	r18, Y+60	; 0x3c
     e10:	3d ad       	ldd	r19, Y+61	; 0x3d
     e12:	4e ad       	ldd	r20, Y+62	; 0x3e
     e14:	5f ad       	ldd	r21, Y+63	; 0x3f
     e16:	69 97       	sbiw	r28, 0x19	; 25
     e18:	40 70       	andi	r20, 0x00	; 0
     e1a:	50 70       	andi	r21, 0x00	; 0
     e1c:	82 0f       	add	r24, r18
     e1e:	93 1f       	adc	r25, r19
     e20:	a4 1f       	adc	r26, r20
     e22:	b5 1f       	adc	r27, r21
     e24:	2d a5       	ldd	r18, Y+45	; 0x2d
     e26:	3e a5       	ldd	r19, Y+46	; 0x2e
     e28:	4f a5       	ldd	r20, Y+47	; 0x2f
     e2a:	58 a9       	ldd	r21, Y+48	; 0x30
     e2c:	6e 96       	adiw	r28, 0x1e	; 30
     e2e:	0f ac       	ldd	r0, Y+63	; 0x3f
     e30:	6e 97       	sbiw	r28, 0x1e	; 30
     e32:	04 c0       	rjmp	.+8      	; 0xe3c <__stack+0x5dd>
     e34:	22 0f       	add	r18, r18
     e36:	33 1f       	adc	r19, r19
     e38:	44 1f       	adc	r20, r20
     e3a:	55 1f       	adc	r21, r21
     e3c:	0a 94       	dec	r0
     e3e:	d2 f7       	brpl	.-12     	; 0xe34 <__stack+0x5d5>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	4a 07       	cpc	r20, r26
     e46:	5b 07       	cpc	r21, r27
     e48:	08 f5       	brcc	.+66     	; 0xe8c <__stack+0x62d>
     e4a:	09 a9       	ldd	r16, Y+49	; 0x31
     e4c:	1a a9       	ldd	r17, Y+50	; 0x32
     e4e:	2b a9       	ldd	r18, Y+51	; 0x33
     e50:	3c a9       	ldd	r19, Y+52	; 0x34
     e52:	01 50       	subi	r16, 0x01	; 1
     e54:	10 40       	sbci	r17, 0x00	; 0
     e56:	20 40       	sbci	r18, 0x00	; 0
     e58:	30 40       	sbci	r19, 0x00	; 0
     e5a:	09 ab       	std	Y+49, r16	; 0x31
     e5c:	1a ab       	std	Y+50, r17	; 0x32
     e5e:	2b ab       	std	Y+51, r18	; 0x33
     e60:	3c ab       	std	Y+52, r19	; 0x34
     e62:	14 c0       	rjmp	.+40     	; 0xe8c <__stack+0x62d>
     e64:	66 24       	eor	r6, r6
     e66:	77 24       	eor	r7, r7
     e68:	43 01       	movw	r8, r6
     e6a:	21 e0       	ldi	r18, 0x01	; 1
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	29 ab       	std	Y+49, r18	; 0x31
     e74:	3a ab       	std	Y+50, r19	; 0x32
     e76:	4b ab       	std	Y+51, r20	; 0x33
     e78:	5c ab       	std	Y+52, r21	; 0x34
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <__stack+0x633>
     e7c:	66 24       	eor	r6, r6
     e7e:	77 24       	eor	r7, r7
     e80:	43 01       	movw	r8, r6
     e82:	19 aa       	std	Y+49, r1	; 0x31
     e84:	1a aa       	std	Y+50, r1	; 0x32
     e86:	1b aa       	std	Y+51, r1	; 0x33
     e88:	1c aa       	std	Y+52, r1	; 0x34
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <__stack+0x633>
     e8c:	66 24       	eor	r6, r6
     e8e:	77 24       	eor	r7, r7
     e90:	43 01       	movw	r8, r6
     e92:	fe 01       	movw	r30, r28
     e94:	71 96       	adiw	r30, 0x11	; 17
     e96:	88 e0       	ldi	r24, 0x08	; 8
     e98:	df 01       	movw	r26, r30
     e9a:	1d 92       	st	X+, r1
     e9c:	8a 95       	dec	r24
     e9e:	e9 f7       	brne	.-6      	; 0xe9a <__stack+0x63b>
     ea0:	a9 a8       	ldd	r10, Y+49	; 0x31
     ea2:	ba a8       	ldd	r11, Y+50	; 0x32
     ea4:	cb a8       	ldd	r12, Y+51	; 0x33
     ea6:	dc a8       	ldd	r13, Y+52	; 0x34
     ea8:	a9 8a       	std	Y+17, r10	; 0x11
     eaa:	ba 8a       	std	Y+18, r11	; 0x12
     eac:	cb 8a       	std	Y+19, r12	; 0x13
     eae:	dc 8a       	std	Y+20, r13	; 0x14
     eb0:	6d 8a       	std	Y+21, r6	; 0x15
     eb2:	7e 8a       	std	Y+22, r7	; 0x16
     eb4:	8f 8a       	std	Y+23, r8	; 0x17
     eb6:	98 8e       	std	Y+24, r9	; 0x18
     eb8:	29 a9       	ldd	r18, Y+49	; 0x31
     eba:	3a 89       	ldd	r19, Y+18	; 0x12
     ebc:	4b 89       	ldd	r20, Y+19	; 0x13
     ebe:	5c 89       	ldd	r21, Y+20	; 0x14
     ec0:	66 2d       	mov	r22, r6
     ec2:	7e 89       	ldd	r23, Y+22	; 0x16
     ec4:	8f 89       	ldd	r24, Y+23	; 0x17
     ec6:	98 8d       	ldd	r25, Y+24	; 0x18
     ec8:	c2 5a       	subi	r28, 0xA2	; 162
     eca:	df 4f       	sbci	r29, 0xFF	; 255
     ecc:	e2 e1       	ldi	r30, 0x12	; 18
     ece:	0c 94 bc 33 	jmp	0x6778	; 0x6778 <__epilogue_restores__>

00000ed2 <__umoddi3>:
     ed2:	ab e5       	ldi	r26, 0x5B	; 91
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ef e6       	ldi	r30, 0x6F	; 111
     ed8:	f7 e0       	ldi	r31, 0x07	; 7
     eda:	0c 94 a0 33 	jmp	0x6740	; 0x6740 <__prologue_saves__>
     ede:	a8 e0       	ldi	r26, 0x08	; 8
     ee0:	4e 01       	movw	r8, r28
     ee2:	08 94       	sec
     ee4:	81 1c       	adc	r8, r1
     ee6:	91 1c       	adc	r9, r1
     ee8:	f4 01       	movw	r30, r8
     eea:	6a 2e       	mov	r6, r26
     eec:	11 92       	st	Z+, r1
     eee:	6a 94       	dec	r6
     ef0:	e9 f7       	brne	.-6      	; 0xeec <__umoddi3+0x1a>
     ef2:	29 83       	std	Y+1, r18	; 0x01
     ef4:	3a 83       	std	Y+2, r19	; 0x02
     ef6:	4b 83       	std	Y+3, r20	; 0x03
     ef8:	5c 83       	std	Y+4, r21	; 0x04
     efa:	6d 83       	std	Y+5, r22	; 0x05
     efc:	7e 83       	std	Y+6, r23	; 0x06
     efe:	8f 83       	std	Y+7, r24	; 0x07
     f00:	98 87       	std	Y+8, r25	; 0x08
     f02:	ce 01       	movw	r24, r28
     f04:	09 96       	adiw	r24, 0x09	; 9
     f06:	fc 01       	movw	r30, r24
     f08:	11 92       	st	Z+, r1
     f0a:	aa 95       	dec	r26
     f0c:	e9 f7       	brne	.-6      	; 0xf08 <__umoddi3+0x36>
     f0e:	a9 86       	std	Y+9, r10	; 0x09
     f10:	ba 86       	std	Y+10, r11	; 0x0a
     f12:	cb 86       	std	Y+11, r12	; 0x0b
     f14:	dc 86       	std	Y+12, r13	; 0x0c
     f16:	ed 86       	std	Y+13, r14	; 0x0d
     f18:	fe 86       	std	Y+14, r15	; 0x0e
     f1a:	0f 87       	std	Y+15, r16	; 0x0f
     f1c:	18 8b       	std	Y+16, r17	; 0x10
     f1e:	29 84       	ldd	r2, Y+9	; 0x09
     f20:	3a 84       	ldd	r3, Y+10	; 0x0a
     f22:	4b 84       	ldd	r4, Y+11	; 0x0b
     f24:	5c 84       	ldd	r5, Y+12	; 0x0c
     f26:	ad 84       	ldd	r10, Y+13	; 0x0d
     f28:	be 84       	ldd	r11, Y+14	; 0x0e
     f2a:	cf 84       	ldd	r12, Y+15	; 0x0f
     f2c:	d8 88       	ldd	r13, Y+16	; 0x10
     f2e:	29 81       	ldd	r18, Y+1	; 0x01
     f30:	3a 81       	ldd	r19, Y+2	; 0x02
     f32:	4b 81       	ldd	r20, Y+3	; 0x03
     f34:	5c 81       	ldd	r21, Y+4	; 0x04
     f36:	69 96       	adiw	r28, 0x19	; 25
     f38:	2f af       	std	Y+63, r18	; 0x3f
     f3a:	69 97       	sbiw	r28, 0x19	; 25
     f3c:	6a 96       	adiw	r28, 0x1a	; 26
     f3e:	3f af       	std	Y+63, r19	; 0x3f
     f40:	6a 97       	sbiw	r28, 0x1a	; 26
     f42:	6b 96       	adiw	r28, 0x1b	; 27
     f44:	4f af       	std	Y+63, r20	; 0x3f
     f46:	6b 97       	sbiw	r28, 0x1b	; 27
     f48:	6c 96       	adiw	r28, 0x1c	; 28
     f4a:	5f af       	std	Y+63, r21	; 0x3f
     f4c:	6c 97       	sbiw	r28, 0x1c	; 28
     f4e:	6c 96       	adiw	r28, 0x1c	; 28
     f50:	6c ac       	ldd	r6, Y+60	; 0x3c
     f52:	7d ac       	ldd	r7, Y+61	; 0x3d
     f54:	8e ac       	ldd	r8, Y+62	; 0x3e
     f56:	9f ac       	ldd	r9, Y+63	; 0x3f
     f58:	6c 97       	sbiw	r28, 0x1c	; 28
     f5a:	69 aa       	std	Y+49, r6	; 0x31
     f5c:	7a aa       	std	Y+50, r7	; 0x32
     f5e:	8b aa       	std	Y+51, r8	; 0x33
     f60:	9c aa       	std	Y+52, r9	; 0x34
     f62:	6d 81       	ldd	r22, Y+5	; 0x05
     f64:	7e 81       	ldd	r23, Y+6	; 0x06
     f66:	8f 81       	ldd	r24, Y+7	; 0x07
     f68:	98 85       	ldd	r25, Y+8	; 0x08
     f6a:	3b 01       	movw	r6, r22
     f6c:	4c 01       	movw	r8, r24
     f6e:	6d aa       	std	Y+53, r6	; 0x35
     f70:	7e aa       	std	Y+54, r7	; 0x36
     f72:	8f aa       	std	Y+55, r8	; 0x37
     f74:	98 ae       	std	Y+56, r9	; 0x38
     f76:	a1 14       	cp	r10, r1
     f78:	b1 04       	cpc	r11, r1
     f7a:	c1 04       	cpc	r12, r1
     f7c:	d1 04       	cpc	r13, r1
     f7e:	09 f0       	breq	.+2      	; 0xf82 <__umoddi3+0xb0>
     f80:	04 c3       	rjmp	.+1544   	; 0x158a <__umoddi3+0x6b8>
     f82:	62 14       	cp	r6, r2
     f84:	73 04       	cpc	r7, r3
     f86:	84 04       	cpc	r8, r4
     f88:	95 04       	cpc	r9, r5
     f8a:	08 f0       	brcs	.+2      	; 0xf8e <__umoddi3+0xbc>
     f8c:	00 c1       	rjmp	.+512    	; 0x118e <__umoddi3+0x2bc>
     f8e:	00 e0       	ldi	r16, 0x00	; 0
     f90:	20 16       	cp	r2, r16
     f92:	00 e0       	ldi	r16, 0x00	; 0
     f94:	30 06       	cpc	r3, r16
     f96:	01 e0       	ldi	r16, 0x01	; 1
     f98:	40 06       	cpc	r4, r16
     f9a:	00 e0       	ldi	r16, 0x00	; 0
     f9c:	50 06       	cpc	r5, r16
     f9e:	88 f4       	brcc	.+34     	; 0xfc2 <__umoddi3+0xf0>
     fa0:	1f ef       	ldi	r17, 0xFF	; 255
     fa2:	21 16       	cp	r2, r17
     fa4:	31 04       	cpc	r3, r1
     fa6:	41 04       	cpc	r4, r1
     fa8:	51 04       	cpc	r5, r1
     faa:	39 f0       	breq	.+14     	; 0xfba <__umoddi3+0xe8>
     fac:	30 f0       	brcs	.+12     	; 0xfba <__umoddi3+0xe8>
     fae:	88 e0       	ldi	r24, 0x08	; 8
     fb0:	e8 2e       	mov	r14, r24
     fb2:	f1 2c       	mov	r15, r1
     fb4:	01 2d       	mov	r16, r1
     fb6:	11 2d       	mov	r17, r1
     fb8:	18 c0       	rjmp	.+48     	; 0xfea <__umoddi3+0x118>
     fba:	ee 24       	eor	r14, r14
     fbc:	ff 24       	eor	r15, r15
     fbe:	87 01       	movw	r16, r14
     fc0:	14 c0       	rjmp	.+40     	; 0xfea <__umoddi3+0x118>
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	24 16       	cp	r2, r20
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	34 06       	cpc	r3, r20
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	44 06       	cpc	r4, r20
     fce:	41 e0       	ldi	r20, 0x01	; 1
     fd0:	54 06       	cpc	r5, r20
     fd2:	30 f0       	brcs	.+12     	; 0xfe0 <__umoddi3+0x10e>
     fd4:	b8 e1       	ldi	r27, 0x18	; 24
     fd6:	eb 2e       	mov	r14, r27
     fd8:	f1 2c       	mov	r15, r1
     fda:	01 2d       	mov	r16, r1
     fdc:	11 2d       	mov	r17, r1
     fde:	05 c0       	rjmp	.+10     	; 0xfea <__umoddi3+0x118>
     fe0:	a0 e1       	ldi	r26, 0x10	; 16
     fe2:	ea 2e       	mov	r14, r26
     fe4:	f1 2c       	mov	r15, r1
     fe6:	01 2d       	mov	r16, r1
     fe8:	11 2d       	mov	r17, r1
     fea:	d2 01       	movw	r26, r4
     fec:	c1 01       	movw	r24, r2
     fee:	0e 2c       	mov	r0, r14
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <__umoddi3+0x128>
     ff2:	b6 95       	lsr	r27
     ff4:	a7 95       	ror	r26
     ff6:	97 95       	ror	r25
     ff8:	87 95       	ror	r24
     ffa:	0a 94       	dec	r0
     ffc:	d2 f7       	brpl	.-12     	; 0xff2 <__umoddi3+0x120>
     ffe:	8b 58       	subi	r24, 0x8B	; 139
    1000:	9e 4f       	sbci	r25, 0xFE	; 254
    1002:	dc 01       	movw	r26, r24
    1004:	2c 91       	ld	r18, X
    1006:	80 e2       	ldi	r24, 0x20	; 32
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	a0 e0       	ldi	r26, 0x00	; 0
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	8e 19       	sub	r24, r14
    1010:	9f 09       	sbc	r25, r15
    1012:	a0 0b       	sbc	r26, r16
    1014:	b1 0b       	sbc	r27, r17
    1016:	5c 01       	movw	r10, r24
    1018:	6d 01       	movw	r12, r26
    101a:	a2 1a       	sub	r10, r18
    101c:	b1 08       	sbc	r11, r1
    101e:	c1 08       	sbc	r12, r1
    1020:	d1 08       	sbc	r13, r1
    1022:	a9 ae       	std	Y+57, r10	; 0x39
    1024:	ba ae       	std	Y+58, r11	; 0x3a
    1026:	cb ae       	std	Y+59, r12	; 0x3b
    1028:	dc ae       	std	Y+60, r13	; 0x3c
    102a:	a1 14       	cp	r10, r1
    102c:	b1 04       	cpc	r11, r1
    102e:	c1 04       	cpc	r12, r1
    1030:	d1 04       	cpc	r13, r1
    1032:	09 f4       	brne	.+2      	; 0x1036 <__umoddi3+0x164>
    1034:	3f c0       	rjmp	.+126    	; 0x10b4 <__umoddi3+0x1e2>
    1036:	69 ad       	ldd	r22, Y+57	; 0x39
    1038:	06 2e       	mov	r0, r22
    103a:	04 c0       	rjmp	.+8      	; 0x1044 <__umoddi3+0x172>
    103c:	22 0c       	add	r2, r2
    103e:	33 1c       	adc	r3, r3
    1040:	44 1c       	adc	r4, r4
    1042:	55 1c       	adc	r5, r5
    1044:	0a 94       	dec	r0
    1046:	d2 f7       	brpl	.-12     	; 0x103c <__umoddi3+0x16a>
    1048:	a4 01       	movw	r20, r8
    104a:	93 01       	movw	r18, r6
    104c:	06 2e       	mov	r0, r22
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <__umoddi3+0x186>
    1050:	22 0f       	add	r18, r18
    1052:	33 1f       	adc	r19, r19
    1054:	44 1f       	adc	r20, r20
    1056:	55 1f       	adc	r21, r21
    1058:	0a 94       	dec	r0
    105a:	d2 f7       	brpl	.-12     	; 0x1050 <__umoddi3+0x17e>
    105c:	80 e2       	ldi	r24, 0x20	; 32
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	8a 19       	sub	r24, r10
    1062:	9b 09       	sbc	r25, r11
    1064:	6c 96       	adiw	r28, 0x1c	; 28
    1066:	cc ac       	ldd	r12, Y+60	; 0x3c
    1068:	dd ac       	ldd	r13, Y+61	; 0x3d
    106a:	ee ac       	ldd	r14, Y+62	; 0x3e
    106c:	ff ac       	ldd	r15, Y+63	; 0x3f
    106e:	6c 97       	sbiw	r28, 0x1c	; 28
    1070:	04 c0       	rjmp	.+8      	; 0x107a <__umoddi3+0x1a8>
    1072:	f6 94       	lsr	r15
    1074:	e7 94       	ror	r14
    1076:	d7 94       	ror	r13
    1078:	c7 94       	ror	r12
    107a:	8a 95       	dec	r24
    107c:	d2 f7       	brpl	.-12     	; 0x1072 <__umoddi3+0x1a0>
    107e:	87 01       	movw	r16, r14
    1080:	76 01       	movw	r14, r12
    1082:	e2 2a       	or	r14, r18
    1084:	f3 2a       	or	r15, r19
    1086:	04 2b       	or	r16, r20
    1088:	15 2b       	or	r17, r21
    108a:	ed aa       	std	Y+53, r14	; 0x35
    108c:	fe aa       	std	Y+54, r15	; 0x36
    108e:	0f ab       	std	Y+55, r16	; 0x37
    1090:	18 af       	std	Y+56, r17	; 0x38
    1092:	6c 96       	adiw	r28, 0x1c	; 28
    1094:	8c ad       	ldd	r24, Y+60	; 0x3c
    1096:	9d ad       	ldd	r25, Y+61	; 0x3d
    1098:	ae ad       	ldd	r26, Y+62	; 0x3e
    109a:	bf ad       	ldd	r27, Y+63	; 0x3f
    109c:	6c 97       	sbiw	r28, 0x1c	; 28
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <__umoddi3+0x1d6>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	aa 1f       	adc	r26, r26
    10a6:	bb 1f       	adc	r27, r27
    10a8:	6a 95       	dec	r22
    10aa:	d2 f7       	brpl	.-12     	; 0x10a0 <__umoddi3+0x1ce>
    10ac:	89 ab       	std	Y+49, r24	; 0x31
    10ae:	9a ab       	std	Y+50, r25	; 0x32
    10b0:	ab ab       	std	Y+51, r26	; 0x33
    10b2:	bc ab       	std	Y+52, r27	; 0x34
    10b4:	32 01       	movw	r6, r4
    10b6:	88 24       	eor	r8, r8
    10b8:	99 24       	eor	r9, r9
    10ba:	b2 01       	movw	r22, r4
    10bc:	a1 01       	movw	r20, r2
    10be:	60 70       	andi	r22, 0x00	; 0
    10c0:	70 70       	andi	r23, 0x00	; 0
    10c2:	21 96       	adiw	r28, 0x01	; 1
    10c4:	4c af       	std	Y+60, r20	; 0x3c
    10c6:	5d af       	std	Y+61, r21	; 0x3d
    10c8:	6e af       	std	Y+62, r22	; 0x3e
    10ca:	7f af       	std	Y+63, r23	; 0x3f
    10cc:	21 97       	sbiw	r28, 0x01	; 1
    10ce:	6d a9       	ldd	r22, Y+53	; 0x35
    10d0:	7e a9       	ldd	r23, Y+54	; 0x36
    10d2:	8f a9       	ldd	r24, Y+55	; 0x37
    10d4:	98 ad       	ldd	r25, Y+56	; 0x38
    10d6:	a4 01       	movw	r20, r8
    10d8:	93 01       	movw	r18, r6
    10da:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
    10de:	7b 01       	movw	r14, r22
    10e0:	8c 01       	movw	r16, r24
    10e2:	6d a9       	ldd	r22, Y+53	; 0x35
    10e4:	7e a9       	ldd	r23, Y+54	; 0x36
    10e6:	8f a9       	ldd	r24, Y+55	; 0x37
    10e8:	98 ad       	ldd	r25, Y+56	; 0x38
    10ea:	a4 01       	movw	r20, r8
    10ec:	93 01       	movw	r18, r6
    10ee:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
    10f2:	ca 01       	movw	r24, r20
    10f4:	b9 01       	movw	r22, r18
    10f6:	21 96       	adiw	r28, 0x01	; 1
    10f8:	2c ad       	ldd	r18, Y+60	; 0x3c
    10fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    10fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    10fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    1100:	21 97       	sbiw	r28, 0x01	; 1
    1102:	0e 94 81 33 	call	0x6702	; 0x6702 <__mulsi3>
    1106:	9b 01       	movw	r18, r22
    1108:	ac 01       	movw	r20, r24
    110a:	87 01       	movw	r16, r14
    110c:	ff 24       	eor	r15, r15
    110e:	ee 24       	eor	r14, r14
    1110:	a9 a8       	ldd	r10, Y+49	; 0x31
    1112:	ba a8       	ldd	r11, Y+50	; 0x32
    1114:	cb a8       	ldd	r12, Y+51	; 0x33
    1116:	dc a8       	ldd	r13, Y+52	; 0x34
    1118:	c6 01       	movw	r24, r12
    111a:	aa 27       	eor	r26, r26
    111c:	bb 27       	eor	r27, r27
    111e:	57 01       	movw	r10, r14
    1120:	68 01       	movw	r12, r16
    1122:	a8 2a       	or	r10, r24
    1124:	b9 2a       	or	r11, r25
    1126:	ca 2a       	or	r12, r26
    1128:	db 2a       	or	r13, r27
    112a:	a2 16       	cp	r10, r18
    112c:	b3 06       	cpc	r11, r19
    112e:	c4 06       	cpc	r12, r20
    1130:	d5 06       	cpc	r13, r21
    1132:	90 f4       	brcc	.+36     	; 0x1158 <__umoddi3+0x286>
    1134:	a2 0c       	add	r10, r2
    1136:	b3 1c       	adc	r11, r3
    1138:	c4 1c       	adc	r12, r4
    113a:	d5 1c       	adc	r13, r5
    113c:	a2 14       	cp	r10, r2
    113e:	b3 04       	cpc	r11, r3
    1140:	c4 04       	cpc	r12, r4
    1142:	d5 04       	cpc	r13, r5
    1144:	48 f0       	brcs	.+18     	; 0x1158 <__umoddi3+0x286>
    1146:	a2 16       	cp	r10, r18
    1148:	b3 06       	cpc	r11, r19
    114a:	c4 06       	cpc	r12, r20
    114c:	d5 06       	cpc	r13, r21
    114e:	20 f4       	brcc	.+8      	; 0x1158 <__umoddi3+0x286>
    1150:	a2 0c       	add	r10, r2
    1152:	b3 1c       	adc	r11, r3
    1154:	c4 1c       	adc	r12, r4
    1156:	d5 1c       	adc	r13, r5
    1158:	a2 1a       	sub	r10, r18
    115a:	b3 0a       	sbc	r11, r19
    115c:	c4 0a       	sbc	r12, r20
    115e:	d5 0a       	sbc	r13, r21
    1160:	c6 01       	movw	r24, r12
    1162:	b5 01       	movw	r22, r10
    1164:	a4 01       	movw	r20, r8
    1166:	93 01       	movw	r18, r6
    1168:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
    116c:	7b 01       	movw	r14, r22
    116e:	8c 01       	movw	r16, r24
    1170:	c6 01       	movw	r24, r12
    1172:	b5 01       	movw	r22, r10
    1174:	a4 01       	movw	r20, r8
    1176:	93 01       	movw	r18, r6
    1178:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
    117c:	ca 01       	movw	r24, r20
    117e:	b9 01       	movw	r22, r18
    1180:	21 96       	adiw	r28, 0x01	; 1
    1182:	2c ad       	ldd	r18, Y+60	; 0x3c
    1184:	3d ad       	ldd	r19, Y+61	; 0x3d
    1186:	4e ad       	ldd	r20, Y+62	; 0x3e
    1188:	5f ad       	ldd	r21, Y+63	; 0x3f
    118a:	21 97       	sbiw	r28, 0x01	; 1
    118c:	ba c1       	rjmp	.+884    	; 0x1502 <__umoddi3+0x630>
    118e:	21 14       	cp	r2, r1
    1190:	31 04       	cpc	r3, r1
    1192:	41 04       	cpc	r4, r1
    1194:	51 04       	cpc	r5, r1
    1196:	71 f4       	brne	.+28     	; 0x11b4 <__umoddi3+0x2e2>
    1198:	61 e0       	ldi	r22, 0x01	; 1
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	40 e0       	ldi	r20, 0x00	; 0
    11a6:	50 e0       	ldi	r21, 0x00	; 0
    11a8:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
    11ac:	c9 01       	movw	r24, r18
    11ae:	da 01       	movw	r26, r20
    11b0:	1c 01       	movw	r2, r24
    11b2:	2d 01       	movw	r4, r26
    11b4:	00 e0       	ldi	r16, 0x00	; 0
    11b6:	20 16       	cp	r2, r16
    11b8:	00 e0       	ldi	r16, 0x00	; 0
    11ba:	30 06       	cpc	r3, r16
    11bc:	01 e0       	ldi	r16, 0x01	; 1
    11be:	40 06       	cpc	r4, r16
    11c0:	00 e0       	ldi	r16, 0x00	; 0
    11c2:	50 06       	cpc	r5, r16
    11c4:	88 f4       	brcc	.+34     	; 0x11e8 <__umoddi3+0x316>
    11c6:	1f ef       	ldi	r17, 0xFF	; 255
    11c8:	21 16       	cp	r2, r17
    11ca:	31 04       	cpc	r3, r1
    11cc:	41 04       	cpc	r4, r1
    11ce:	51 04       	cpc	r5, r1
    11d0:	39 f0       	breq	.+14     	; 0x11e0 <__umoddi3+0x30e>
    11d2:	30 f0       	brcs	.+12     	; 0x11e0 <__umoddi3+0x30e>
    11d4:	68 e0       	ldi	r22, 0x08	; 8
    11d6:	e6 2e       	mov	r14, r22
    11d8:	f1 2c       	mov	r15, r1
    11da:	01 2d       	mov	r16, r1
    11dc:	11 2d       	mov	r17, r1
    11de:	18 c0       	rjmp	.+48     	; 0x1210 <__umoddi3+0x33e>
    11e0:	ee 24       	eor	r14, r14
    11e2:	ff 24       	eor	r15, r15
    11e4:	87 01       	movw	r16, r14
    11e6:	14 c0       	rjmp	.+40     	; 0x1210 <__umoddi3+0x33e>
    11e8:	40 e0       	ldi	r20, 0x00	; 0
    11ea:	24 16       	cp	r2, r20
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	34 06       	cpc	r3, r20
    11f0:	40 e0       	ldi	r20, 0x00	; 0
    11f2:	44 06       	cpc	r4, r20
    11f4:	41 e0       	ldi	r20, 0x01	; 1
    11f6:	54 06       	cpc	r5, r20
    11f8:	30 f0       	brcs	.+12     	; 0x1206 <__umoddi3+0x334>
    11fa:	58 e1       	ldi	r21, 0x18	; 24
    11fc:	e5 2e       	mov	r14, r21
    11fe:	f1 2c       	mov	r15, r1
    1200:	01 2d       	mov	r16, r1
    1202:	11 2d       	mov	r17, r1
    1204:	05 c0       	rjmp	.+10     	; 0x1210 <__umoddi3+0x33e>
    1206:	40 e1       	ldi	r20, 0x10	; 16
    1208:	e4 2e       	mov	r14, r20
    120a:	f1 2c       	mov	r15, r1
    120c:	01 2d       	mov	r16, r1
    120e:	11 2d       	mov	r17, r1
    1210:	d2 01       	movw	r26, r4
    1212:	c1 01       	movw	r24, r2
    1214:	0e 2c       	mov	r0, r14
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <__umoddi3+0x34e>
    1218:	b6 95       	lsr	r27
    121a:	a7 95       	ror	r26
    121c:	97 95       	ror	r25
    121e:	87 95       	ror	r24
    1220:	0a 94       	dec	r0
    1222:	d2 f7       	brpl	.-12     	; 0x1218 <__umoddi3+0x346>
    1224:	8b 58       	subi	r24, 0x8B	; 139
    1226:	9e 4f       	sbci	r25, 0xFE	; 254
    1228:	dc 01       	movw	r26, r24
    122a:	2c 91       	ld	r18, X
    122c:	30 e2       	ldi	r19, 0x20	; 32
    122e:	a3 2e       	mov	r10, r19
    1230:	b1 2c       	mov	r11, r1
    1232:	c1 2c       	mov	r12, r1
    1234:	d1 2c       	mov	r13, r1
    1236:	d6 01       	movw	r26, r12
    1238:	c5 01       	movw	r24, r10
    123a:	8e 19       	sub	r24, r14
    123c:	9f 09       	sbc	r25, r15
    123e:	a0 0b       	sbc	r26, r16
    1240:	b1 0b       	sbc	r27, r17
    1242:	7c 01       	movw	r14, r24
    1244:	8d 01       	movw	r16, r26
    1246:	e2 1a       	sub	r14, r18
    1248:	f1 08       	sbc	r15, r1
    124a:	01 09       	sbc	r16, r1
    124c:	11 09       	sbc	r17, r1
    124e:	e9 ae       	std	Y+57, r14	; 0x39
    1250:	fa ae       	std	Y+58, r15	; 0x3a
    1252:	0b af       	std	Y+59, r16	; 0x3b
    1254:	1c af       	std	Y+60, r17	; 0x3c
    1256:	e1 14       	cp	r14, r1
    1258:	f1 04       	cpc	r15, r1
    125a:	01 05       	cpc	r16, r1
    125c:	11 05       	cpc	r17, r1
    125e:	39 f4       	brne	.+14     	; 0x126e <__umoddi3+0x39c>
    1260:	64 01       	movw	r12, r8
    1262:	53 01       	movw	r10, r6
    1264:	a2 18       	sub	r10, r2
    1266:	b3 08       	sbc	r11, r3
    1268:	c4 08       	sbc	r12, r4
    126a:	d5 08       	sbc	r13, r5
    126c:	e2 c0       	rjmp	.+452    	; 0x1432 <__umoddi3+0x560>
    126e:	f9 ac       	ldd	r15, Y+57	; 0x39
    1270:	68 96       	adiw	r28, 0x18	; 24
    1272:	ff ae       	std	Y+63, r15	; 0x3f
    1274:	68 97       	sbiw	r28, 0x18	; 24
    1276:	0f 2c       	mov	r0, r15
    1278:	04 c0       	rjmp	.+8      	; 0x1282 <__umoddi3+0x3b0>
    127a:	22 0c       	add	r2, r2
    127c:	33 1c       	adc	r3, r3
    127e:	44 1c       	adc	r4, r4
    1280:	55 1c       	adc	r5, r5
    1282:	0a 94       	dec	r0
    1284:	d2 f7       	brpl	.-12     	; 0x127a <__umoddi3+0x3a8>
    1286:	8a 2d       	mov	r24, r10
    1288:	8f 19       	sub	r24, r15
    128a:	64 01       	movw	r12, r8
    128c:	53 01       	movw	r10, r6
    128e:	08 2e       	mov	r0, r24
    1290:	04 c0       	rjmp	.+8      	; 0x129a <__umoddi3+0x3c8>
    1292:	d6 94       	lsr	r13
    1294:	c7 94       	ror	r12
    1296:	b7 94       	ror	r11
    1298:	a7 94       	ror	r10
    129a:	0a 94       	dec	r0
    129c:	d2 f7       	brpl	.-12     	; 0x1292 <__umoddi3+0x3c0>
    129e:	a4 01       	movw	r20, r8
    12a0:	93 01       	movw	r18, r6
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <__umoddi3+0x3da>
    12a4:	22 0f       	add	r18, r18
    12a6:	33 1f       	adc	r19, r19
    12a8:	44 1f       	adc	r20, r20
    12aa:	55 1f       	adc	r21, r21
    12ac:	fa 94       	dec	r15
    12ae:	d2 f7       	brpl	.-12     	; 0x12a4 <__umoddi3+0x3d2>
    12b0:	6c 96       	adiw	r28, 0x1c	; 28
    12b2:	6c ac       	ldd	r6, Y+60	; 0x3c
    12b4:	7d ac       	ldd	r7, Y+61	; 0x3d
    12b6:	8e ac       	ldd	r8, Y+62	; 0x3e
    12b8:	9f ac       	ldd	r9, Y+63	; 0x3f
    12ba:	6c 97       	sbiw	r28, 0x1c	; 28
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <__umoddi3+0x3f4>
    12be:	96 94       	lsr	r9
    12c0:	87 94       	ror	r8
    12c2:	77 94       	ror	r7
    12c4:	67 94       	ror	r6
    12c6:	8a 95       	dec	r24
    12c8:	d2 f7       	brpl	.-12     	; 0x12be <__umoddi3+0x3ec>
    12ca:	84 01       	movw	r16, r8
    12cc:	73 01       	movw	r14, r6
    12ce:	e2 2a       	or	r14, r18
    12d0:	f3 2a       	or	r15, r19
    12d2:	04 2b       	or	r16, r20
    12d4:	15 2b       	or	r17, r21
    12d6:	ed a6       	std	Y+45, r14	; 0x2d
    12d8:	fe a6       	std	Y+46, r15	; 0x2e
    12da:	0f a7       	std	Y+47, r16	; 0x2f
    12dc:	18 ab       	std	Y+48, r17	; 0x30
    12de:	32 01       	movw	r6, r4
    12e0:	88 24       	eor	r8, r8
    12e2:	99 24       	eor	r9, r9
    12e4:	b2 01       	movw	r22, r4
    12e6:	a1 01       	movw	r20, r2
    12e8:	60 70       	andi	r22, 0x00	; 0
    12ea:	70 70       	andi	r23, 0x00	; 0
    12ec:	25 96       	adiw	r28, 0x05	; 5
    12ee:	4c af       	std	Y+60, r20	; 0x3c
    12f0:	5d af       	std	Y+61, r21	; 0x3d
    12f2:	6e af       	std	Y+62, r22	; 0x3e
    12f4:	7f af       	std	Y+63, r23	; 0x3f
    12f6:	25 97       	sbiw	r28, 0x05	; 5
    12f8:	c6 01       	movw	r24, r12
    12fa:	b5 01       	movw	r22, r10
    12fc:	a4 01       	movw	r20, r8
    12fe:	93 01       	movw	r18, r6
    1300:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
    1304:	7b 01       	movw	r14, r22
    1306:	8c 01       	movw	r16, r24
    1308:	c6 01       	movw	r24, r12
    130a:	b5 01       	movw	r22, r10
    130c:	a4 01       	movw	r20, r8
    130e:	93 01       	movw	r18, r6
    1310:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
    1314:	ca 01       	movw	r24, r20
    1316:	b9 01       	movw	r22, r18
    1318:	25 96       	adiw	r28, 0x05	; 5
    131a:	2c ad       	ldd	r18, Y+60	; 0x3c
    131c:	3d ad       	ldd	r19, Y+61	; 0x3d
    131e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1320:	5f ad       	ldd	r21, Y+63	; 0x3f
    1322:	25 97       	sbiw	r28, 0x05	; 5
    1324:	0e 94 81 33 	call	0x6702	; 0x6702 <__mulsi3>
    1328:	9b 01       	movw	r18, r22
    132a:	ac 01       	movw	r20, r24
    132c:	87 01       	movw	r16, r14
    132e:	ff 24       	eor	r15, r15
    1330:	ee 24       	eor	r14, r14
    1332:	ad a4       	ldd	r10, Y+45	; 0x2d
    1334:	be a4       	ldd	r11, Y+46	; 0x2e
    1336:	cf a4       	ldd	r12, Y+47	; 0x2f
    1338:	d8 a8       	ldd	r13, Y+48	; 0x30
    133a:	c6 01       	movw	r24, r12
    133c:	aa 27       	eor	r26, r26
    133e:	bb 27       	eor	r27, r27
    1340:	5c 01       	movw	r10, r24
    1342:	6d 01       	movw	r12, r26
    1344:	ae 28       	or	r10, r14
    1346:	bf 28       	or	r11, r15
    1348:	c0 2a       	or	r12, r16
    134a:	d1 2a       	or	r13, r17
    134c:	a2 16       	cp	r10, r18
    134e:	b3 06       	cpc	r11, r19
    1350:	c4 06       	cpc	r12, r20
    1352:	d5 06       	cpc	r13, r21
    1354:	90 f4       	brcc	.+36     	; 0x137a <__umoddi3+0x4a8>
    1356:	a2 0c       	add	r10, r2
    1358:	b3 1c       	adc	r11, r3
    135a:	c4 1c       	adc	r12, r4
    135c:	d5 1c       	adc	r13, r5
    135e:	a2 14       	cp	r10, r2
    1360:	b3 04       	cpc	r11, r3
    1362:	c4 04       	cpc	r12, r4
    1364:	d5 04       	cpc	r13, r5
    1366:	48 f0       	brcs	.+18     	; 0x137a <__umoddi3+0x4a8>
    1368:	a2 16       	cp	r10, r18
    136a:	b3 06       	cpc	r11, r19
    136c:	c4 06       	cpc	r12, r20
    136e:	d5 06       	cpc	r13, r21
    1370:	20 f4       	brcc	.+8      	; 0x137a <__umoddi3+0x4a8>
    1372:	a2 0c       	add	r10, r2
    1374:	b3 1c       	adc	r11, r3
    1376:	c4 1c       	adc	r12, r4
    1378:	d5 1c       	adc	r13, r5
    137a:	a2 1a       	sub	r10, r18
    137c:	b3 0a       	sbc	r11, r19
    137e:	c4 0a       	sbc	r12, r20
    1380:	d5 0a       	sbc	r13, r21
    1382:	c6 01       	movw	r24, r12
    1384:	b5 01       	movw	r22, r10
    1386:	a4 01       	movw	r20, r8
    1388:	93 01       	movw	r18, r6
    138a:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
    138e:	7b 01       	movw	r14, r22
    1390:	8c 01       	movw	r16, r24
    1392:	c6 01       	movw	r24, r12
    1394:	b5 01       	movw	r22, r10
    1396:	a4 01       	movw	r20, r8
    1398:	93 01       	movw	r18, r6
    139a:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
    139e:	ca 01       	movw	r24, r20
    13a0:	b9 01       	movw	r22, r18
    13a2:	25 96       	adiw	r28, 0x05	; 5
    13a4:	2c ad       	ldd	r18, Y+60	; 0x3c
    13a6:	3d ad       	ldd	r19, Y+61	; 0x3d
    13a8:	4e ad       	ldd	r20, Y+62	; 0x3e
    13aa:	5f ad       	ldd	r21, Y+63	; 0x3f
    13ac:	25 97       	sbiw	r28, 0x05	; 5
    13ae:	0e 94 81 33 	call	0x6702	; 0x6702 <__mulsi3>
    13b2:	9b 01       	movw	r18, r22
    13b4:	ac 01       	movw	r20, r24
    13b6:	87 01       	movw	r16, r14
    13b8:	ff 24       	eor	r15, r15
    13ba:	ee 24       	eor	r14, r14
    13bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    13be:	9e a5       	ldd	r25, Y+46	; 0x2e
    13c0:	af a5       	ldd	r26, Y+47	; 0x2f
    13c2:	b8 a9       	ldd	r27, Y+48	; 0x30
    13c4:	a0 70       	andi	r26, 0x00	; 0
    13c6:	b0 70       	andi	r27, 0x00	; 0
    13c8:	57 01       	movw	r10, r14
    13ca:	68 01       	movw	r12, r16
    13cc:	a8 2a       	or	r10, r24
    13ce:	b9 2a       	or	r11, r25
    13d0:	ca 2a       	or	r12, r26
    13d2:	db 2a       	or	r13, r27
    13d4:	a2 16       	cp	r10, r18
    13d6:	b3 06       	cpc	r11, r19
    13d8:	c4 06       	cpc	r12, r20
    13da:	d5 06       	cpc	r13, r21
    13dc:	90 f4       	brcc	.+36     	; 0x1402 <__umoddi3+0x530>
    13de:	a2 0c       	add	r10, r2
    13e0:	b3 1c       	adc	r11, r3
    13e2:	c4 1c       	adc	r12, r4
    13e4:	d5 1c       	adc	r13, r5
    13e6:	a2 14       	cp	r10, r2
    13e8:	b3 04       	cpc	r11, r3
    13ea:	c4 04       	cpc	r12, r4
    13ec:	d5 04       	cpc	r13, r5
    13ee:	48 f0       	brcs	.+18     	; 0x1402 <__umoddi3+0x530>
    13f0:	a2 16       	cp	r10, r18
    13f2:	b3 06       	cpc	r11, r19
    13f4:	c4 06       	cpc	r12, r20
    13f6:	d5 06       	cpc	r13, r21
    13f8:	20 f4       	brcc	.+8      	; 0x1402 <__umoddi3+0x530>
    13fa:	a2 0c       	add	r10, r2
    13fc:	b3 1c       	adc	r11, r3
    13fe:	c4 1c       	adc	r12, r4
    1400:	d5 1c       	adc	r13, r5
    1402:	6c 96       	adiw	r28, 0x1c	; 28
    1404:	ec ac       	ldd	r14, Y+60	; 0x3c
    1406:	fd ac       	ldd	r15, Y+61	; 0x3d
    1408:	0e ad       	ldd	r16, Y+62	; 0x3e
    140a:	1f ad       	ldd	r17, Y+63	; 0x3f
    140c:	6c 97       	sbiw	r28, 0x1c	; 28
    140e:	68 96       	adiw	r28, 0x18	; 24
    1410:	0f ac       	ldd	r0, Y+63	; 0x3f
    1412:	68 97       	sbiw	r28, 0x18	; 24
    1414:	04 c0       	rjmp	.+8      	; 0x141e <__umoddi3+0x54c>
    1416:	ee 0c       	add	r14, r14
    1418:	ff 1c       	adc	r15, r15
    141a:	00 1f       	adc	r16, r16
    141c:	11 1f       	adc	r17, r17
    141e:	0a 94       	dec	r0
    1420:	d2 f7       	brpl	.-12     	; 0x1416 <__umoddi3+0x544>
    1422:	e9 aa       	std	Y+49, r14	; 0x31
    1424:	fa aa       	std	Y+50, r15	; 0x32
    1426:	0b ab       	std	Y+51, r16	; 0x33
    1428:	1c ab       	std	Y+52, r17	; 0x34
    142a:	a2 1a       	sub	r10, r18
    142c:	b3 0a       	sbc	r11, r19
    142e:	c4 0a       	sbc	r12, r20
    1430:	d5 0a       	sbc	r13, r21
    1432:	32 01       	movw	r6, r4
    1434:	88 24       	eor	r8, r8
    1436:	99 24       	eor	r9, r9
    1438:	b2 01       	movw	r22, r4
    143a:	a1 01       	movw	r20, r2
    143c:	60 70       	andi	r22, 0x00	; 0
    143e:	70 70       	andi	r23, 0x00	; 0
    1440:	29 96       	adiw	r28, 0x09	; 9
    1442:	4c af       	std	Y+60, r20	; 0x3c
    1444:	5d af       	std	Y+61, r21	; 0x3d
    1446:	6e af       	std	Y+62, r22	; 0x3e
    1448:	7f af       	std	Y+63, r23	; 0x3f
    144a:	29 97       	sbiw	r28, 0x09	; 9
    144c:	c6 01       	movw	r24, r12
    144e:	b5 01       	movw	r22, r10
    1450:	a4 01       	movw	r20, r8
    1452:	93 01       	movw	r18, r6
    1454:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
    1458:	7b 01       	movw	r14, r22
    145a:	8c 01       	movw	r16, r24
    145c:	c6 01       	movw	r24, r12
    145e:	b5 01       	movw	r22, r10
    1460:	a4 01       	movw	r20, r8
    1462:	93 01       	movw	r18, r6
    1464:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
    1468:	ca 01       	movw	r24, r20
    146a:	b9 01       	movw	r22, r18
    146c:	29 96       	adiw	r28, 0x09	; 9
    146e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1470:	3d ad       	ldd	r19, Y+61	; 0x3d
    1472:	4e ad       	ldd	r20, Y+62	; 0x3e
    1474:	5f ad       	ldd	r21, Y+63	; 0x3f
    1476:	29 97       	sbiw	r28, 0x09	; 9
    1478:	0e 94 81 33 	call	0x6702	; 0x6702 <__mulsi3>
    147c:	9b 01       	movw	r18, r22
    147e:	ac 01       	movw	r20, r24
    1480:	87 01       	movw	r16, r14
    1482:	ff 24       	eor	r15, r15
    1484:	ee 24       	eor	r14, r14
    1486:	a9 a8       	ldd	r10, Y+49	; 0x31
    1488:	ba a8       	ldd	r11, Y+50	; 0x32
    148a:	cb a8       	ldd	r12, Y+51	; 0x33
    148c:	dc a8       	ldd	r13, Y+52	; 0x34
    148e:	c6 01       	movw	r24, r12
    1490:	aa 27       	eor	r26, r26
    1492:	bb 27       	eor	r27, r27
    1494:	57 01       	movw	r10, r14
    1496:	68 01       	movw	r12, r16
    1498:	a8 2a       	or	r10, r24
    149a:	b9 2a       	or	r11, r25
    149c:	ca 2a       	or	r12, r26
    149e:	db 2a       	or	r13, r27
    14a0:	a2 16       	cp	r10, r18
    14a2:	b3 06       	cpc	r11, r19
    14a4:	c4 06       	cpc	r12, r20
    14a6:	d5 06       	cpc	r13, r21
    14a8:	90 f4       	brcc	.+36     	; 0x14ce <__umoddi3+0x5fc>
    14aa:	a2 0c       	add	r10, r2
    14ac:	b3 1c       	adc	r11, r3
    14ae:	c4 1c       	adc	r12, r4
    14b0:	d5 1c       	adc	r13, r5
    14b2:	a2 14       	cp	r10, r2
    14b4:	b3 04       	cpc	r11, r3
    14b6:	c4 04       	cpc	r12, r4
    14b8:	d5 04       	cpc	r13, r5
    14ba:	48 f0       	brcs	.+18     	; 0x14ce <__umoddi3+0x5fc>
    14bc:	a2 16       	cp	r10, r18
    14be:	b3 06       	cpc	r11, r19
    14c0:	c4 06       	cpc	r12, r20
    14c2:	d5 06       	cpc	r13, r21
    14c4:	20 f4       	brcc	.+8      	; 0x14ce <__umoddi3+0x5fc>
    14c6:	a2 0c       	add	r10, r2
    14c8:	b3 1c       	adc	r11, r3
    14ca:	c4 1c       	adc	r12, r4
    14cc:	d5 1c       	adc	r13, r5
    14ce:	a2 1a       	sub	r10, r18
    14d0:	b3 0a       	sbc	r11, r19
    14d2:	c4 0a       	sbc	r12, r20
    14d4:	d5 0a       	sbc	r13, r21
    14d6:	c6 01       	movw	r24, r12
    14d8:	b5 01       	movw	r22, r10
    14da:	a4 01       	movw	r20, r8
    14dc:	93 01       	movw	r18, r6
    14de:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
    14e2:	7b 01       	movw	r14, r22
    14e4:	8c 01       	movw	r16, r24
    14e6:	c6 01       	movw	r24, r12
    14e8:	b5 01       	movw	r22, r10
    14ea:	a4 01       	movw	r20, r8
    14ec:	93 01       	movw	r18, r6
    14ee:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
    14f2:	ca 01       	movw	r24, r20
    14f4:	b9 01       	movw	r22, r18
    14f6:	29 96       	adiw	r28, 0x09	; 9
    14f8:	2c ad       	ldd	r18, Y+60	; 0x3c
    14fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    14fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    14fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    1500:	29 97       	sbiw	r28, 0x09	; 9
    1502:	0e 94 81 33 	call	0x6702	; 0x6702 <__mulsi3>
    1506:	9b 01       	movw	r18, r22
    1508:	ac 01       	movw	r20, r24
    150a:	87 01       	movw	r16, r14
    150c:	ff 24       	eor	r15, r15
    150e:	ee 24       	eor	r14, r14
    1510:	89 a9       	ldd	r24, Y+49	; 0x31
    1512:	9a a9       	ldd	r25, Y+50	; 0x32
    1514:	ab a9       	ldd	r26, Y+51	; 0x33
    1516:	bc a9       	ldd	r27, Y+52	; 0x34
    1518:	a0 70       	andi	r26, 0x00	; 0
    151a:	b0 70       	andi	r27, 0x00	; 0
    151c:	e8 2a       	or	r14, r24
    151e:	f9 2a       	or	r15, r25
    1520:	0a 2b       	or	r16, r26
    1522:	1b 2b       	or	r17, r27
    1524:	e2 16       	cp	r14, r18
    1526:	f3 06       	cpc	r15, r19
    1528:	04 07       	cpc	r16, r20
    152a:	15 07       	cpc	r17, r21
    152c:	90 f4       	brcc	.+36     	; 0x1552 <__umoddi3+0x680>
    152e:	e2 0c       	add	r14, r2
    1530:	f3 1c       	adc	r15, r3
    1532:	04 1d       	adc	r16, r4
    1534:	15 1d       	adc	r17, r5
    1536:	e2 14       	cp	r14, r2
    1538:	f3 04       	cpc	r15, r3
    153a:	04 05       	cpc	r16, r4
    153c:	15 05       	cpc	r17, r5
    153e:	48 f0       	brcs	.+18     	; 0x1552 <__umoddi3+0x680>
    1540:	e2 16       	cp	r14, r18
    1542:	f3 06       	cpc	r15, r19
    1544:	04 07       	cpc	r16, r20
    1546:	15 07       	cpc	r17, r21
    1548:	20 f4       	brcc	.+8      	; 0x1552 <__umoddi3+0x680>
    154a:	e2 0c       	add	r14, r2
    154c:	f3 1c       	adc	r15, r3
    154e:	04 1d       	adc	r16, r4
    1550:	15 1d       	adc	r17, r5
    1552:	e2 1a       	sub	r14, r18
    1554:	f3 0a       	sbc	r15, r19
    1556:	04 0b       	sbc	r16, r20
    1558:	15 0b       	sbc	r17, r21
    155a:	d8 01       	movw	r26, r16
    155c:	c7 01       	movw	r24, r14
    155e:	09 ac       	ldd	r0, Y+57	; 0x39
    1560:	04 c0       	rjmp	.+8      	; 0x156a <__umoddi3+0x698>
    1562:	b6 95       	lsr	r27
    1564:	a7 95       	ror	r26
    1566:	97 95       	ror	r25
    1568:	87 95       	ror	r24
    156a:	0a 94       	dec	r0
    156c:	d2 f7       	brpl	.-12     	; 0x1562 <__umoddi3+0x690>
    156e:	89 8b       	std	Y+17, r24	; 0x11
    1570:	9a 8b       	std	Y+18, r25	; 0x12
    1572:	ab 8b       	std	Y+19, r26	; 0x13
    1574:	bc 8b       	std	Y+20, r27	; 0x14
    1576:	1d 8a       	std	Y+21, r1	; 0x15
    1578:	1e 8a       	std	Y+22, r1	; 0x16
    157a:	1f 8a       	std	Y+23, r1	; 0x17
    157c:	18 8e       	std	Y+24, r1	; 0x18
    157e:	28 2f       	mov	r18, r24
    1580:	3a 89       	ldd	r19, Y+18	; 0x12
    1582:	4b 89       	ldd	r20, Y+19	; 0x13
    1584:	5c 89       	ldd	r21, Y+20	; 0x14
    1586:	6d 89       	ldd	r22, Y+21	; 0x15
    1588:	0c c3       	rjmp	.+1560   	; 0x1ba2 <__umoddi3+0xcd0>
    158a:	6a 14       	cp	r6, r10
    158c:	7b 04       	cpc	r7, r11
    158e:	8c 04       	cpc	r8, r12
    1590:	9d 04       	cpc	r9, r13
    1592:	08 f4       	brcc	.+2      	; 0x1596 <__umoddi3+0x6c4>
    1594:	09 c3       	rjmp	.+1554   	; 0x1ba8 <__umoddi3+0xcd6>
    1596:	00 e0       	ldi	r16, 0x00	; 0
    1598:	a0 16       	cp	r10, r16
    159a:	00 e0       	ldi	r16, 0x00	; 0
    159c:	b0 06       	cpc	r11, r16
    159e:	01 e0       	ldi	r16, 0x01	; 1
    15a0:	c0 06       	cpc	r12, r16
    15a2:	00 e0       	ldi	r16, 0x00	; 0
    15a4:	d0 06       	cpc	r13, r16
    15a6:	88 f4       	brcc	.+34     	; 0x15ca <__umoddi3+0x6f8>
    15a8:	1f ef       	ldi	r17, 0xFF	; 255
    15aa:	a1 16       	cp	r10, r17
    15ac:	b1 04       	cpc	r11, r1
    15ae:	c1 04       	cpc	r12, r1
    15b0:	d1 04       	cpc	r13, r1
    15b2:	39 f0       	breq	.+14     	; 0x15c2 <__umoddi3+0x6f0>
    15b4:	30 f0       	brcs	.+12     	; 0x15c2 <__umoddi3+0x6f0>
    15b6:	28 e0       	ldi	r18, 0x08	; 8
    15b8:	e2 2e       	mov	r14, r18
    15ba:	f1 2c       	mov	r15, r1
    15bc:	01 2d       	mov	r16, r1
    15be:	11 2d       	mov	r17, r1
    15c0:	18 c0       	rjmp	.+48     	; 0x15f2 <__umoddi3+0x720>
    15c2:	ee 24       	eor	r14, r14
    15c4:	ff 24       	eor	r15, r15
    15c6:	87 01       	movw	r16, r14
    15c8:	14 c0       	rjmp	.+40     	; 0x15f2 <__umoddi3+0x720>
    15ca:	40 e0       	ldi	r20, 0x00	; 0
    15cc:	a4 16       	cp	r10, r20
    15ce:	40 e0       	ldi	r20, 0x00	; 0
    15d0:	b4 06       	cpc	r11, r20
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	c4 06       	cpc	r12, r20
    15d6:	41 e0       	ldi	r20, 0x01	; 1
    15d8:	d4 06       	cpc	r13, r20
    15da:	30 f0       	brcs	.+12     	; 0x15e8 <__umoddi3+0x716>
    15dc:	98 e1       	ldi	r25, 0x18	; 24
    15de:	e9 2e       	mov	r14, r25
    15e0:	f1 2c       	mov	r15, r1
    15e2:	01 2d       	mov	r16, r1
    15e4:	11 2d       	mov	r17, r1
    15e6:	05 c0       	rjmp	.+10     	; 0x15f2 <__umoddi3+0x720>
    15e8:	80 e1       	ldi	r24, 0x10	; 16
    15ea:	e8 2e       	mov	r14, r24
    15ec:	f1 2c       	mov	r15, r1
    15ee:	01 2d       	mov	r16, r1
    15f0:	11 2d       	mov	r17, r1
    15f2:	d6 01       	movw	r26, r12
    15f4:	c5 01       	movw	r24, r10
    15f6:	0e 2c       	mov	r0, r14
    15f8:	04 c0       	rjmp	.+8      	; 0x1602 <__umoddi3+0x730>
    15fa:	b6 95       	lsr	r27
    15fc:	a7 95       	ror	r26
    15fe:	97 95       	ror	r25
    1600:	87 95       	ror	r24
    1602:	0a 94       	dec	r0
    1604:	d2 f7       	brpl	.-12     	; 0x15fa <__umoddi3+0x728>
    1606:	8b 58       	subi	r24, 0x8B	; 139
    1608:	9e 4f       	sbci	r25, 0xFE	; 254
    160a:	dc 01       	movw	r26, r24
    160c:	2c 91       	ld	r18, X
    160e:	80 e2       	ldi	r24, 0x20	; 32
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	a0 e0       	ldi	r26, 0x00	; 0
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	8e 19       	sub	r24, r14
    1618:	9f 09       	sbc	r25, r15
    161a:	a0 0b       	sbc	r26, r16
    161c:	b1 0b       	sbc	r27, r17
    161e:	82 1b       	sub	r24, r18
    1620:	91 09       	sbc	r25, r1
    1622:	a1 09       	sbc	r26, r1
    1624:	b1 09       	sbc	r27, r1
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	a1 05       	cpc	r26, r1
    162a:	b1 05       	cpc	r27, r1
    162c:	09 f0       	breq	.+2      	; 0x1630 <__umoddi3+0x75e>
    162e:	4f c0       	rjmp	.+158    	; 0x16ce <__umoddi3+0x7fc>
    1630:	a6 14       	cp	r10, r6
    1632:	b7 04       	cpc	r11, r7
    1634:	c8 04       	cpc	r12, r8
    1636:	d9 04       	cpc	r13, r9
    1638:	58 f0       	brcs	.+22     	; 0x1650 <__umoddi3+0x77e>
    163a:	6c 96       	adiw	r28, 0x1c	; 28
    163c:	ec ac       	ldd	r14, Y+60	; 0x3c
    163e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1640:	0e ad       	ldd	r16, Y+62	; 0x3e
    1642:	1f ad       	ldd	r17, Y+63	; 0x3f
    1644:	6c 97       	sbiw	r28, 0x1c	; 28
    1646:	e2 14       	cp	r14, r2
    1648:	f3 04       	cpc	r15, r3
    164a:	04 05       	cpc	r16, r4
    164c:	15 05       	cpc	r17, r5
    164e:	68 f1       	brcs	.+90     	; 0x16aa <__umoddi3+0x7d8>
    1650:	6c 96       	adiw	r28, 0x1c	; 28
    1652:	ec ac       	ldd	r14, Y+60	; 0x3c
    1654:	fd ac       	ldd	r15, Y+61	; 0x3d
    1656:	0e ad       	ldd	r16, Y+62	; 0x3e
    1658:	1f ad       	ldd	r17, Y+63	; 0x3f
    165a:	6c 97       	sbiw	r28, 0x1c	; 28
    165c:	e2 18       	sub	r14, r2
    165e:	f3 08       	sbc	r15, r3
    1660:	04 09       	sbc	r16, r4
    1662:	15 09       	sbc	r17, r5
    1664:	a4 01       	movw	r20, r8
    1666:	93 01       	movw	r18, r6
    1668:	2a 19       	sub	r18, r10
    166a:	3b 09       	sbc	r19, r11
    166c:	4c 09       	sbc	r20, r12
    166e:	5d 09       	sbc	r21, r13
    1670:	aa 24       	eor	r10, r10
    1672:	bb 24       	eor	r11, r11
    1674:	65 01       	movw	r12, r10
    1676:	6c 96       	adiw	r28, 0x1c	; 28
    1678:	6c ad       	ldd	r22, Y+60	; 0x3c
    167a:	7d ad       	ldd	r23, Y+61	; 0x3d
    167c:	8e ad       	ldd	r24, Y+62	; 0x3e
    167e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1680:	6c 97       	sbiw	r28, 0x1c	; 28
    1682:	6e 15       	cp	r22, r14
    1684:	7f 05       	cpc	r23, r15
    1686:	80 07       	cpc	r24, r16
    1688:	91 07       	cpc	r25, r17
    168a:	28 f4       	brcc	.+10     	; 0x1696 <__umoddi3+0x7c4>
    168c:	b1 e0       	ldi	r27, 0x01	; 1
    168e:	ab 2e       	mov	r10, r27
    1690:	b1 2c       	mov	r11, r1
    1692:	c1 2c       	mov	r12, r1
    1694:	d1 2c       	mov	r13, r1
    1696:	da 01       	movw	r26, r20
    1698:	c9 01       	movw	r24, r18
    169a:	8a 19       	sub	r24, r10
    169c:	9b 09       	sbc	r25, r11
    169e:	ac 09       	sbc	r26, r12
    16a0:	bd 09       	sbc	r27, r13
    16a2:	8d ab       	std	Y+53, r24	; 0x35
    16a4:	9e ab       	std	Y+54, r25	; 0x36
    16a6:	af ab       	std	Y+55, r26	; 0x37
    16a8:	b8 af       	std	Y+56, r27	; 0x38
    16aa:	e9 8a       	std	Y+17, r14	; 0x11
    16ac:	fa 8a       	std	Y+18, r15	; 0x12
    16ae:	0b 8b       	std	Y+19, r16	; 0x13
    16b0:	1c 8b       	std	Y+20, r17	; 0x14
    16b2:	6d a8       	ldd	r6, Y+53	; 0x35
    16b4:	7e a8       	ldd	r7, Y+54	; 0x36
    16b6:	8f a8       	ldd	r8, Y+55	; 0x37
    16b8:	98 ac       	ldd	r9, Y+56	; 0x38
    16ba:	6d 8a       	std	Y+21, r6	; 0x15
    16bc:	7e 8a       	std	Y+22, r7	; 0x16
    16be:	8f 8a       	std	Y+23, r8	; 0x17
    16c0:	98 8e       	std	Y+24, r9	; 0x18
    16c2:	2e 2d       	mov	r18, r14
    16c4:	3a 89       	ldd	r19, Y+18	; 0x12
    16c6:	4b 89       	ldd	r20, Y+19	; 0x13
    16c8:	5c 89       	ldd	r21, Y+20	; 0x14
    16ca:	6d a9       	ldd	r22, Y+53	; 0x35
    16cc:	6a c2       	rjmp	.+1236   	; 0x1ba2 <__umoddi3+0xcd0>
    16ce:	67 96       	adiw	r28, 0x17	; 23
    16d0:	8f af       	std	Y+63, r24	; 0x3f
    16d2:	67 97       	sbiw	r28, 0x17	; 23
    16d4:	a6 01       	movw	r20, r12
    16d6:	95 01       	movw	r18, r10
    16d8:	08 2e       	mov	r0, r24
    16da:	04 c0       	rjmp	.+8      	; 0x16e4 <__umoddi3+0x812>
    16dc:	22 0f       	add	r18, r18
    16de:	33 1f       	adc	r19, r19
    16e0:	44 1f       	adc	r20, r20
    16e2:	55 1f       	adc	r21, r21
    16e4:	0a 94       	dec	r0
    16e6:	d2 f7       	brpl	.-12     	; 0x16dc <__umoddi3+0x80a>
    16e8:	a0 e2       	ldi	r26, 0x20	; 32
    16ea:	aa 2e       	mov	r10, r26
    16ec:	a8 1a       	sub	r10, r24
    16ee:	66 96       	adiw	r28, 0x16	; 22
    16f0:	af ae       	std	Y+63, r10	; 0x3f
    16f2:	66 97       	sbiw	r28, 0x16	; 22
    16f4:	d2 01       	movw	r26, r4
    16f6:	c1 01       	movw	r24, r2
    16f8:	04 c0       	rjmp	.+8      	; 0x1702 <__umoddi3+0x830>
    16fa:	b6 95       	lsr	r27
    16fc:	a7 95       	ror	r26
    16fe:	97 95       	ror	r25
    1700:	87 95       	ror	r24
    1702:	aa 94       	dec	r10
    1704:	d2 f7       	brpl	.-12     	; 0x16fa <__umoddi3+0x828>
    1706:	6c 01       	movw	r12, r24
    1708:	7d 01       	movw	r14, r26
    170a:	c2 2a       	or	r12, r18
    170c:	d3 2a       	or	r13, r19
    170e:	e4 2a       	or	r14, r20
    1710:	f5 2a       	or	r15, r21
    1712:	c9 a6       	std	Y+41, r12	; 0x29
    1714:	da a6       	std	Y+42, r13	; 0x2a
    1716:	eb a6       	std	Y+43, r14	; 0x2b
    1718:	fc a6       	std	Y+44, r15	; 0x2c
    171a:	82 01       	movw	r16, r4
    171c:	71 01       	movw	r14, r2
    171e:	67 96       	adiw	r28, 0x17	; 23
    1720:	0f ac       	ldd	r0, Y+63	; 0x3f
    1722:	67 97       	sbiw	r28, 0x17	; 23
    1724:	04 c0       	rjmp	.+8      	; 0x172e <__umoddi3+0x85c>
    1726:	ee 0c       	add	r14, r14
    1728:	ff 1c       	adc	r15, r15
    172a:	00 1f       	adc	r16, r16
    172c:	11 1f       	adc	r17, r17
    172e:	0a 94       	dec	r0
    1730:	d2 f7       	brpl	.-12     	; 0x1726 <__umoddi3+0x854>
    1732:	ed a2       	std	Y+37, r14	; 0x25
    1734:	fe a2       	std	Y+38, r15	; 0x26
    1736:	0f a3       	std	Y+39, r16	; 0x27
    1738:	18 a7       	std	Y+40, r17	; 0x28
    173a:	64 01       	movw	r12, r8
    173c:	53 01       	movw	r10, r6
    173e:	66 96       	adiw	r28, 0x16	; 22
    1740:	0f ac       	ldd	r0, Y+63	; 0x3f
    1742:	66 97       	sbiw	r28, 0x16	; 22
    1744:	04 c0       	rjmp	.+8      	; 0x174e <__umoddi3+0x87c>
    1746:	d6 94       	lsr	r13
    1748:	c7 94       	ror	r12
    174a:	b7 94       	ror	r11
    174c:	a7 94       	ror	r10
    174e:	0a 94       	dec	r0
    1750:	d2 f7       	brpl	.-12     	; 0x1746 <__umoddi3+0x874>
    1752:	a4 01       	movw	r20, r8
    1754:	93 01       	movw	r18, r6
    1756:	67 96       	adiw	r28, 0x17	; 23
    1758:	0f ac       	ldd	r0, Y+63	; 0x3f
    175a:	67 97       	sbiw	r28, 0x17	; 23
    175c:	04 c0       	rjmp	.+8      	; 0x1766 <__umoddi3+0x894>
    175e:	22 0f       	add	r18, r18
    1760:	33 1f       	adc	r19, r19
    1762:	44 1f       	adc	r20, r20
    1764:	55 1f       	adc	r21, r21
    1766:	0a 94       	dec	r0
    1768:	d2 f7       	brpl	.-12     	; 0x175e <__umoddi3+0x88c>
    176a:	6c 96       	adiw	r28, 0x1c	; 28
    176c:	8c ad       	ldd	r24, Y+60	; 0x3c
    176e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1770:	ae ad       	ldd	r26, Y+62	; 0x3e
    1772:	bf ad       	ldd	r27, Y+63	; 0x3f
    1774:	6c 97       	sbiw	r28, 0x1c	; 28
    1776:	66 96       	adiw	r28, 0x16	; 22
    1778:	0f ac       	ldd	r0, Y+63	; 0x3f
    177a:	66 97       	sbiw	r28, 0x16	; 22
    177c:	04 c0       	rjmp	.+8      	; 0x1786 <__umoddi3+0x8b4>
    177e:	b6 95       	lsr	r27
    1780:	a7 95       	ror	r26
    1782:	97 95       	ror	r25
    1784:	87 95       	ror	r24
    1786:	0a 94       	dec	r0
    1788:	d2 f7       	brpl	.-12     	; 0x177e <__umoddi3+0x8ac>
    178a:	3c 01       	movw	r6, r24
    178c:	4d 01       	movw	r8, r26
    178e:	62 2a       	or	r6, r18
    1790:	73 2a       	or	r7, r19
    1792:	84 2a       	or	r8, r20
    1794:	95 2a       	or	r9, r21
    1796:	69 a2       	std	Y+33, r6	; 0x21
    1798:	7a a2       	std	Y+34, r7	; 0x22
    179a:	8b a2       	std	Y+35, r8	; 0x23
    179c:	9c a2       	std	Y+36, r9	; 0x24
    179e:	6c 96       	adiw	r28, 0x1c	; 28
    17a0:	ec ac       	ldd	r14, Y+60	; 0x3c
    17a2:	fd ac       	ldd	r15, Y+61	; 0x3d
    17a4:	0e ad       	ldd	r16, Y+62	; 0x3e
    17a6:	1f ad       	ldd	r17, Y+63	; 0x3f
    17a8:	6c 97       	sbiw	r28, 0x1c	; 28
    17aa:	67 96       	adiw	r28, 0x17	; 23
    17ac:	0f ac       	ldd	r0, Y+63	; 0x3f
    17ae:	67 97       	sbiw	r28, 0x17	; 23
    17b0:	04 c0       	rjmp	.+8      	; 0x17ba <__umoddi3+0x8e8>
    17b2:	ee 0c       	add	r14, r14
    17b4:	ff 1c       	adc	r15, r15
    17b6:	00 1f       	adc	r16, r16
    17b8:	11 1f       	adc	r17, r17
    17ba:	0a 94       	dec	r0
    17bc:	d2 f7       	brpl	.-12     	; 0x17b2 <__umoddi3+0x8e0>
    17be:	ed 8e       	std	Y+29, r14	; 0x1d
    17c0:	fe 8e       	std	Y+30, r15	; 0x1e
    17c2:	0f 8f       	std	Y+31, r16	; 0x1f
    17c4:	18 a3       	std	Y+32, r17	; 0x20
    17c6:	49 a5       	ldd	r20, Y+41	; 0x29
    17c8:	5a a5       	ldd	r21, Y+42	; 0x2a
    17ca:	6b a5       	ldd	r22, Y+43	; 0x2b
    17cc:	7c a5       	ldd	r23, Y+44	; 0x2c
    17ce:	3b 01       	movw	r6, r22
    17d0:	88 24       	eor	r8, r8
    17d2:	99 24       	eor	r9, r9
    17d4:	60 70       	andi	r22, 0x00	; 0
    17d6:	70 70       	andi	r23, 0x00	; 0
    17d8:	2d 96       	adiw	r28, 0x0d	; 13
    17da:	4c af       	std	Y+60, r20	; 0x3c
    17dc:	5d af       	std	Y+61, r21	; 0x3d
    17de:	6e af       	std	Y+62, r22	; 0x3e
    17e0:	7f af       	std	Y+63, r23	; 0x3f
    17e2:	2d 97       	sbiw	r28, 0x0d	; 13
    17e4:	c6 01       	movw	r24, r12
    17e6:	b5 01       	movw	r22, r10
    17e8:	a4 01       	movw	r20, r8
    17ea:	93 01       	movw	r18, r6
    17ec:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
    17f0:	7b 01       	movw	r14, r22
    17f2:	8c 01       	movw	r16, r24
    17f4:	c6 01       	movw	r24, r12
    17f6:	b5 01       	movw	r22, r10
    17f8:	a4 01       	movw	r20, r8
    17fa:	93 01       	movw	r18, r6
    17fc:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
    1800:	c9 01       	movw	r24, r18
    1802:	da 01       	movw	r26, r20
    1804:	1c 01       	movw	r2, r24
    1806:	2d 01       	movw	r4, r26
    1808:	c2 01       	movw	r24, r4
    180a:	b1 01       	movw	r22, r2
    180c:	2d 96       	adiw	r28, 0x0d	; 13
    180e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1810:	3d ad       	ldd	r19, Y+61	; 0x3d
    1812:	4e ad       	ldd	r20, Y+62	; 0x3e
    1814:	5f ad       	ldd	r21, Y+63	; 0x3f
    1816:	2d 97       	sbiw	r28, 0x0d	; 13
    1818:	0e 94 81 33 	call	0x6702	; 0x6702 <__mulsi3>
    181c:	9b 01       	movw	r18, r22
    181e:	ac 01       	movw	r20, r24
    1820:	87 01       	movw	r16, r14
    1822:	ff 24       	eor	r15, r15
    1824:	ee 24       	eor	r14, r14
    1826:	a9 a0       	ldd	r10, Y+33	; 0x21
    1828:	ba a0       	ldd	r11, Y+34	; 0x22
    182a:	cb a0       	ldd	r12, Y+35	; 0x23
    182c:	dc a0       	ldd	r13, Y+36	; 0x24
    182e:	c6 01       	movw	r24, r12
    1830:	aa 27       	eor	r26, r26
    1832:	bb 27       	eor	r27, r27
    1834:	57 01       	movw	r10, r14
    1836:	68 01       	movw	r12, r16
    1838:	a8 2a       	or	r10, r24
    183a:	b9 2a       	or	r11, r25
    183c:	ca 2a       	or	r12, r26
    183e:	db 2a       	or	r13, r27
    1840:	a2 16       	cp	r10, r18
    1842:	b3 06       	cpc	r11, r19
    1844:	c4 06       	cpc	r12, r20
    1846:	d5 06       	cpc	r13, r21
    1848:	00 f5       	brcc	.+64     	; 0x188a <__umoddi3+0x9b8>
    184a:	08 94       	sec
    184c:	21 08       	sbc	r2, r1
    184e:	31 08       	sbc	r3, r1
    1850:	41 08       	sbc	r4, r1
    1852:	51 08       	sbc	r5, r1
    1854:	e9 a4       	ldd	r14, Y+41	; 0x29
    1856:	fa a4       	ldd	r15, Y+42	; 0x2a
    1858:	0b a5       	ldd	r16, Y+43	; 0x2b
    185a:	1c a5       	ldd	r17, Y+44	; 0x2c
    185c:	ae 0c       	add	r10, r14
    185e:	bf 1c       	adc	r11, r15
    1860:	c0 1e       	adc	r12, r16
    1862:	d1 1e       	adc	r13, r17
    1864:	ae 14       	cp	r10, r14
    1866:	bf 04       	cpc	r11, r15
    1868:	c0 06       	cpc	r12, r16
    186a:	d1 06       	cpc	r13, r17
    186c:	70 f0       	brcs	.+28     	; 0x188a <__umoddi3+0x9b8>
    186e:	a2 16       	cp	r10, r18
    1870:	b3 06       	cpc	r11, r19
    1872:	c4 06       	cpc	r12, r20
    1874:	d5 06       	cpc	r13, r21
    1876:	48 f4       	brcc	.+18     	; 0x188a <__umoddi3+0x9b8>
    1878:	08 94       	sec
    187a:	21 08       	sbc	r2, r1
    187c:	31 08       	sbc	r3, r1
    187e:	41 08       	sbc	r4, r1
    1880:	51 08       	sbc	r5, r1
    1882:	ae 0c       	add	r10, r14
    1884:	bf 1c       	adc	r11, r15
    1886:	c0 1e       	adc	r12, r16
    1888:	d1 1e       	adc	r13, r17
    188a:	a2 1a       	sub	r10, r18
    188c:	b3 0a       	sbc	r11, r19
    188e:	c4 0a       	sbc	r12, r20
    1890:	d5 0a       	sbc	r13, r21
    1892:	c6 01       	movw	r24, r12
    1894:	b5 01       	movw	r22, r10
    1896:	a4 01       	movw	r20, r8
    1898:	93 01       	movw	r18, r6
    189a:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
    189e:	7b 01       	movw	r14, r22
    18a0:	8c 01       	movw	r16, r24
    18a2:	c6 01       	movw	r24, r12
    18a4:	b5 01       	movw	r22, r10
    18a6:	a4 01       	movw	r20, r8
    18a8:	93 01       	movw	r18, r6
    18aa:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
    18ae:	c9 01       	movw	r24, r18
    18b0:	da 01       	movw	r26, r20
    18b2:	3c 01       	movw	r6, r24
    18b4:	4d 01       	movw	r8, r26
    18b6:	c4 01       	movw	r24, r8
    18b8:	b3 01       	movw	r22, r6
    18ba:	2d 96       	adiw	r28, 0x0d	; 13
    18bc:	2c ad       	ldd	r18, Y+60	; 0x3c
    18be:	3d ad       	ldd	r19, Y+61	; 0x3d
    18c0:	4e ad       	ldd	r20, Y+62	; 0x3e
    18c2:	5f ad       	ldd	r21, Y+63	; 0x3f
    18c4:	2d 97       	sbiw	r28, 0x0d	; 13
    18c6:	0e 94 81 33 	call	0x6702	; 0x6702 <__mulsi3>
    18ca:	9b 01       	movw	r18, r22
    18cc:	ac 01       	movw	r20, r24
    18ce:	87 01       	movw	r16, r14
    18d0:	ff 24       	eor	r15, r15
    18d2:	ee 24       	eor	r14, r14
    18d4:	89 a1       	ldd	r24, Y+33	; 0x21
    18d6:	9a a1       	ldd	r25, Y+34	; 0x22
    18d8:	ab a1       	ldd	r26, Y+35	; 0x23
    18da:	bc a1       	ldd	r27, Y+36	; 0x24
    18dc:	a0 70       	andi	r26, 0x00	; 0
    18de:	b0 70       	andi	r27, 0x00	; 0
    18e0:	57 01       	movw	r10, r14
    18e2:	68 01       	movw	r12, r16
    18e4:	a8 2a       	or	r10, r24
    18e6:	b9 2a       	or	r11, r25
    18e8:	ca 2a       	or	r12, r26
    18ea:	db 2a       	or	r13, r27
    18ec:	a2 16       	cp	r10, r18
    18ee:	b3 06       	cpc	r11, r19
    18f0:	c4 06       	cpc	r12, r20
    18f2:	d5 06       	cpc	r13, r21
    18f4:	00 f5       	brcc	.+64     	; 0x1936 <__umoddi3+0xa64>
    18f6:	08 94       	sec
    18f8:	61 08       	sbc	r6, r1
    18fa:	71 08       	sbc	r7, r1
    18fc:	81 08       	sbc	r8, r1
    18fe:	91 08       	sbc	r9, r1
    1900:	69 a5       	ldd	r22, Y+41	; 0x29
    1902:	7a a5       	ldd	r23, Y+42	; 0x2a
    1904:	8b a5       	ldd	r24, Y+43	; 0x2b
    1906:	9c a5       	ldd	r25, Y+44	; 0x2c
    1908:	a6 0e       	add	r10, r22
    190a:	b7 1e       	adc	r11, r23
    190c:	c8 1e       	adc	r12, r24
    190e:	d9 1e       	adc	r13, r25
    1910:	a6 16       	cp	r10, r22
    1912:	b7 06       	cpc	r11, r23
    1914:	c8 06       	cpc	r12, r24
    1916:	d9 06       	cpc	r13, r25
    1918:	70 f0       	brcs	.+28     	; 0x1936 <__umoddi3+0xa64>
    191a:	a2 16       	cp	r10, r18
    191c:	b3 06       	cpc	r11, r19
    191e:	c4 06       	cpc	r12, r20
    1920:	d5 06       	cpc	r13, r21
    1922:	48 f4       	brcc	.+18     	; 0x1936 <__umoddi3+0xa64>
    1924:	08 94       	sec
    1926:	61 08       	sbc	r6, r1
    1928:	71 08       	sbc	r7, r1
    192a:	81 08       	sbc	r8, r1
    192c:	91 08       	sbc	r9, r1
    192e:	a6 0e       	add	r10, r22
    1930:	b7 1e       	adc	r11, r23
    1932:	c8 1e       	adc	r12, r24
    1934:	d9 1e       	adc	r13, r25
    1936:	d6 01       	movw	r26, r12
    1938:	c5 01       	movw	r24, r10
    193a:	82 1b       	sub	r24, r18
    193c:	93 0b       	sbc	r25, r19
    193e:	a4 0b       	sbc	r26, r20
    1940:	b5 0b       	sbc	r27, r21
    1942:	89 8f       	std	Y+25, r24	; 0x19
    1944:	9a 8f       	std	Y+26, r25	; 0x1a
    1946:	ab 8f       	std	Y+27, r26	; 0x1b
    1948:	bc 8f       	std	Y+28, r27	; 0x1c
    194a:	d1 01       	movw	r26, r2
    194c:	99 27       	eor	r25, r25
    194e:	88 27       	eor	r24, r24
    1950:	84 01       	movw	r16, r8
    1952:	73 01       	movw	r14, r6
    1954:	e8 2a       	or	r14, r24
    1956:	f9 2a       	or	r15, r25
    1958:	0a 2b       	or	r16, r26
    195a:	1b 2b       	or	r17, r27
    195c:	4f ef       	ldi	r20, 0xFF	; 255
    195e:	a4 2e       	mov	r10, r20
    1960:	4f ef       	ldi	r20, 0xFF	; 255
    1962:	b4 2e       	mov	r11, r20
    1964:	c1 2c       	mov	r12, r1
    1966:	d1 2c       	mov	r13, r1
    1968:	ae 20       	and	r10, r14
    196a:	bf 20       	and	r11, r15
    196c:	c0 22       	and	r12, r16
    196e:	d1 22       	and	r13, r17
    1970:	78 01       	movw	r14, r16
    1972:	00 27       	eor	r16, r16
    1974:	11 27       	eor	r17, r17
    1976:	6d a0       	ldd	r6, Y+37	; 0x25
    1978:	7e a0       	ldd	r7, Y+38	; 0x26
    197a:	8f a0       	ldd	r8, Y+39	; 0x27
    197c:	98 a4       	ldd	r9, Y+40	; 0x28
    197e:	4f ef       	ldi	r20, 0xFF	; 255
    1980:	5f ef       	ldi	r21, 0xFF	; 255
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	64 22       	and	r6, r20
    1988:	75 22       	and	r7, r21
    198a:	86 22       	and	r8, r22
    198c:	97 22       	and	r9, r23
    198e:	8d a1       	ldd	r24, Y+37	; 0x25
    1990:	9e a1       	ldd	r25, Y+38	; 0x26
    1992:	af a1       	ldd	r26, Y+39	; 0x27
    1994:	b8 a5       	ldd	r27, Y+40	; 0x28
    1996:	bd 01       	movw	r22, r26
    1998:	88 27       	eor	r24, r24
    199a:	99 27       	eor	r25, r25
    199c:	65 96       	adiw	r28, 0x15	; 21
    199e:	6c af       	std	Y+60, r22	; 0x3c
    19a0:	7d af       	std	Y+61, r23	; 0x3d
    19a2:	8e af       	std	Y+62, r24	; 0x3e
    19a4:	9f af       	std	Y+63, r25	; 0x3f
    19a6:	65 97       	sbiw	r28, 0x15	; 21
    19a8:	c6 01       	movw	r24, r12
    19aa:	b5 01       	movw	r22, r10
    19ac:	a4 01       	movw	r20, r8
    19ae:	93 01       	movw	r18, r6
    19b0:	0e 94 81 33 	call	0x6702	; 0x6702 <__mulsi3>
    19b4:	61 96       	adiw	r28, 0x11	; 17
    19b6:	6c af       	std	Y+60, r22	; 0x3c
    19b8:	7d af       	std	Y+61, r23	; 0x3d
    19ba:	8e af       	std	Y+62, r24	; 0x3e
    19bc:	9f af       	std	Y+63, r25	; 0x3f
    19be:	61 97       	sbiw	r28, 0x11	; 17
    19c0:	c6 01       	movw	r24, r12
    19c2:	b5 01       	movw	r22, r10
    19c4:	65 96       	adiw	r28, 0x15	; 21
    19c6:	2c ad       	ldd	r18, Y+60	; 0x3c
    19c8:	3d ad       	ldd	r19, Y+61	; 0x3d
    19ca:	4e ad       	ldd	r20, Y+62	; 0x3e
    19cc:	5f ad       	ldd	r21, Y+63	; 0x3f
    19ce:	65 97       	sbiw	r28, 0x15	; 21
    19d0:	0e 94 81 33 	call	0x6702	; 0x6702 <__mulsi3>
    19d4:	1b 01       	movw	r2, r22
    19d6:	2c 01       	movw	r4, r24
    19d8:	c8 01       	movw	r24, r16
    19da:	b7 01       	movw	r22, r14
    19dc:	a4 01       	movw	r20, r8
    19de:	93 01       	movw	r18, r6
    19e0:	0e 94 81 33 	call	0x6702	; 0x6702 <__mulsi3>
    19e4:	5b 01       	movw	r10, r22
    19e6:	6c 01       	movw	r12, r24
    19e8:	c8 01       	movw	r24, r16
    19ea:	b7 01       	movw	r22, r14
    19ec:	65 96       	adiw	r28, 0x15	; 21
    19ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    19f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    19f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    19f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    19f6:	65 97       	sbiw	r28, 0x15	; 21
    19f8:	0e 94 81 33 	call	0x6702	; 0x6702 <__mulsi3>
    19fc:	7b 01       	movw	r14, r22
    19fe:	8c 01       	movw	r16, r24
    1a00:	a6 01       	movw	r20, r12
    1a02:	95 01       	movw	r18, r10
    1a04:	22 0d       	add	r18, r2
    1a06:	33 1d       	adc	r19, r3
    1a08:	44 1d       	adc	r20, r4
    1a0a:	55 1d       	adc	r21, r5
    1a0c:	61 96       	adiw	r28, 0x11	; 17
    1a0e:	6c ac       	ldd	r6, Y+60	; 0x3c
    1a10:	7d ac       	ldd	r7, Y+61	; 0x3d
    1a12:	8e ac       	ldd	r8, Y+62	; 0x3e
    1a14:	9f ac       	ldd	r9, Y+63	; 0x3f
    1a16:	61 97       	sbiw	r28, 0x11	; 17
    1a18:	c4 01       	movw	r24, r8
    1a1a:	aa 27       	eor	r26, r26
    1a1c:	bb 27       	eor	r27, r27
    1a1e:	28 0f       	add	r18, r24
    1a20:	39 1f       	adc	r19, r25
    1a22:	4a 1f       	adc	r20, r26
    1a24:	5b 1f       	adc	r21, r27
    1a26:	2a 15       	cp	r18, r10
    1a28:	3b 05       	cpc	r19, r11
    1a2a:	4c 05       	cpc	r20, r12
    1a2c:	5d 05       	cpc	r21, r13
    1a2e:	48 f4       	brcc	.+18     	; 0x1a42 <__umoddi3+0xb70>
    1a30:	81 2c       	mov	r8, r1
    1a32:	91 2c       	mov	r9, r1
    1a34:	e1 e0       	ldi	r30, 0x01	; 1
    1a36:	ae 2e       	mov	r10, r30
    1a38:	b1 2c       	mov	r11, r1
    1a3a:	e8 0c       	add	r14, r8
    1a3c:	f9 1c       	adc	r15, r9
    1a3e:	0a 1d       	adc	r16, r10
    1a40:	1b 1d       	adc	r17, r11
    1a42:	ca 01       	movw	r24, r20
    1a44:	aa 27       	eor	r26, r26
    1a46:	bb 27       	eor	r27, r27
    1a48:	57 01       	movw	r10, r14
    1a4a:	68 01       	movw	r12, r16
    1a4c:	a8 0e       	add	r10, r24
    1a4e:	b9 1e       	adc	r11, r25
    1a50:	ca 1e       	adc	r12, r26
    1a52:	db 1e       	adc	r13, r27
    1a54:	a9 01       	movw	r20, r18
    1a56:	33 27       	eor	r19, r19
    1a58:	22 27       	eor	r18, r18
    1a5a:	61 96       	adiw	r28, 0x11	; 17
    1a5c:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a5e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a60:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a62:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a64:	61 97       	sbiw	r28, 0x11	; 17
    1a66:	a0 70       	andi	r26, 0x00	; 0
    1a68:	b0 70       	andi	r27, 0x00	; 0
    1a6a:	28 0f       	add	r18, r24
    1a6c:	39 1f       	adc	r19, r25
    1a6e:	4a 1f       	adc	r20, r26
    1a70:	5b 1f       	adc	r21, r27
    1a72:	e9 8c       	ldd	r14, Y+25	; 0x19
    1a74:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1a76:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1a78:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1a7a:	ea 14       	cp	r14, r10
    1a7c:	fb 04       	cpc	r15, r11
    1a7e:	0c 05       	cpc	r16, r12
    1a80:	1d 05       	cpc	r17, r13
    1a82:	70 f0       	brcs	.+28     	; 0x1aa0 <__umoddi3+0xbce>
    1a84:	ae 14       	cp	r10, r14
    1a86:	bf 04       	cpc	r11, r15
    1a88:	c0 06       	cpc	r12, r16
    1a8a:	d1 06       	cpc	r13, r17
    1a8c:	69 f5       	brne	.+90     	; 0x1ae8 <__umoddi3+0xc16>
    1a8e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a90:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1a92:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a94:	98 a1       	ldd	r25, Y+32	; 0x20
    1a96:	62 17       	cp	r22, r18
    1a98:	73 07       	cpc	r23, r19
    1a9a:	84 07       	cpc	r24, r20
    1a9c:	95 07       	cpc	r25, r21
    1a9e:	20 f5       	brcc	.+72     	; 0x1ae8 <__umoddi3+0xc16>
    1aa0:	da 01       	movw	r26, r20
    1aa2:	c9 01       	movw	r24, r18
    1aa4:	6d a0       	ldd	r6, Y+37	; 0x25
    1aa6:	7e a0       	ldd	r7, Y+38	; 0x26
    1aa8:	8f a0       	ldd	r8, Y+39	; 0x27
    1aaa:	98 a4       	ldd	r9, Y+40	; 0x28
    1aac:	86 19       	sub	r24, r6
    1aae:	97 09       	sbc	r25, r7
    1ab0:	a8 09       	sbc	r26, r8
    1ab2:	b9 09       	sbc	r27, r9
    1ab4:	e9 a4       	ldd	r14, Y+41	; 0x29
    1ab6:	fa a4       	ldd	r15, Y+42	; 0x2a
    1ab8:	0b a5       	ldd	r16, Y+43	; 0x2b
    1aba:	1c a5       	ldd	r17, Y+44	; 0x2c
    1abc:	ae 18       	sub	r10, r14
    1abe:	bf 08       	sbc	r11, r15
    1ac0:	c0 0a       	sbc	r12, r16
    1ac2:	d1 0a       	sbc	r13, r17
    1ac4:	ee 24       	eor	r14, r14
    1ac6:	ff 24       	eor	r15, r15
    1ac8:	87 01       	movw	r16, r14
    1aca:	28 17       	cp	r18, r24
    1acc:	39 07       	cpc	r19, r25
    1ace:	4a 07       	cpc	r20, r26
    1ad0:	5b 07       	cpc	r21, r27
    1ad2:	28 f4       	brcc	.+10     	; 0x1ade <__umoddi3+0xc0c>
    1ad4:	21 e0       	ldi	r18, 0x01	; 1
    1ad6:	e2 2e       	mov	r14, r18
    1ad8:	f1 2c       	mov	r15, r1
    1ada:	01 2d       	mov	r16, r1
    1adc:	11 2d       	mov	r17, r1
    1ade:	ae 18       	sub	r10, r14
    1ae0:	bf 08       	sbc	r11, r15
    1ae2:	c0 0a       	sbc	r12, r16
    1ae4:	d1 0a       	sbc	r13, r17
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <__umoddi3+0xc1a>
    1ae8:	da 01       	movw	r26, r20
    1aea:	c9 01       	movw	r24, r18
    1aec:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1aee:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1af0:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1af2:	98 a0       	ldd	r9, Y+32	; 0x20
    1af4:	68 1a       	sub	r6, r24
    1af6:	79 0a       	sbc	r7, r25
    1af8:	8a 0a       	sbc	r8, r26
    1afa:	9b 0a       	sbc	r9, r27
    1afc:	49 8d       	ldd	r20, Y+25	; 0x19
    1afe:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1b00:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1b02:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1b04:	4a 19       	sub	r20, r10
    1b06:	5b 09       	sbc	r21, r11
    1b08:	6c 09       	sbc	r22, r12
    1b0a:	7d 09       	sbc	r23, r13
    1b0c:	5a 01       	movw	r10, r20
    1b0e:	6b 01       	movw	r12, r22
    1b10:	22 24       	eor	r2, r2
    1b12:	33 24       	eor	r3, r3
    1b14:	21 01       	movw	r4, r2
    1b16:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b18:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1b1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b1c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b1e:	66 15       	cp	r22, r6
    1b20:	77 05       	cpc	r23, r7
    1b22:	88 05       	cpc	r24, r8
    1b24:	99 05       	cpc	r25, r9
    1b26:	28 f4       	brcc	.+10     	; 0x1b32 <__umoddi3+0xc60>
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	28 2e       	mov	r2, r24
    1b2c:	31 2c       	mov	r3, r1
    1b2e:	41 2c       	mov	r4, r1
    1b30:	51 2c       	mov	r5, r1
    1b32:	86 01       	movw	r16, r12
    1b34:	75 01       	movw	r14, r10
    1b36:	e2 18       	sub	r14, r2
    1b38:	f3 08       	sbc	r15, r3
    1b3a:	04 09       	sbc	r16, r4
    1b3c:	15 09       	sbc	r17, r5
    1b3e:	a8 01       	movw	r20, r16
    1b40:	97 01       	movw	r18, r14
    1b42:	66 96       	adiw	r28, 0x16	; 22
    1b44:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b46:	66 97       	sbiw	r28, 0x16	; 22
    1b48:	04 c0       	rjmp	.+8      	; 0x1b52 <__umoddi3+0xc80>
    1b4a:	22 0f       	add	r18, r18
    1b4c:	33 1f       	adc	r19, r19
    1b4e:	44 1f       	adc	r20, r20
    1b50:	55 1f       	adc	r21, r21
    1b52:	0a 94       	dec	r0
    1b54:	d2 f7       	brpl	.-12     	; 0x1b4a <__umoddi3+0xc78>
    1b56:	d4 01       	movw	r26, r8
    1b58:	c3 01       	movw	r24, r6
    1b5a:	67 96       	adiw	r28, 0x17	; 23
    1b5c:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b5e:	67 97       	sbiw	r28, 0x17	; 23
    1b60:	04 c0       	rjmp	.+8      	; 0x1b6a <__umoddi3+0xc98>
    1b62:	b6 95       	lsr	r27
    1b64:	a7 95       	ror	r26
    1b66:	97 95       	ror	r25
    1b68:	87 95       	ror	r24
    1b6a:	0a 94       	dec	r0
    1b6c:	d2 f7       	brpl	.-12     	; 0x1b62 <__umoddi3+0xc90>
    1b6e:	28 2b       	or	r18, r24
    1b70:	39 2b       	or	r19, r25
    1b72:	4a 2b       	or	r20, r26
    1b74:	5b 2b       	or	r21, r27
    1b76:	29 8b       	std	Y+17, r18	; 0x11
    1b78:	3a 8b       	std	Y+18, r19	; 0x12
    1b7a:	4b 8b       	std	Y+19, r20	; 0x13
    1b7c:	5c 8b       	std	Y+20, r21	; 0x14
    1b7e:	67 96       	adiw	r28, 0x17	; 23
    1b80:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b82:	67 97       	sbiw	r28, 0x17	; 23
    1b84:	04 c0       	rjmp	.+8      	; 0x1b8e <__umoddi3+0xcbc>
    1b86:	16 95       	lsr	r17
    1b88:	07 95       	ror	r16
    1b8a:	f7 94       	ror	r15
    1b8c:	e7 94       	ror	r14
    1b8e:	0a 94       	dec	r0
    1b90:	d2 f7       	brpl	.-12     	; 0x1b86 <__umoddi3+0xcb4>
    1b92:	ed 8a       	std	Y+21, r14	; 0x15
    1b94:	fe 8a       	std	Y+22, r15	; 0x16
    1b96:	0f 8b       	std	Y+23, r16	; 0x17
    1b98:	18 8f       	std	Y+24, r17	; 0x18
    1b9a:	3a 89       	ldd	r19, Y+18	; 0x12
    1b9c:	4b 89       	ldd	r20, Y+19	; 0x13
    1b9e:	5c 89       	ldd	r21, Y+20	; 0x14
    1ba0:	6e 2d       	mov	r22, r14
    1ba2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba8:	c5 5a       	subi	r28, 0xA5	; 165
    1baa:	df 4f       	sbci	r29, 0xFF	; 255
    1bac:	e2 e1       	ldi	r30, 0x12	; 18
    1bae:	0c 94 bc 33 	jmp	0x6778	; 0x6778 <__epilogue_restores__>

00001bb2 <_fpadd_parts>:
    1bb2:	a0 e0       	ldi	r26, 0x00	; 0
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	ef ed       	ldi	r30, 0xDF	; 223
    1bb8:	fd e0       	ldi	r31, 0x0D	; 13
    1bba:	0c 94 a0 33 	jmp	0x6740	; 0x6740 <__prologue_saves__>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	2b 01       	movw	r4, r22
    1bc2:	fa 01       	movw	r30, r20
    1bc4:	9c 91       	ld	r25, X
    1bc6:	92 30       	cpi	r25, 0x02	; 2
    1bc8:	08 f4       	brcc	.+2      	; 0x1bcc <_fpadd_parts+0x1a>
    1bca:	39 c1       	rjmp	.+626    	; 0x1e3e <_fpadd_parts+0x28c>
    1bcc:	eb 01       	movw	r28, r22
    1bce:	88 81       	ld	r24, Y
    1bd0:	82 30       	cpi	r24, 0x02	; 2
    1bd2:	08 f4       	brcc	.+2      	; 0x1bd6 <_fpadd_parts+0x24>
    1bd4:	33 c1       	rjmp	.+614    	; 0x1e3c <_fpadd_parts+0x28a>
    1bd6:	94 30       	cpi	r25, 0x04	; 4
    1bd8:	69 f4       	brne	.+26     	; 0x1bf4 <_fpadd_parts+0x42>
    1bda:	84 30       	cpi	r24, 0x04	; 4
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <_fpadd_parts+0x2e>
    1bde:	2f c1       	rjmp	.+606    	; 0x1e3e <_fpadd_parts+0x28c>
    1be0:	11 96       	adiw	r26, 0x01	; 1
    1be2:	9c 91       	ld	r25, X
    1be4:	11 97       	sbiw	r26, 0x01	; 1
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	98 17       	cp	r25, r24
    1bea:	09 f4       	brne	.+2      	; 0x1bee <_fpadd_parts+0x3c>
    1bec:	28 c1       	rjmp	.+592    	; 0x1e3e <_fpadd_parts+0x28c>
    1bee:	ad e6       	ldi	r26, 0x6D	; 109
    1bf0:	b1 e0       	ldi	r27, 0x01	; 1
    1bf2:	25 c1       	rjmp	.+586    	; 0x1e3e <_fpadd_parts+0x28c>
    1bf4:	84 30       	cpi	r24, 0x04	; 4
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <_fpadd_parts+0x48>
    1bf8:	21 c1       	rjmp	.+578    	; 0x1e3c <_fpadd_parts+0x28a>
    1bfa:	82 30       	cpi	r24, 0x02	; 2
    1bfc:	a9 f4       	brne	.+42     	; 0x1c28 <_fpadd_parts+0x76>
    1bfe:	92 30       	cpi	r25, 0x02	; 2
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <_fpadd_parts+0x52>
    1c02:	1d c1       	rjmp	.+570    	; 0x1e3e <_fpadd_parts+0x28c>
    1c04:	9a 01       	movw	r18, r20
    1c06:	ad 01       	movw	r20, r26
    1c08:	88 e0       	ldi	r24, 0x08	; 8
    1c0a:	ea 01       	movw	r28, r20
    1c0c:	09 90       	ld	r0, Y+
    1c0e:	ae 01       	movw	r20, r28
    1c10:	e9 01       	movw	r28, r18
    1c12:	09 92       	st	Y+, r0
    1c14:	9e 01       	movw	r18, r28
    1c16:	81 50       	subi	r24, 0x01	; 1
    1c18:	c1 f7       	brne	.-16     	; 0x1c0a <_fpadd_parts+0x58>
    1c1a:	e2 01       	movw	r28, r4
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	11 96       	adiw	r26, 0x01	; 1
    1c20:	9c 91       	ld	r25, X
    1c22:	89 23       	and	r24, r25
    1c24:	81 83       	std	Z+1, r24	; 0x01
    1c26:	08 c1       	rjmp	.+528    	; 0x1e38 <_fpadd_parts+0x286>
    1c28:	92 30       	cpi	r25, 0x02	; 2
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <_fpadd_parts+0x7c>
    1c2c:	07 c1       	rjmp	.+526    	; 0x1e3c <_fpadd_parts+0x28a>
    1c2e:	12 96       	adiw	r26, 0x02	; 2
    1c30:	2d 90       	ld	r2, X+
    1c32:	3c 90       	ld	r3, X
    1c34:	13 97       	sbiw	r26, 0x03	; 3
    1c36:	eb 01       	movw	r28, r22
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3c:	14 96       	adiw	r26, 0x04	; 4
    1c3e:	ad 90       	ld	r10, X+
    1c40:	bd 90       	ld	r11, X+
    1c42:	cd 90       	ld	r12, X+
    1c44:	dc 90       	ld	r13, X
    1c46:	17 97       	sbiw	r26, 0x07	; 7
    1c48:	ec 80       	ldd	r14, Y+4	; 0x04
    1c4a:	fd 80       	ldd	r15, Y+5	; 0x05
    1c4c:	0e 81       	ldd	r16, Y+6	; 0x06
    1c4e:	1f 81       	ldd	r17, Y+7	; 0x07
    1c50:	91 01       	movw	r18, r2
    1c52:	28 1b       	sub	r18, r24
    1c54:	39 0b       	sbc	r19, r25
    1c56:	b9 01       	movw	r22, r18
    1c58:	37 ff       	sbrs	r19, 7
    1c5a:	04 c0       	rjmp	.+8      	; 0x1c64 <_fpadd_parts+0xb2>
    1c5c:	66 27       	eor	r22, r22
    1c5e:	77 27       	eor	r23, r23
    1c60:	62 1b       	sub	r22, r18
    1c62:	73 0b       	sbc	r23, r19
    1c64:	60 32       	cpi	r22, 0x20	; 32
    1c66:	71 05       	cpc	r23, r1
    1c68:	0c f0       	brlt	.+2      	; 0x1c6c <_fpadd_parts+0xba>
    1c6a:	61 c0       	rjmp	.+194    	; 0x1d2e <_fpadd_parts+0x17c>
    1c6c:	12 16       	cp	r1, r18
    1c6e:	13 06       	cpc	r1, r19
    1c70:	6c f5       	brge	.+90     	; 0x1ccc <_fpadd_parts+0x11a>
    1c72:	37 01       	movw	r6, r14
    1c74:	48 01       	movw	r8, r16
    1c76:	06 2e       	mov	r0, r22
    1c78:	04 c0       	rjmp	.+8      	; 0x1c82 <_fpadd_parts+0xd0>
    1c7a:	96 94       	lsr	r9
    1c7c:	87 94       	ror	r8
    1c7e:	77 94       	ror	r7
    1c80:	67 94       	ror	r6
    1c82:	0a 94       	dec	r0
    1c84:	d2 f7       	brpl	.-12     	; 0x1c7a <_fpadd_parts+0xc8>
    1c86:	21 e0       	ldi	r18, 0x01	; 1
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e0       	ldi	r20, 0x00	; 0
    1c8c:	50 e0       	ldi	r21, 0x00	; 0
    1c8e:	04 c0       	rjmp	.+8      	; 0x1c98 <_fpadd_parts+0xe6>
    1c90:	22 0f       	add	r18, r18
    1c92:	33 1f       	adc	r19, r19
    1c94:	44 1f       	adc	r20, r20
    1c96:	55 1f       	adc	r21, r21
    1c98:	6a 95       	dec	r22
    1c9a:	d2 f7       	brpl	.-12     	; 0x1c90 <_fpadd_parts+0xde>
    1c9c:	21 50       	subi	r18, 0x01	; 1
    1c9e:	30 40       	sbci	r19, 0x00	; 0
    1ca0:	40 40       	sbci	r20, 0x00	; 0
    1ca2:	50 40       	sbci	r21, 0x00	; 0
    1ca4:	2e 21       	and	r18, r14
    1ca6:	3f 21       	and	r19, r15
    1ca8:	40 23       	and	r20, r16
    1caa:	51 23       	and	r21, r17
    1cac:	21 15       	cp	r18, r1
    1cae:	31 05       	cpc	r19, r1
    1cb0:	41 05       	cpc	r20, r1
    1cb2:	51 05       	cpc	r21, r1
    1cb4:	21 f0       	breq	.+8      	; 0x1cbe <_fpadd_parts+0x10c>
    1cb6:	21 e0       	ldi	r18, 0x01	; 1
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	50 e0       	ldi	r21, 0x00	; 0
    1cbe:	79 01       	movw	r14, r18
    1cc0:	8a 01       	movw	r16, r20
    1cc2:	e6 28       	or	r14, r6
    1cc4:	f7 28       	or	r15, r7
    1cc6:	08 29       	or	r16, r8
    1cc8:	19 29       	or	r17, r9
    1cca:	3c c0       	rjmp	.+120    	; 0x1d44 <_fpadd_parts+0x192>
    1ccc:	23 2b       	or	r18, r19
    1cce:	d1 f1       	breq	.+116    	; 0x1d44 <_fpadd_parts+0x192>
    1cd0:	26 0e       	add	r2, r22
    1cd2:	37 1e       	adc	r3, r23
    1cd4:	35 01       	movw	r6, r10
    1cd6:	46 01       	movw	r8, r12
    1cd8:	06 2e       	mov	r0, r22
    1cda:	04 c0       	rjmp	.+8      	; 0x1ce4 <_fpadd_parts+0x132>
    1cdc:	96 94       	lsr	r9
    1cde:	87 94       	ror	r8
    1ce0:	77 94       	ror	r7
    1ce2:	67 94       	ror	r6
    1ce4:	0a 94       	dec	r0
    1ce6:	d2 f7       	brpl	.-12     	; 0x1cdc <_fpadd_parts+0x12a>
    1ce8:	21 e0       	ldi	r18, 0x01	; 1
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e0       	ldi	r20, 0x00	; 0
    1cee:	50 e0       	ldi	r21, 0x00	; 0
    1cf0:	04 c0       	rjmp	.+8      	; 0x1cfa <_fpadd_parts+0x148>
    1cf2:	22 0f       	add	r18, r18
    1cf4:	33 1f       	adc	r19, r19
    1cf6:	44 1f       	adc	r20, r20
    1cf8:	55 1f       	adc	r21, r21
    1cfa:	6a 95       	dec	r22
    1cfc:	d2 f7       	brpl	.-12     	; 0x1cf2 <_fpadd_parts+0x140>
    1cfe:	21 50       	subi	r18, 0x01	; 1
    1d00:	30 40       	sbci	r19, 0x00	; 0
    1d02:	40 40       	sbci	r20, 0x00	; 0
    1d04:	50 40       	sbci	r21, 0x00	; 0
    1d06:	2a 21       	and	r18, r10
    1d08:	3b 21       	and	r19, r11
    1d0a:	4c 21       	and	r20, r12
    1d0c:	5d 21       	and	r21, r13
    1d0e:	21 15       	cp	r18, r1
    1d10:	31 05       	cpc	r19, r1
    1d12:	41 05       	cpc	r20, r1
    1d14:	51 05       	cpc	r21, r1
    1d16:	21 f0       	breq	.+8      	; 0x1d20 <_fpadd_parts+0x16e>
    1d18:	21 e0       	ldi	r18, 0x01	; 1
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e0       	ldi	r20, 0x00	; 0
    1d1e:	50 e0       	ldi	r21, 0x00	; 0
    1d20:	59 01       	movw	r10, r18
    1d22:	6a 01       	movw	r12, r20
    1d24:	a6 28       	or	r10, r6
    1d26:	b7 28       	or	r11, r7
    1d28:	c8 28       	or	r12, r8
    1d2a:	d9 28       	or	r13, r9
    1d2c:	0b c0       	rjmp	.+22     	; 0x1d44 <_fpadd_parts+0x192>
    1d2e:	82 15       	cp	r24, r2
    1d30:	93 05       	cpc	r25, r3
    1d32:	2c f0       	brlt	.+10     	; 0x1d3e <_fpadd_parts+0x18c>
    1d34:	1c 01       	movw	r2, r24
    1d36:	aa 24       	eor	r10, r10
    1d38:	bb 24       	eor	r11, r11
    1d3a:	65 01       	movw	r12, r10
    1d3c:	03 c0       	rjmp	.+6      	; 0x1d44 <_fpadd_parts+0x192>
    1d3e:	ee 24       	eor	r14, r14
    1d40:	ff 24       	eor	r15, r15
    1d42:	87 01       	movw	r16, r14
    1d44:	11 96       	adiw	r26, 0x01	; 1
    1d46:	9c 91       	ld	r25, X
    1d48:	d2 01       	movw	r26, r4
    1d4a:	11 96       	adiw	r26, 0x01	; 1
    1d4c:	8c 91       	ld	r24, X
    1d4e:	98 17       	cp	r25, r24
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <_fpadd_parts+0x1a2>
    1d52:	45 c0       	rjmp	.+138    	; 0x1dde <_fpadd_parts+0x22c>
    1d54:	99 23       	and	r25, r25
    1d56:	39 f0       	breq	.+14     	; 0x1d66 <_fpadd_parts+0x1b4>
    1d58:	a8 01       	movw	r20, r16
    1d5a:	97 01       	movw	r18, r14
    1d5c:	2a 19       	sub	r18, r10
    1d5e:	3b 09       	sbc	r19, r11
    1d60:	4c 09       	sbc	r20, r12
    1d62:	5d 09       	sbc	r21, r13
    1d64:	06 c0       	rjmp	.+12     	; 0x1d72 <_fpadd_parts+0x1c0>
    1d66:	a6 01       	movw	r20, r12
    1d68:	95 01       	movw	r18, r10
    1d6a:	2e 19       	sub	r18, r14
    1d6c:	3f 09       	sbc	r19, r15
    1d6e:	40 0b       	sbc	r20, r16
    1d70:	51 0b       	sbc	r21, r17
    1d72:	57 fd       	sbrc	r21, 7
    1d74:	08 c0       	rjmp	.+16     	; 0x1d86 <_fpadd_parts+0x1d4>
    1d76:	11 82       	std	Z+1, r1	; 0x01
    1d78:	33 82       	std	Z+3, r3	; 0x03
    1d7a:	22 82       	std	Z+2, r2	; 0x02
    1d7c:	24 83       	std	Z+4, r18	; 0x04
    1d7e:	35 83       	std	Z+5, r19	; 0x05
    1d80:	46 83       	std	Z+6, r20	; 0x06
    1d82:	57 83       	std	Z+7, r21	; 0x07
    1d84:	1d c0       	rjmp	.+58     	; 0x1dc0 <_fpadd_parts+0x20e>
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	81 83       	std	Z+1, r24	; 0x01
    1d8a:	33 82       	std	Z+3, r3	; 0x03
    1d8c:	22 82       	std	Z+2, r2	; 0x02
    1d8e:	88 27       	eor	r24, r24
    1d90:	99 27       	eor	r25, r25
    1d92:	dc 01       	movw	r26, r24
    1d94:	82 1b       	sub	r24, r18
    1d96:	93 0b       	sbc	r25, r19
    1d98:	a4 0b       	sbc	r26, r20
    1d9a:	b5 0b       	sbc	r27, r21
    1d9c:	84 83       	std	Z+4, r24	; 0x04
    1d9e:	95 83       	std	Z+5, r25	; 0x05
    1da0:	a6 83       	std	Z+6, r26	; 0x06
    1da2:	b7 83       	std	Z+7, r27	; 0x07
    1da4:	0d c0       	rjmp	.+26     	; 0x1dc0 <_fpadd_parts+0x20e>
    1da6:	22 0f       	add	r18, r18
    1da8:	33 1f       	adc	r19, r19
    1daa:	44 1f       	adc	r20, r20
    1dac:	55 1f       	adc	r21, r21
    1dae:	24 83       	std	Z+4, r18	; 0x04
    1db0:	35 83       	std	Z+5, r19	; 0x05
    1db2:	46 83       	std	Z+6, r20	; 0x06
    1db4:	57 83       	std	Z+7, r21	; 0x07
    1db6:	82 81       	ldd	r24, Z+2	; 0x02
    1db8:	93 81       	ldd	r25, Z+3	; 0x03
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	93 83       	std	Z+3, r25	; 0x03
    1dbe:	82 83       	std	Z+2, r24	; 0x02
    1dc0:	24 81       	ldd	r18, Z+4	; 0x04
    1dc2:	35 81       	ldd	r19, Z+5	; 0x05
    1dc4:	46 81       	ldd	r20, Z+6	; 0x06
    1dc6:	57 81       	ldd	r21, Z+7	; 0x07
    1dc8:	da 01       	movw	r26, r20
    1dca:	c9 01       	movw	r24, r18
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	a1 09       	sbc	r26, r1
    1dd0:	b1 09       	sbc	r27, r1
    1dd2:	8f 5f       	subi	r24, 0xFF	; 255
    1dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd6:	af 4f       	sbci	r26, 0xFF	; 255
    1dd8:	bf 43       	sbci	r27, 0x3F	; 63
    1dda:	28 f3       	brcs	.-54     	; 0x1da6 <_fpadd_parts+0x1f4>
    1ddc:	0b c0       	rjmp	.+22     	; 0x1df4 <_fpadd_parts+0x242>
    1dde:	91 83       	std	Z+1, r25	; 0x01
    1de0:	33 82       	std	Z+3, r3	; 0x03
    1de2:	22 82       	std	Z+2, r2	; 0x02
    1de4:	ea 0c       	add	r14, r10
    1de6:	fb 1c       	adc	r15, r11
    1de8:	0c 1d       	adc	r16, r12
    1dea:	1d 1d       	adc	r17, r13
    1dec:	e4 82       	std	Z+4, r14	; 0x04
    1dee:	f5 82       	std	Z+5, r15	; 0x05
    1df0:	06 83       	std	Z+6, r16	; 0x06
    1df2:	17 83       	std	Z+7, r17	; 0x07
    1df4:	83 e0       	ldi	r24, 0x03	; 3
    1df6:	80 83       	st	Z, r24
    1df8:	24 81       	ldd	r18, Z+4	; 0x04
    1dfa:	35 81       	ldd	r19, Z+5	; 0x05
    1dfc:	46 81       	ldd	r20, Z+6	; 0x06
    1dfe:	57 81       	ldd	r21, Z+7	; 0x07
    1e00:	57 ff       	sbrs	r21, 7
    1e02:	1a c0       	rjmp	.+52     	; 0x1e38 <_fpadd_parts+0x286>
    1e04:	c9 01       	movw	r24, r18
    1e06:	aa 27       	eor	r26, r26
    1e08:	97 fd       	sbrc	r25, 7
    1e0a:	a0 95       	com	r26
    1e0c:	ba 2f       	mov	r27, r26
    1e0e:	81 70       	andi	r24, 0x01	; 1
    1e10:	90 70       	andi	r25, 0x00	; 0
    1e12:	a0 70       	andi	r26, 0x00	; 0
    1e14:	b0 70       	andi	r27, 0x00	; 0
    1e16:	56 95       	lsr	r21
    1e18:	47 95       	ror	r20
    1e1a:	37 95       	ror	r19
    1e1c:	27 95       	ror	r18
    1e1e:	82 2b       	or	r24, r18
    1e20:	93 2b       	or	r25, r19
    1e22:	a4 2b       	or	r26, r20
    1e24:	b5 2b       	or	r27, r21
    1e26:	84 83       	std	Z+4, r24	; 0x04
    1e28:	95 83       	std	Z+5, r25	; 0x05
    1e2a:	a6 83       	std	Z+6, r26	; 0x06
    1e2c:	b7 83       	std	Z+7, r27	; 0x07
    1e2e:	82 81       	ldd	r24, Z+2	; 0x02
    1e30:	93 81       	ldd	r25, Z+3	; 0x03
    1e32:	01 96       	adiw	r24, 0x01	; 1
    1e34:	93 83       	std	Z+3, r25	; 0x03
    1e36:	82 83       	std	Z+2, r24	; 0x02
    1e38:	df 01       	movw	r26, r30
    1e3a:	01 c0       	rjmp	.+2      	; 0x1e3e <_fpadd_parts+0x28c>
    1e3c:	d2 01       	movw	r26, r4
    1e3e:	cd 01       	movw	r24, r26
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	e2 e1       	ldi	r30, 0x12	; 18
    1e46:	0c 94 bc 33 	jmp	0x6778	; 0x6778 <__epilogue_restores__>

00001e4a <__subsf3>:
    1e4a:	a0 e2       	ldi	r26, 0x20	; 32
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	eb e2       	ldi	r30, 0x2B	; 43
    1e50:	ff e0       	ldi	r31, 0x0F	; 15
    1e52:	0c 94 ac 33 	jmp	0x6758	; 0x6758 <__prologue_saves__+0x18>
    1e56:	69 83       	std	Y+1, r22	; 0x01
    1e58:	7a 83       	std	Y+2, r23	; 0x02
    1e5a:	8b 83       	std	Y+3, r24	; 0x03
    1e5c:	9c 83       	std	Y+4, r25	; 0x04
    1e5e:	2d 83       	std	Y+5, r18	; 0x05
    1e60:	3e 83       	std	Y+6, r19	; 0x06
    1e62:	4f 83       	std	Y+7, r20	; 0x07
    1e64:	58 87       	std	Y+8, r21	; 0x08
    1e66:	e9 e0       	ldi	r30, 0x09	; 9
    1e68:	ee 2e       	mov	r14, r30
    1e6a:	f1 2c       	mov	r15, r1
    1e6c:	ec 0e       	add	r14, r28
    1e6e:	fd 1e       	adc	r15, r29
    1e70:	ce 01       	movw	r24, r28
    1e72:	01 96       	adiw	r24, 0x01	; 1
    1e74:	b7 01       	movw	r22, r14
    1e76:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__unpack_f>
    1e7a:	8e 01       	movw	r16, r28
    1e7c:	0f 5e       	subi	r16, 0xEF	; 239
    1e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e80:	ce 01       	movw	r24, r28
    1e82:	05 96       	adiw	r24, 0x05	; 5
    1e84:	b8 01       	movw	r22, r16
    1e86:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__unpack_f>
    1e8a:	8a 89       	ldd	r24, Y+18	; 0x12
    1e8c:	91 e0       	ldi	r25, 0x01	; 1
    1e8e:	89 27       	eor	r24, r25
    1e90:	8a 8b       	std	Y+18, r24	; 0x12
    1e92:	c7 01       	movw	r24, r14
    1e94:	b8 01       	movw	r22, r16
    1e96:	ae 01       	movw	r20, r28
    1e98:	47 5e       	subi	r20, 0xE7	; 231
    1e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e9c:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_fpadd_parts>
    1ea0:	0e 94 0d 12 	call	0x241a	; 0x241a <__pack_f>
    1ea4:	a0 96       	adiw	r28, 0x20	; 32
    1ea6:	e6 e0       	ldi	r30, 0x06	; 6
    1ea8:	0c 94 c8 33 	jmp	0x6790	; 0x6790 <__epilogue_restores__+0x18>

00001eac <__addsf3>:
    1eac:	a0 e2       	ldi	r26, 0x20	; 32
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	ec e5       	ldi	r30, 0x5C	; 92
    1eb2:	ff e0       	ldi	r31, 0x0F	; 15
    1eb4:	0c 94 ac 33 	jmp	0x6758	; 0x6758 <__prologue_saves__+0x18>
    1eb8:	69 83       	std	Y+1, r22	; 0x01
    1eba:	7a 83       	std	Y+2, r23	; 0x02
    1ebc:	8b 83       	std	Y+3, r24	; 0x03
    1ebe:	9c 83       	std	Y+4, r25	; 0x04
    1ec0:	2d 83       	std	Y+5, r18	; 0x05
    1ec2:	3e 83       	std	Y+6, r19	; 0x06
    1ec4:	4f 83       	std	Y+7, r20	; 0x07
    1ec6:	58 87       	std	Y+8, r21	; 0x08
    1ec8:	f9 e0       	ldi	r31, 0x09	; 9
    1eca:	ef 2e       	mov	r14, r31
    1ecc:	f1 2c       	mov	r15, r1
    1ece:	ec 0e       	add	r14, r28
    1ed0:	fd 1e       	adc	r15, r29
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	01 96       	adiw	r24, 0x01	; 1
    1ed6:	b7 01       	movw	r22, r14
    1ed8:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__unpack_f>
    1edc:	8e 01       	movw	r16, r28
    1ede:	0f 5e       	subi	r16, 0xEF	; 239
    1ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	05 96       	adiw	r24, 0x05	; 5
    1ee6:	b8 01       	movw	r22, r16
    1ee8:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__unpack_f>
    1eec:	c7 01       	movw	r24, r14
    1eee:	b8 01       	movw	r22, r16
    1ef0:	ae 01       	movw	r20, r28
    1ef2:	47 5e       	subi	r20, 0xE7	; 231
    1ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef6:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_fpadd_parts>
    1efa:	0e 94 0d 12 	call	0x241a	; 0x241a <__pack_f>
    1efe:	a0 96       	adiw	r28, 0x20	; 32
    1f00:	e6 e0       	ldi	r30, 0x06	; 6
    1f02:	0c 94 c8 33 	jmp	0x6790	; 0x6790 <__epilogue_restores__+0x18>

00001f06 <__mulsf3>:
    1f06:	a0 e2       	ldi	r26, 0x20	; 32
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e9 e8       	ldi	r30, 0x89	; 137
    1f0c:	ff e0       	ldi	r31, 0x0F	; 15
    1f0e:	0c 94 a0 33 	jmp	0x6740	; 0x6740 <__prologue_saves__>
    1f12:	69 83       	std	Y+1, r22	; 0x01
    1f14:	7a 83       	std	Y+2, r23	; 0x02
    1f16:	8b 83       	std	Y+3, r24	; 0x03
    1f18:	9c 83       	std	Y+4, r25	; 0x04
    1f1a:	2d 83       	std	Y+5, r18	; 0x05
    1f1c:	3e 83       	std	Y+6, r19	; 0x06
    1f1e:	4f 83       	std	Y+7, r20	; 0x07
    1f20:	58 87       	std	Y+8, r21	; 0x08
    1f22:	ce 01       	movw	r24, r28
    1f24:	01 96       	adiw	r24, 0x01	; 1
    1f26:	be 01       	movw	r22, r28
    1f28:	67 5f       	subi	r22, 0xF7	; 247
    1f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2c:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__unpack_f>
    1f30:	ce 01       	movw	r24, r28
    1f32:	05 96       	adiw	r24, 0x05	; 5
    1f34:	be 01       	movw	r22, r28
    1f36:	6f 5e       	subi	r22, 0xEF	; 239
    1f38:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3a:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__unpack_f>
    1f3e:	99 85       	ldd	r25, Y+9	; 0x09
    1f40:	92 30       	cpi	r25, 0x02	; 2
    1f42:	88 f0       	brcs	.+34     	; 0x1f66 <__mulsf3+0x60>
    1f44:	89 89       	ldd	r24, Y+17	; 0x11
    1f46:	82 30       	cpi	r24, 0x02	; 2
    1f48:	c8 f0       	brcs	.+50     	; 0x1f7c <__mulsf3+0x76>
    1f4a:	94 30       	cpi	r25, 0x04	; 4
    1f4c:	19 f4       	brne	.+6      	; 0x1f54 <__mulsf3+0x4e>
    1f4e:	82 30       	cpi	r24, 0x02	; 2
    1f50:	51 f4       	brne	.+20     	; 0x1f66 <__mulsf3+0x60>
    1f52:	04 c0       	rjmp	.+8      	; 0x1f5c <__mulsf3+0x56>
    1f54:	84 30       	cpi	r24, 0x04	; 4
    1f56:	29 f4       	brne	.+10     	; 0x1f62 <__mulsf3+0x5c>
    1f58:	92 30       	cpi	r25, 0x02	; 2
    1f5a:	81 f4       	brne	.+32     	; 0x1f7c <__mulsf3+0x76>
    1f5c:	8d e6       	ldi	r24, 0x6D	; 109
    1f5e:	91 e0       	ldi	r25, 0x01	; 1
    1f60:	c6 c0       	rjmp	.+396    	; 0x20ee <__mulsf3+0x1e8>
    1f62:	92 30       	cpi	r25, 0x02	; 2
    1f64:	49 f4       	brne	.+18     	; 0x1f78 <__mulsf3+0x72>
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6a:	8a 89       	ldd	r24, Y+18	; 0x12
    1f6c:	98 13       	cpse	r25, r24
    1f6e:	21 e0       	ldi	r18, 0x01	; 1
    1f70:	2a 87       	std	Y+10, r18	; 0x0a
    1f72:	ce 01       	movw	r24, r28
    1f74:	09 96       	adiw	r24, 0x09	; 9
    1f76:	bb c0       	rjmp	.+374    	; 0x20ee <__mulsf3+0x1e8>
    1f78:	82 30       	cpi	r24, 0x02	; 2
    1f7a:	49 f4       	brne	.+18     	; 0x1f8e <__mulsf3+0x88>
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f80:	8a 89       	ldd	r24, Y+18	; 0x12
    1f82:	98 13       	cpse	r25, r24
    1f84:	21 e0       	ldi	r18, 0x01	; 1
    1f86:	2a 8b       	std	Y+18, r18	; 0x12
    1f88:	ce 01       	movw	r24, r28
    1f8a:	41 96       	adiw	r24, 0x11	; 17
    1f8c:	b0 c0       	rjmp	.+352    	; 0x20ee <__mulsf3+0x1e8>
    1f8e:	2d 84       	ldd	r2, Y+13	; 0x0d
    1f90:	3e 84       	ldd	r3, Y+14	; 0x0e
    1f92:	4f 84       	ldd	r4, Y+15	; 0x0f
    1f94:	58 88       	ldd	r5, Y+16	; 0x10
    1f96:	6d 88       	ldd	r6, Y+21	; 0x15
    1f98:	7e 88       	ldd	r7, Y+22	; 0x16
    1f9a:	8f 88       	ldd	r8, Y+23	; 0x17
    1f9c:	98 8c       	ldd	r9, Y+24	; 0x18
    1f9e:	ee 24       	eor	r14, r14
    1fa0:	ff 24       	eor	r15, r15
    1fa2:	87 01       	movw	r16, r14
    1fa4:	aa 24       	eor	r10, r10
    1fa6:	bb 24       	eor	r11, r11
    1fa8:	65 01       	movw	r12, r10
    1faa:	40 e0       	ldi	r20, 0x00	; 0
    1fac:	50 e0       	ldi	r21, 0x00	; 0
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	70 e0       	ldi	r23, 0x00	; 0
    1fb2:	e0 e0       	ldi	r30, 0x00	; 0
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	c1 01       	movw	r24, r2
    1fb8:	81 70       	andi	r24, 0x01	; 1
    1fba:	90 70       	andi	r25, 0x00	; 0
    1fbc:	89 2b       	or	r24, r25
    1fbe:	e9 f0       	breq	.+58     	; 0x1ffa <__mulsf3+0xf4>
    1fc0:	e6 0c       	add	r14, r6
    1fc2:	f7 1c       	adc	r15, r7
    1fc4:	08 1d       	adc	r16, r8
    1fc6:	19 1d       	adc	r17, r9
    1fc8:	9a 01       	movw	r18, r20
    1fca:	ab 01       	movw	r20, r22
    1fcc:	2a 0d       	add	r18, r10
    1fce:	3b 1d       	adc	r19, r11
    1fd0:	4c 1d       	adc	r20, r12
    1fd2:	5d 1d       	adc	r21, r13
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	a0 e0       	ldi	r26, 0x00	; 0
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e6 14       	cp	r14, r6
    1fde:	f7 04       	cpc	r15, r7
    1fe0:	08 05       	cpc	r16, r8
    1fe2:	19 05       	cpc	r17, r9
    1fe4:	20 f4       	brcc	.+8      	; 0x1fee <__mulsf3+0xe8>
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	a0 e0       	ldi	r26, 0x00	; 0
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	ba 01       	movw	r22, r20
    1ff0:	a9 01       	movw	r20, r18
    1ff2:	48 0f       	add	r20, r24
    1ff4:	59 1f       	adc	r21, r25
    1ff6:	6a 1f       	adc	r22, r26
    1ff8:	7b 1f       	adc	r23, r27
    1ffa:	aa 0c       	add	r10, r10
    1ffc:	bb 1c       	adc	r11, r11
    1ffe:	cc 1c       	adc	r12, r12
    2000:	dd 1c       	adc	r13, r13
    2002:	97 fe       	sbrs	r9, 7
    2004:	08 c0       	rjmp	.+16     	; 0x2016 <__mulsf3+0x110>
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	a0 e0       	ldi	r26, 0x00	; 0
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	a8 2a       	or	r10, r24
    2010:	b9 2a       	or	r11, r25
    2012:	ca 2a       	or	r12, r26
    2014:	db 2a       	or	r13, r27
    2016:	31 96       	adiw	r30, 0x01	; 1
    2018:	e0 32       	cpi	r30, 0x20	; 32
    201a:	f1 05       	cpc	r31, r1
    201c:	49 f0       	breq	.+18     	; 0x2030 <__mulsf3+0x12a>
    201e:	66 0c       	add	r6, r6
    2020:	77 1c       	adc	r7, r7
    2022:	88 1c       	adc	r8, r8
    2024:	99 1c       	adc	r9, r9
    2026:	56 94       	lsr	r5
    2028:	47 94       	ror	r4
    202a:	37 94       	ror	r3
    202c:	27 94       	ror	r2
    202e:	c3 cf       	rjmp	.-122    	; 0x1fb6 <__mulsf3+0xb0>
    2030:	fa 85       	ldd	r31, Y+10	; 0x0a
    2032:	ea 89       	ldd	r30, Y+18	; 0x12
    2034:	2b 89       	ldd	r18, Y+19	; 0x13
    2036:	3c 89       	ldd	r19, Y+20	; 0x14
    2038:	8b 85       	ldd	r24, Y+11	; 0x0b
    203a:	9c 85       	ldd	r25, Y+12	; 0x0c
    203c:	28 0f       	add	r18, r24
    203e:	39 1f       	adc	r19, r25
    2040:	2e 5f       	subi	r18, 0xFE	; 254
    2042:	3f 4f       	sbci	r19, 0xFF	; 255
    2044:	17 c0       	rjmp	.+46     	; 0x2074 <__mulsf3+0x16e>
    2046:	ca 01       	movw	r24, r20
    2048:	81 70       	andi	r24, 0x01	; 1
    204a:	90 70       	andi	r25, 0x00	; 0
    204c:	89 2b       	or	r24, r25
    204e:	61 f0       	breq	.+24     	; 0x2068 <__mulsf3+0x162>
    2050:	16 95       	lsr	r17
    2052:	07 95       	ror	r16
    2054:	f7 94       	ror	r15
    2056:	e7 94       	ror	r14
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a0 e0       	ldi	r26, 0x00	; 0
    205e:	b0 e8       	ldi	r27, 0x80	; 128
    2060:	e8 2a       	or	r14, r24
    2062:	f9 2a       	or	r15, r25
    2064:	0a 2b       	or	r16, r26
    2066:	1b 2b       	or	r17, r27
    2068:	76 95       	lsr	r23
    206a:	67 95       	ror	r22
    206c:	57 95       	ror	r21
    206e:	47 95       	ror	r20
    2070:	2f 5f       	subi	r18, 0xFF	; 255
    2072:	3f 4f       	sbci	r19, 0xFF	; 255
    2074:	77 fd       	sbrc	r23, 7
    2076:	e7 cf       	rjmp	.-50     	; 0x2046 <__mulsf3+0x140>
    2078:	0c c0       	rjmp	.+24     	; 0x2092 <__mulsf3+0x18c>
    207a:	44 0f       	add	r20, r20
    207c:	55 1f       	adc	r21, r21
    207e:	66 1f       	adc	r22, r22
    2080:	77 1f       	adc	r23, r23
    2082:	17 fd       	sbrc	r17, 7
    2084:	41 60       	ori	r20, 0x01	; 1
    2086:	ee 0c       	add	r14, r14
    2088:	ff 1c       	adc	r15, r15
    208a:	00 1f       	adc	r16, r16
    208c:	11 1f       	adc	r17, r17
    208e:	21 50       	subi	r18, 0x01	; 1
    2090:	30 40       	sbci	r19, 0x00	; 0
    2092:	40 30       	cpi	r20, 0x00	; 0
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	59 07       	cpc	r21, r25
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	69 07       	cpc	r22, r25
    209c:	90 e4       	ldi	r25, 0x40	; 64
    209e:	79 07       	cpc	r23, r25
    20a0:	60 f3       	brcs	.-40     	; 0x207a <__mulsf3+0x174>
    20a2:	2b 8f       	std	Y+27, r18	; 0x1b
    20a4:	3c 8f       	std	Y+28, r19	; 0x1c
    20a6:	db 01       	movw	r26, r22
    20a8:	ca 01       	movw	r24, r20
    20aa:	8f 77       	andi	r24, 0x7F	; 127
    20ac:	90 70       	andi	r25, 0x00	; 0
    20ae:	a0 70       	andi	r26, 0x00	; 0
    20b0:	b0 70       	andi	r27, 0x00	; 0
    20b2:	80 34       	cpi	r24, 0x40	; 64
    20b4:	91 05       	cpc	r25, r1
    20b6:	a1 05       	cpc	r26, r1
    20b8:	b1 05       	cpc	r27, r1
    20ba:	61 f4       	brne	.+24     	; 0x20d4 <__mulsf3+0x1ce>
    20bc:	47 fd       	sbrc	r20, 7
    20be:	0a c0       	rjmp	.+20     	; 0x20d4 <__mulsf3+0x1ce>
    20c0:	e1 14       	cp	r14, r1
    20c2:	f1 04       	cpc	r15, r1
    20c4:	01 05       	cpc	r16, r1
    20c6:	11 05       	cpc	r17, r1
    20c8:	29 f0       	breq	.+10     	; 0x20d4 <__mulsf3+0x1ce>
    20ca:	40 5c       	subi	r20, 0xC0	; 192
    20cc:	5f 4f       	sbci	r21, 0xFF	; 255
    20ce:	6f 4f       	sbci	r22, 0xFF	; 255
    20d0:	7f 4f       	sbci	r23, 0xFF	; 255
    20d2:	40 78       	andi	r20, 0x80	; 128
    20d4:	1a 8e       	std	Y+26, r1	; 0x1a
    20d6:	fe 17       	cp	r31, r30
    20d8:	11 f0       	breq	.+4      	; 0x20de <__mulsf3+0x1d8>
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	8a 8f       	std	Y+26, r24	; 0x1a
    20de:	4d 8f       	std	Y+29, r20	; 0x1d
    20e0:	5e 8f       	std	Y+30, r21	; 0x1e
    20e2:	6f 8f       	std	Y+31, r22	; 0x1f
    20e4:	78 a3       	std	Y+32, r23	; 0x20
    20e6:	83 e0       	ldi	r24, 0x03	; 3
    20e8:	89 8f       	std	Y+25, r24	; 0x19
    20ea:	ce 01       	movw	r24, r28
    20ec:	49 96       	adiw	r24, 0x19	; 25
    20ee:	0e 94 0d 12 	call	0x241a	; 0x241a <__pack_f>
    20f2:	a0 96       	adiw	r28, 0x20	; 32
    20f4:	e2 e1       	ldi	r30, 0x12	; 18
    20f6:	0c 94 bc 33 	jmp	0x6778	; 0x6778 <__epilogue_restores__>

000020fa <__divsf3>:
    20fa:	a8 e1       	ldi	r26, 0x18	; 24
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e3 e8       	ldi	r30, 0x83	; 131
    2100:	f0 e1       	ldi	r31, 0x10	; 16
    2102:	0c 94 a8 33 	jmp	0x6750	; 0x6750 <__prologue_saves__+0x10>
    2106:	69 83       	std	Y+1, r22	; 0x01
    2108:	7a 83       	std	Y+2, r23	; 0x02
    210a:	8b 83       	std	Y+3, r24	; 0x03
    210c:	9c 83       	std	Y+4, r25	; 0x04
    210e:	2d 83       	std	Y+5, r18	; 0x05
    2110:	3e 83       	std	Y+6, r19	; 0x06
    2112:	4f 83       	std	Y+7, r20	; 0x07
    2114:	58 87       	std	Y+8, r21	; 0x08
    2116:	b9 e0       	ldi	r27, 0x09	; 9
    2118:	eb 2e       	mov	r14, r27
    211a:	f1 2c       	mov	r15, r1
    211c:	ec 0e       	add	r14, r28
    211e:	fd 1e       	adc	r15, r29
    2120:	ce 01       	movw	r24, r28
    2122:	01 96       	adiw	r24, 0x01	; 1
    2124:	b7 01       	movw	r22, r14
    2126:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__unpack_f>
    212a:	8e 01       	movw	r16, r28
    212c:	0f 5e       	subi	r16, 0xEF	; 239
    212e:	1f 4f       	sbci	r17, 0xFF	; 255
    2130:	ce 01       	movw	r24, r28
    2132:	05 96       	adiw	r24, 0x05	; 5
    2134:	b8 01       	movw	r22, r16
    2136:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__unpack_f>
    213a:	29 85       	ldd	r18, Y+9	; 0x09
    213c:	22 30       	cpi	r18, 0x02	; 2
    213e:	08 f4       	brcc	.+2      	; 0x2142 <__divsf3+0x48>
    2140:	7e c0       	rjmp	.+252    	; 0x223e <__divsf3+0x144>
    2142:	39 89       	ldd	r19, Y+17	; 0x11
    2144:	32 30       	cpi	r19, 0x02	; 2
    2146:	10 f4       	brcc	.+4      	; 0x214c <__divsf3+0x52>
    2148:	b8 01       	movw	r22, r16
    214a:	7c c0       	rjmp	.+248    	; 0x2244 <__divsf3+0x14a>
    214c:	8a 85       	ldd	r24, Y+10	; 0x0a
    214e:	9a 89       	ldd	r25, Y+18	; 0x12
    2150:	89 27       	eor	r24, r25
    2152:	8a 87       	std	Y+10, r24	; 0x0a
    2154:	24 30       	cpi	r18, 0x04	; 4
    2156:	11 f0       	breq	.+4      	; 0x215c <__divsf3+0x62>
    2158:	22 30       	cpi	r18, 0x02	; 2
    215a:	31 f4       	brne	.+12     	; 0x2168 <__divsf3+0x6e>
    215c:	23 17       	cp	r18, r19
    215e:	09 f0       	breq	.+2      	; 0x2162 <__divsf3+0x68>
    2160:	6e c0       	rjmp	.+220    	; 0x223e <__divsf3+0x144>
    2162:	6d e6       	ldi	r22, 0x6D	; 109
    2164:	71 e0       	ldi	r23, 0x01	; 1
    2166:	6e c0       	rjmp	.+220    	; 0x2244 <__divsf3+0x14a>
    2168:	34 30       	cpi	r19, 0x04	; 4
    216a:	39 f4       	brne	.+14     	; 0x217a <__divsf3+0x80>
    216c:	1d 86       	std	Y+13, r1	; 0x0d
    216e:	1e 86       	std	Y+14, r1	; 0x0e
    2170:	1f 86       	std	Y+15, r1	; 0x0f
    2172:	18 8a       	std	Y+16, r1	; 0x10
    2174:	1c 86       	std	Y+12, r1	; 0x0c
    2176:	1b 86       	std	Y+11, r1	; 0x0b
    2178:	04 c0       	rjmp	.+8      	; 0x2182 <__divsf3+0x88>
    217a:	32 30       	cpi	r19, 0x02	; 2
    217c:	21 f4       	brne	.+8      	; 0x2186 <__divsf3+0x8c>
    217e:	84 e0       	ldi	r24, 0x04	; 4
    2180:	89 87       	std	Y+9, r24	; 0x09
    2182:	b7 01       	movw	r22, r14
    2184:	5f c0       	rjmp	.+190    	; 0x2244 <__divsf3+0x14a>
    2186:	2b 85       	ldd	r18, Y+11	; 0x0b
    2188:	3c 85       	ldd	r19, Y+12	; 0x0c
    218a:	8b 89       	ldd	r24, Y+19	; 0x13
    218c:	9c 89       	ldd	r25, Y+20	; 0x14
    218e:	28 1b       	sub	r18, r24
    2190:	39 0b       	sbc	r19, r25
    2192:	3c 87       	std	Y+12, r19	; 0x0c
    2194:	2b 87       	std	Y+11, r18	; 0x0b
    2196:	ed 84       	ldd	r14, Y+13	; 0x0d
    2198:	fe 84       	ldd	r15, Y+14	; 0x0e
    219a:	0f 85       	ldd	r16, Y+15	; 0x0f
    219c:	18 89       	ldd	r17, Y+16	; 0x10
    219e:	ad 88       	ldd	r10, Y+21	; 0x15
    21a0:	be 88       	ldd	r11, Y+22	; 0x16
    21a2:	cf 88       	ldd	r12, Y+23	; 0x17
    21a4:	d8 8c       	ldd	r13, Y+24	; 0x18
    21a6:	ea 14       	cp	r14, r10
    21a8:	fb 04       	cpc	r15, r11
    21aa:	0c 05       	cpc	r16, r12
    21ac:	1d 05       	cpc	r17, r13
    21ae:	40 f4       	brcc	.+16     	; 0x21c0 <__divsf3+0xc6>
    21b0:	ee 0c       	add	r14, r14
    21b2:	ff 1c       	adc	r15, r15
    21b4:	00 1f       	adc	r16, r16
    21b6:	11 1f       	adc	r17, r17
    21b8:	21 50       	subi	r18, 0x01	; 1
    21ba:	30 40       	sbci	r19, 0x00	; 0
    21bc:	3c 87       	std	Y+12, r19	; 0x0c
    21be:	2b 87       	std	Y+11, r18	; 0x0b
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	40 e0       	ldi	r20, 0x00	; 0
    21c6:	50 e0       	ldi	r21, 0x00	; 0
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	a0 e0       	ldi	r26, 0x00	; 0
    21ce:	b0 e4       	ldi	r27, 0x40	; 64
    21d0:	60 e0       	ldi	r22, 0x00	; 0
    21d2:	70 e0       	ldi	r23, 0x00	; 0
    21d4:	ea 14       	cp	r14, r10
    21d6:	fb 04       	cpc	r15, r11
    21d8:	0c 05       	cpc	r16, r12
    21da:	1d 05       	cpc	r17, r13
    21dc:	40 f0       	brcs	.+16     	; 0x21ee <__divsf3+0xf4>
    21de:	28 2b       	or	r18, r24
    21e0:	39 2b       	or	r19, r25
    21e2:	4a 2b       	or	r20, r26
    21e4:	5b 2b       	or	r21, r27
    21e6:	ea 18       	sub	r14, r10
    21e8:	fb 08       	sbc	r15, r11
    21ea:	0c 09       	sbc	r16, r12
    21ec:	1d 09       	sbc	r17, r13
    21ee:	b6 95       	lsr	r27
    21f0:	a7 95       	ror	r26
    21f2:	97 95       	ror	r25
    21f4:	87 95       	ror	r24
    21f6:	ee 0c       	add	r14, r14
    21f8:	ff 1c       	adc	r15, r15
    21fa:	00 1f       	adc	r16, r16
    21fc:	11 1f       	adc	r17, r17
    21fe:	6f 5f       	subi	r22, 0xFF	; 255
    2200:	7f 4f       	sbci	r23, 0xFF	; 255
    2202:	6f 31       	cpi	r22, 0x1F	; 31
    2204:	71 05       	cpc	r23, r1
    2206:	31 f7       	brne	.-52     	; 0x21d4 <__divsf3+0xda>
    2208:	da 01       	movw	r26, r20
    220a:	c9 01       	movw	r24, r18
    220c:	8f 77       	andi	r24, 0x7F	; 127
    220e:	90 70       	andi	r25, 0x00	; 0
    2210:	a0 70       	andi	r26, 0x00	; 0
    2212:	b0 70       	andi	r27, 0x00	; 0
    2214:	80 34       	cpi	r24, 0x40	; 64
    2216:	91 05       	cpc	r25, r1
    2218:	a1 05       	cpc	r26, r1
    221a:	b1 05       	cpc	r27, r1
    221c:	61 f4       	brne	.+24     	; 0x2236 <__divsf3+0x13c>
    221e:	27 fd       	sbrc	r18, 7
    2220:	0a c0       	rjmp	.+20     	; 0x2236 <__divsf3+0x13c>
    2222:	e1 14       	cp	r14, r1
    2224:	f1 04       	cpc	r15, r1
    2226:	01 05       	cpc	r16, r1
    2228:	11 05       	cpc	r17, r1
    222a:	29 f0       	breq	.+10     	; 0x2236 <__divsf3+0x13c>
    222c:	20 5c       	subi	r18, 0xC0	; 192
    222e:	3f 4f       	sbci	r19, 0xFF	; 255
    2230:	4f 4f       	sbci	r20, 0xFF	; 255
    2232:	5f 4f       	sbci	r21, 0xFF	; 255
    2234:	20 78       	andi	r18, 0x80	; 128
    2236:	2d 87       	std	Y+13, r18	; 0x0d
    2238:	3e 87       	std	Y+14, r19	; 0x0e
    223a:	4f 87       	std	Y+15, r20	; 0x0f
    223c:	58 8b       	std	Y+16, r21	; 0x10
    223e:	be 01       	movw	r22, r28
    2240:	67 5f       	subi	r22, 0xF7	; 247
    2242:	7f 4f       	sbci	r23, 0xFF	; 255
    2244:	cb 01       	movw	r24, r22
    2246:	0e 94 0d 12 	call	0x241a	; 0x241a <__pack_f>
    224a:	68 96       	adiw	r28, 0x18	; 24
    224c:	ea e0       	ldi	r30, 0x0A	; 10
    224e:	0c 94 c4 33 	jmp	0x6788	; 0x6788 <__epilogue_restores__+0x10>

00002252 <__gtsf2>:
    2252:	a8 e1       	ldi	r26, 0x18	; 24
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	ef e2       	ldi	r30, 0x2F	; 47
    2258:	f1 e1       	ldi	r31, 0x11	; 17
    225a:	0c 94 ac 33 	jmp	0x6758	; 0x6758 <__prologue_saves__+0x18>
    225e:	69 83       	std	Y+1, r22	; 0x01
    2260:	7a 83       	std	Y+2, r23	; 0x02
    2262:	8b 83       	std	Y+3, r24	; 0x03
    2264:	9c 83       	std	Y+4, r25	; 0x04
    2266:	2d 83       	std	Y+5, r18	; 0x05
    2268:	3e 83       	std	Y+6, r19	; 0x06
    226a:	4f 83       	std	Y+7, r20	; 0x07
    226c:	58 87       	std	Y+8, r21	; 0x08
    226e:	89 e0       	ldi	r24, 0x09	; 9
    2270:	e8 2e       	mov	r14, r24
    2272:	f1 2c       	mov	r15, r1
    2274:	ec 0e       	add	r14, r28
    2276:	fd 1e       	adc	r15, r29
    2278:	ce 01       	movw	r24, r28
    227a:	01 96       	adiw	r24, 0x01	; 1
    227c:	b7 01       	movw	r22, r14
    227e:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__unpack_f>
    2282:	8e 01       	movw	r16, r28
    2284:	0f 5e       	subi	r16, 0xEF	; 239
    2286:	1f 4f       	sbci	r17, 0xFF	; 255
    2288:	ce 01       	movw	r24, r28
    228a:	05 96       	adiw	r24, 0x05	; 5
    228c:	b8 01       	movw	r22, r16
    228e:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__unpack_f>
    2292:	89 85       	ldd	r24, Y+9	; 0x09
    2294:	82 30       	cpi	r24, 0x02	; 2
    2296:	40 f0       	brcs	.+16     	; 0x22a8 <__gtsf2+0x56>
    2298:	89 89       	ldd	r24, Y+17	; 0x11
    229a:	82 30       	cpi	r24, 0x02	; 2
    229c:	28 f0       	brcs	.+10     	; 0x22a8 <__gtsf2+0x56>
    229e:	c7 01       	movw	r24, r14
    22a0:	b8 01       	movw	r22, r16
    22a2:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__fpcmp_parts_f>
    22a6:	01 c0       	rjmp	.+2      	; 0x22aa <__gtsf2+0x58>
    22a8:	8f ef       	ldi	r24, 0xFF	; 255
    22aa:	68 96       	adiw	r28, 0x18	; 24
    22ac:	e6 e0       	ldi	r30, 0x06	; 6
    22ae:	0c 94 c8 33 	jmp	0x6790	; 0x6790 <__epilogue_restores__+0x18>

000022b2 <__gesf2>:
    22b2:	a8 e1       	ldi	r26, 0x18	; 24
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	ef e5       	ldi	r30, 0x5F	; 95
    22b8:	f1 e1       	ldi	r31, 0x11	; 17
    22ba:	0c 94 ac 33 	jmp	0x6758	; 0x6758 <__prologue_saves__+0x18>
    22be:	69 83       	std	Y+1, r22	; 0x01
    22c0:	7a 83       	std	Y+2, r23	; 0x02
    22c2:	8b 83       	std	Y+3, r24	; 0x03
    22c4:	9c 83       	std	Y+4, r25	; 0x04
    22c6:	2d 83       	std	Y+5, r18	; 0x05
    22c8:	3e 83       	std	Y+6, r19	; 0x06
    22ca:	4f 83       	std	Y+7, r20	; 0x07
    22cc:	58 87       	std	Y+8, r21	; 0x08
    22ce:	89 e0       	ldi	r24, 0x09	; 9
    22d0:	e8 2e       	mov	r14, r24
    22d2:	f1 2c       	mov	r15, r1
    22d4:	ec 0e       	add	r14, r28
    22d6:	fd 1e       	adc	r15, r29
    22d8:	ce 01       	movw	r24, r28
    22da:	01 96       	adiw	r24, 0x01	; 1
    22dc:	b7 01       	movw	r22, r14
    22de:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__unpack_f>
    22e2:	8e 01       	movw	r16, r28
    22e4:	0f 5e       	subi	r16, 0xEF	; 239
    22e6:	1f 4f       	sbci	r17, 0xFF	; 255
    22e8:	ce 01       	movw	r24, r28
    22ea:	05 96       	adiw	r24, 0x05	; 5
    22ec:	b8 01       	movw	r22, r16
    22ee:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__unpack_f>
    22f2:	89 85       	ldd	r24, Y+9	; 0x09
    22f4:	82 30       	cpi	r24, 0x02	; 2
    22f6:	40 f0       	brcs	.+16     	; 0x2308 <__gesf2+0x56>
    22f8:	89 89       	ldd	r24, Y+17	; 0x11
    22fa:	82 30       	cpi	r24, 0x02	; 2
    22fc:	28 f0       	brcs	.+10     	; 0x2308 <__gesf2+0x56>
    22fe:	c7 01       	movw	r24, r14
    2300:	b8 01       	movw	r22, r16
    2302:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__fpcmp_parts_f>
    2306:	01 c0       	rjmp	.+2      	; 0x230a <__gesf2+0x58>
    2308:	8f ef       	ldi	r24, 0xFF	; 255
    230a:	68 96       	adiw	r28, 0x18	; 24
    230c:	e6 e0       	ldi	r30, 0x06	; 6
    230e:	0c 94 c8 33 	jmp	0x6790	; 0x6790 <__epilogue_restores__+0x18>

00002312 <__ltsf2>:
    2312:	a8 e1       	ldi	r26, 0x18	; 24
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	ef e8       	ldi	r30, 0x8F	; 143
    2318:	f1 e1       	ldi	r31, 0x11	; 17
    231a:	0c 94 ac 33 	jmp	0x6758	; 0x6758 <__prologue_saves__+0x18>
    231e:	69 83       	std	Y+1, r22	; 0x01
    2320:	7a 83       	std	Y+2, r23	; 0x02
    2322:	8b 83       	std	Y+3, r24	; 0x03
    2324:	9c 83       	std	Y+4, r25	; 0x04
    2326:	2d 83       	std	Y+5, r18	; 0x05
    2328:	3e 83       	std	Y+6, r19	; 0x06
    232a:	4f 83       	std	Y+7, r20	; 0x07
    232c:	58 87       	std	Y+8, r21	; 0x08
    232e:	89 e0       	ldi	r24, 0x09	; 9
    2330:	e8 2e       	mov	r14, r24
    2332:	f1 2c       	mov	r15, r1
    2334:	ec 0e       	add	r14, r28
    2336:	fd 1e       	adc	r15, r29
    2338:	ce 01       	movw	r24, r28
    233a:	01 96       	adiw	r24, 0x01	; 1
    233c:	b7 01       	movw	r22, r14
    233e:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__unpack_f>
    2342:	8e 01       	movw	r16, r28
    2344:	0f 5e       	subi	r16, 0xEF	; 239
    2346:	1f 4f       	sbci	r17, 0xFF	; 255
    2348:	ce 01       	movw	r24, r28
    234a:	05 96       	adiw	r24, 0x05	; 5
    234c:	b8 01       	movw	r22, r16
    234e:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__unpack_f>
    2352:	89 85       	ldd	r24, Y+9	; 0x09
    2354:	82 30       	cpi	r24, 0x02	; 2
    2356:	40 f0       	brcs	.+16     	; 0x2368 <__ltsf2+0x56>
    2358:	89 89       	ldd	r24, Y+17	; 0x11
    235a:	82 30       	cpi	r24, 0x02	; 2
    235c:	28 f0       	brcs	.+10     	; 0x2368 <__ltsf2+0x56>
    235e:	c7 01       	movw	r24, r14
    2360:	b8 01       	movw	r22, r16
    2362:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__fpcmp_parts_f>
    2366:	01 c0       	rjmp	.+2      	; 0x236a <__ltsf2+0x58>
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	68 96       	adiw	r28, 0x18	; 24
    236c:	e6 e0       	ldi	r30, 0x06	; 6
    236e:	0c 94 c8 33 	jmp	0x6790	; 0x6790 <__epilogue_restores__+0x18>

00002372 <__fixsfsi>:
    2372:	ac e0       	ldi	r26, 0x0C	; 12
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	ef eb       	ldi	r30, 0xBF	; 191
    2378:	f1 e1       	ldi	r31, 0x11	; 17
    237a:	0c 94 b0 33 	jmp	0x6760	; 0x6760 <__prologue_saves__+0x20>
    237e:	69 83       	std	Y+1, r22	; 0x01
    2380:	7a 83       	std	Y+2, r23	; 0x02
    2382:	8b 83       	std	Y+3, r24	; 0x03
    2384:	9c 83       	std	Y+4, r25	; 0x04
    2386:	ce 01       	movw	r24, r28
    2388:	01 96       	adiw	r24, 0x01	; 1
    238a:	be 01       	movw	r22, r28
    238c:	6b 5f       	subi	r22, 0xFB	; 251
    238e:	7f 4f       	sbci	r23, 0xFF	; 255
    2390:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__unpack_f>
    2394:	8d 81       	ldd	r24, Y+5	; 0x05
    2396:	82 30       	cpi	r24, 0x02	; 2
    2398:	61 f1       	breq	.+88     	; 0x23f2 <__fixsfsi+0x80>
    239a:	82 30       	cpi	r24, 0x02	; 2
    239c:	50 f1       	brcs	.+84     	; 0x23f2 <__fixsfsi+0x80>
    239e:	84 30       	cpi	r24, 0x04	; 4
    23a0:	21 f4       	brne	.+8      	; 0x23aa <__fixsfsi+0x38>
    23a2:	8e 81       	ldd	r24, Y+6	; 0x06
    23a4:	88 23       	and	r24, r24
    23a6:	51 f1       	breq	.+84     	; 0x23fc <__fixsfsi+0x8a>
    23a8:	2e c0       	rjmp	.+92     	; 0x2406 <__fixsfsi+0x94>
    23aa:	2f 81       	ldd	r18, Y+7	; 0x07
    23ac:	38 85       	ldd	r19, Y+8	; 0x08
    23ae:	37 fd       	sbrc	r19, 7
    23b0:	20 c0       	rjmp	.+64     	; 0x23f2 <__fixsfsi+0x80>
    23b2:	6e 81       	ldd	r22, Y+6	; 0x06
    23b4:	2f 31       	cpi	r18, 0x1F	; 31
    23b6:	31 05       	cpc	r19, r1
    23b8:	1c f0       	brlt	.+6      	; 0x23c0 <__fixsfsi+0x4e>
    23ba:	66 23       	and	r22, r22
    23bc:	f9 f0       	breq	.+62     	; 0x23fc <__fixsfsi+0x8a>
    23be:	23 c0       	rjmp	.+70     	; 0x2406 <__fixsfsi+0x94>
    23c0:	8e e1       	ldi	r24, 0x1E	; 30
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	82 1b       	sub	r24, r18
    23c6:	93 0b       	sbc	r25, r19
    23c8:	29 85       	ldd	r18, Y+9	; 0x09
    23ca:	3a 85       	ldd	r19, Y+10	; 0x0a
    23cc:	4b 85       	ldd	r20, Y+11	; 0x0b
    23ce:	5c 85       	ldd	r21, Y+12	; 0x0c
    23d0:	04 c0       	rjmp	.+8      	; 0x23da <__fixsfsi+0x68>
    23d2:	56 95       	lsr	r21
    23d4:	47 95       	ror	r20
    23d6:	37 95       	ror	r19
    23d8:	27 95       	ror	r18
    23da:	8a 95       	dec	r24
    23dc:	d2 f7       	brpl	.-12     	; 0x23d2 <__fixsfsi+0x60>
    23de:	66 23       	and	r22, r22
    23e0:	b1 f0       	breq	.+44     	; 0x240e <__fixsfsi+0x9c>
    23e2:	50 95       	com	r21
    23e4:	40 95       	com	r20
    23e6:	30 95       	com	r19
    23e8:	21 95       	neg	r18
    23ea:	3f 4f       	sbci	r19, 0xFF	; 255
    23ec:	4f 4f       	sbci	r20, 0xFF	; 255
    23ee:	5f 4f       	sbci	r21, 0xFF	; 255
    23f0:	0e c0       	rjmp	.+28     	; 0x240e <__fixsfsi+0x9c>
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	40 e0       	ldi	r20, 0x00	; 0
    23f8:	50 e0       	ldi	r21, 0x00	; 0
    23fa:	09 c0       	rjmp	.+18     	; 0x240e <__fixsfsi+0x9c>
    23fc:	2f ef       	ldi	r18, 0xFF	; 255
    23fe:	3f ef       	ldi	r19, 0xFF	; 255
    2400:	4f ef       	ldi	r20, 0xFF	; 255
    2402:	5f e7       	ldi	r21, 0x7F	; 127
    2404:	04 c0       	rjmp	.+8      	; 0x240e <__fixsfsi+0x9c>
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e0       	ldi	r20, 0x00	; 0
    240c:	50 e8       	ldi	r21, 0x80	; 128
    240e:	b9 01       	movw	r22, r18
    2410:	ca 01       	movw	r24, r20
    2412:	2c 96       	adiw	r28, 0x0c	; 12
    2414:	e2 e0       	ldi	r30, 0x02	; 2
    2416:	0c 94 cc 33 	jmp	0x6798	; 0x6798 <__epilogue_restores__+0x20>

0000241a <__pack_f>:
    241a:	df 92       	push	r13
    241c:	ef 92       	push	r14
    241e:	ff 92       	push	r15
    2420:	0f 93       	push	r16
    2422:	1f 93       	push	r17
    2424:	fc 01       	movw	r30, r24
    2426:	e4 80       	ldd	r14, Z+4	; 0x04
    2428:	f5 80       	ldd	r15, Z+5	; 0x05
    242a:	06 81       	ldd	r16, Z+6	; 0x06
    242c:	17 81       	ldd	r17, Z+7	; 0x07
    242e:	d1 80       	ldd	r13, Z+1	; 0x01
    2430:	80 81       	ld	r24, Z
    2432:	82 30       	cpi	r24, 0x02	; 2
    2434:	48 f4       	brcc	.+18     	; 0x2448 <__pack_f+0x2e>
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	a0 e1       	ldi	r26, 0x10	; 16
    243c:	b0 e0       	ldi	r27, 0x00	; 0
    243e:	e8 2a       	or	r14, r24
    2440:	f9 2a       	or	r15, r25
    2442:	0a 2b       	or	r16, r26
    2444:	1b 2b       	or	r17, r27
    2446:	a5 c0       	rjmp	.+330    	; 0x2592 <__pack_f+0x178>
    2448:	84 30       	cpi	r24, 0x04	; 4
    244a:	09 f4       	brne	.+2      	; 0x244e <__pack_f+0x34>
    244c:	9f c0       	rjmp	.+318    	; 0x258c <__pack_f+0x172>
    244e:	82 30       	cpi	r24, 0x02	; 2
    2450:	21 f4       	brne	.+8      	; 0x245a <__pack_f+0x40>
    2452:	ee 24       	eor	r14, r14
    2454:	ff 24       	eor	r15, r15
    2456:	87 01       	movw	r16, r14
    2458:	05 c0       	rjmp	.+10     	; 0x2464 <__pack_f+0x4a>
    245a:	e1 14       	cp	r14, r1
    245c:	f1 04       	cpc	r15, r1
    245e:	01 05       	cpc	r16, r1
    2460:	11 05       	cpc	r17, r1
    2462:	19 f4       	brne	.+6      	; 0x246a <__pack_f+0x50>
    2464:	e0 e0       	ldi	r30, 0x00	; 0
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	96 c0       	rjmp	.+300    	; 0x2596 <__pack_f+0x17c>
    246a:	62 81       	ldd	r22, Z+2	; 0x02
    246c:	73 81       	ldd	r23, Z+3	; 0x03
    246e:	9f ef       	ldi	r25, 0xFF	; 255
    2470:	62 38       	cpi	r22, 0x82	; 130
    2472:	79 07       	cpc	r23, r25
    2474:	0c f0       	brlt	.+2      	; 0x2478 <__pack_f+0x5e>
    2476:	5b c0       	rjmp	.+182    	; 0x252e <__pack_f+0x114>
    2478:	22 e8       	ldi	r18, 0x82	; 130
    247a:	3f ef       	ldi	r19, 0xFF	; 255
    247c:	26 1b       	sub	r18, r22
    247e:	37 0b       	sbc	r19, r23
    2480:	2a 31       	cpi	r18, 0x1A	; 26
    2482:	31 05       	cpc	r19, r1
    2484:	2c f0       	brlt	.+10     	; 0x2490 <__pack_f+0x76>
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	40 e0       	ldi	r20, 0x00	; 0
    248c:	50 e0       	ldi	r21, 0x00	; 0
    248e:	2a c0       	rjmp	.+84     	; 0x24e4 <__pack_f+0xca>
    2490:	b8 01       	movw	r22, r16
    2492:	a7 01       	movw	r20, r14
    2494:	02 2e       	mov	r0, r18
    2496:	04 c0       	rjmp	.+8      	; 0x24a0 <__pack_f+0x86>
    2498:	76 95       	lsr	r23
    249a:	67 95       	ror	r22
    249c:	57 95       	ror	r21
    249e:	47 95       	ror	r20
    24a0:	0a 94       	dec	r0
    24a2:	d2 f7       	brpl	.-12     	; 0x2498 <__pack_f+0x7e>
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	a0 e0       	ldi	r26, 0x00	; 0
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	04 c0       	rjmp	.+8      	; 0x24b6 <__pack_f+0x9c>
    24ae:	88 0f       	add	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	aa 1f       	adc	r26, r26
    24b4:	bb 1f       	adc	r27, r27
    24b6:	2a 95       	dec	r18
    24b8:	d2 f7       	brpl	.-12     	; 0x24ae <__pack_f+0x94>
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	a1 09       	sbc	r26, r1
    24be:	b1 09       	sbc	r27, r1
    24c0:	8e 21       	and	r24, r14
    24c2:	9f 21       	and	r25, r15
    24c4:	a0 23       	and	r26, r16
    24c6:	b1 23       	and	r27, r17
    24c8:	00 97       	sbiw	r24, 0x00	; 0
    24ca:	a1 05       	cpc	r26, r1
    24cc:	b1 05       	cpc	r27, r1
    24ce:	21 f0       	breq	.+8      	; 0x24d8 <__pack_f+0xbe>
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	a0 e0       	ldi	r26, 0x00	; 0
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	9a 01       	movw	r18, r20
    24da:	ab 01       	movw	r20, r22
    24dc:	28 2b       	or	r18, r24
    24de:	39 2b       	or	r19, r25
    24e0:	4a 2b       	or	r20, r26
    24e2:	5b 2b       	or	r21, r27
    24e4:	da 01       	movw	r26, r20
    24e6:	c9 01       	movw	r24, r18
    24e8:	8f 77       	andi	r24, 0x7F	; 127
    24ea:	90 70       	andi	r25, 0x00	; 0
    24ec:	a0 70       	andi	r26, 0x00	; 0
    24ee:	b0 70       	andi	r27, 0x00	; 0
    24f0:	80 34       	cpi	r24, 0x40	; 64
    24f2:	91 05       	cpc	r25, r1
    24f4:	a1 05       	cpc	r26, r1
    24f6:	b1 05       	cpc	r27, r1
    24f8:	39 f4       	brne	.+14     	; 0x2508 <__pack_f+0xee>
    24fa:	27 ff       	sbrs	r18, 7
    24fc:	09 c0       	rjmp	.+18     	; 0x2510 <__pack_f+0xf6>
    24fe:	20 5c       	subi	r18, 0xC0	; 192
    2500:	3f 4f       	sbci	r19, 0xFF	; 255
    2502:	4f 4f       	sbci	r20, 0xFF	; 255
    2504:	5f 4f       	sbci	r21, 0xFF	; 255
    2506:	04 c0       	rjmp	.+8      	; 0x2510 <__pack_f+0xf6>
    2508:	21 5c       	subi	r18, 0xC1	; 193
    250a:	3f 4f       	sbci	r19, 0xFF	; 255
    250c:	4f 4f       	sbci	r20, 0xFF	; 255
    250e:	5f 4f       	sbci	r21, 0xFF	; 255
    2510:	e0 e0       	ldi	r30, 0x00	; 0
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	20 30       	cpi	r18, 0x00	; 0
    2516:	a0 e0       	ldi	r26, 0x00	; 0
    2518:	3a 07       	cpc	r19, r26
    251a:	a0 e0       	ldi	r26, 0x00	; 0
    251c:	4a 07       	cpc	r20, r26
    251e:	a0 e4       	ldi	r26, 0x40	; 64
    2520:	5a 07       	cpc	r21, r26
    2522:	10 f0       	brcs	.+4      	; 0x2528 <__pack_f+0x10e>
    2524:	e1 e0       	ldi	r30, 0x01	; 1
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	79 01       	movw	r14, r18
    252a:	8a 01       	movw	r16, r20
    252c:	27 c0       	rjmp	.+78     	; 0x257c <__pack_f+0x162>
    252e:	60 38       	cpi	r22, 0x80	; 128
    2530:	71 05       	cpc	r23, r1
    2532:	64 f5       	brge	.+88     	; 0x258c <__pack_f+0x172>
    2534:	fb 01       	movw	r30, r22
    2536:	e1 58       	subi	r30, 0x81	; 129
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	d8 01       	movw	r26, r16
    253c:	c7 01       	movw	r24, r14
    253e:	8f 77       	andi	r24, 0x7F	; 127
    2540:	90 70       	andi	r25, 0x00	; 0
    2542:	a0 70       	andi	r26, 0x00	; 0
    2544:	b0 70       	andi	r27, 0x00	; 0
    2546:	80 34       	cpi	r24, 0x40	; 64
    2548:	91 05       	cpc	r25, r1
    254a:	a1 05       	cpc	r26, r1
    254c:	b1 05       	cpc	r27, r1
    254e:	39 f4       	brne	.+14     	; 0x255e <__pack_f+0x144>
    2550:	e7 fe       	sbrs	r14, 7
    2552:	0d c0       	rjmp	.+26     	; 0x256e <__pack_f+0x154>
    2554:	80 e4       	ldi	r24, 0x40	; 64
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	a0 e0       	ldi	r26, 0x00	; 0
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	04 c0       	rjmp	.+8      	; 0x2566 <__pack_f+0x14c>
    255e:	8f e3       	ldi	r24, 0x3F	; 63
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	a0 e0       	ldi	r26, 0x00	; 0
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	e8 0e       	add	r14, r24
    2568:	f9 1e       	adc	r15, r25
    256a:	0a 1f       	adc	r16, r26
    256c:	1b 1f       	adc	r17, r27
    256e:	17 ff       	sbrs	r17, 7
    2570:	05 c0       	rjmp	.+10     	; 0x257c <__pack_f+0x162>
    2572:	16 95       	lsr	r17
    2574:	07 95       	ror	r16
    2576:	f7 94       	ror	r15
    2578:	e7 94       	ror	r14
    257a:	31 96       	adiw	r30, 0x01	; 1
    257c:	87 e0       	ldi	r24, 0x07	; 7
    257e:	16 95       	lsr	r17
    2580:	07 95       	ror	r16
    2582:	f7 94       	ror	r15
    2584:	e7 94       	ror	r14
    2586:	8a 95       	dec	r24
    2588:	d1 f7       	brne	.-12     	; 0x257e <__pack_f+0x164>
    258a:	05 c0       	rjmp	.+10     	; 0x2596 <__pack_f+0x17c>
    258c:	ee 24       	eor	r14, r14
    258e:	ff 24       	eor	r15, r15
    2590:	87 01       	movw	r16, r14
    2592:	ef ef       	ldi	r30, 0xFF	; 255
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	6e 2f       	mov	r22, r30
    2598:	67 95       	ror	r22
    259a:	66 27       	eor	r22, r22
    259c:	67 95       	ror	r22
    259e:	90 2f       	mov	r25, r16
    25a0:	9f 77       	andi	r25, 0x7F	; 127
    25a2:	d7 94       	ror	r13
    25a4:	dd 24       	eor	r13, r13
    25a6:	d7 94       	ror	r13
    25a8:	8e 2f       	mov	r24, r30
    25aa:	86 95       	lsr	r24
    25ac:	49 2f       	mov	r20, r25
    25ae:	46 2b       	or	r20, r22
    25b0:	58 2f       	mov	r21, r24
    25b2:	5d 29       	or	r21, r13
    25b4:	b7 01       	movw	r22, r14
    25b6:	ca 01       	movw	r24, r20
    25b8:	1f 91       	pop	r17
    25ba:	0f 91       	pop	r16
    25bc:	ff 90       	pop	r15
    25be:	ef 90       	pop	r14
    25c0:	df 90       	pop	r13
    25c2:	08 95       	ret

000025c4 <__unpack_f>:
    25c4:	fc 01       	movw	r30, r24
    25c6:	db 01       	movw	r26, r22
    25c8:	40 81       	ld	r20, Z
    25ca:	51 81       	ldd	r21, Z+1	; 0x01
    25cc:	22 81       	ldd	r18, Z+2	; 0x02
    25ce:	62 2f       	mov	r22, r18
    25d0:	6f 77       	andi	r22, 0x7F	; 127
    25d2:	70 e0       	ldi	r23, 0x00	; 0
    25d4:	22 1f       	adc	r18, r18
    25d6:	22 27       	eor	r18, r18
    25d8:	22 1f       	adc	r18, r18
    25da:	93 81       	ldd	r25, Z+3	; 0x03
    25dc:	89 2f       	mov	r24, r25
    25de:	88 0f       	add	r24, r24
    25e0:	82 2b       	or	r24, r18
    25e2:	28 2f       	mov	r18, r24
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	99 1f       	adc	r25, r25
    25e8:	99 27       	eor	r25, r25
    25ea:	99 1f       	adc	r25, r25
    25ec:	11 96       	adiw	r26, 0x01	; 1
    25ee:	9c 93       	st	X, r25
    25f0:	11 97       	sbiw	r26, 0x01	; 1
    25f2:	21 15       	cp	r18, r1
    25f4:	31 05       	cpc	r19, r1
    25f6:	a9 f5       	brne	.+106    	; 0x2662 <__unpack_f+0x9e>
    25f8:	41 15       	cp	r20, r1
    25fa:	51 05       	cpc	r21, r1
    25fc:	61 05       	cpc	r22, r1
    25fe:	71 05       	cpc	r23, r1
    2600:	11 f4       	brne	.+4      	; 0x2606 <__unpack_f+0x42>
    2602:	82 e0       	ldi	r24, 0x02	; 2
    2604:	37 c0       	rjmp	.+110    	; 0x2674 <__unpack_f+0xb0>
    2606:	82 e8       	ldi	r24, 0x82	; 130
    2608:	9f ef       	ldi	r25, 0xFF	; 255
    260a:	13 96       	adiw	r26, 0x03	; 3
    260c:	9c 93       	st	X, r25
    260e:	8e 93       	st	-X, r24
    2610:	12 97       	sbiw	r26, 0x02	; 2
    2612:	9a 01       	movw	r18, r20
    2614:	ab 01       	movw	r20, r22
    2616:	67 e0       	ldi	r22, 0x07	; 7
    2618:	22 0f       	add	r18, r18
    261a:	33 1f       	adc	r19, r19
    261c:	44 1f       	adc	r20, r20
    261e:	55 1f       	adc	r21, r21
    2620:	6a 95       	dec	r22
    2622:	d1 f7       	brne	.-12     	; 0x2618 <__unpack_f+0x54>
    2624:	83 e0       	ldi	r24, 0x03	; 3
    2626:	8c 93       	st	X, r24
    2628:	0d c0       	rjmp	.+26     	; 0x2644 <__unpack_f+0x80>
    262a:	22 0f       	add	r18, r18
    262c:	33 1f       	adc	r19, r19
    262e:	44 1f       	adc	r20, r20
    2630:	55 1f       	adc	r21, r21
    2632:	12 96       	adiw	r26, 0x02	; 2
    2634:	8d 91       	ld	r24, X+
    2636:	9c 91       	ld	r25, X
    2638:	13 97       	sbiw	r26, 0x03	; 3
    263a:	01 97       	sbiw	r24, 0x01	; 1
    263c:	13 96       	adiw	r26, 0x03	; 3
    263e:	9c 93       	st	X, r25
    2640:	8e 93       	st	-X, r24
    2642:	12 97       	sbiw	r26, 0x02	; 2
    2644:	20 30       	cpi	r18, 0x00	; 0
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	38 07       	cpc	r19, r24
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	48 07       	cpc	r20, r24
    264e:	80 e4       	ldi	r24, 0x40	; 64
    2650:	58 07       	cpc	r21, r24
    2652:	58 f3       	brcs	.-42     	; 0x262a <__unpack_f+0x66>
    2654:	14 96       	adiw	r26, 0x04	; 4
    2656:	2d 93       	st	X+, r18
    2658:	3d 93       	st	X+, r19
    265a:	4d 93       	st	X+, r20
    265c:	5c 93       	st	X, r21
    265e:	17 97       	sbiw	r26, 0x07	; 7
    2660:	08 95       	ret
    2662:	2f 3f       	cpi	r18, 0xFF	; 255
    2664:	31 05       	cpc	r19, r1
    2666:	79 f4       	brne	.+30     	; 0x2686 <__unpack_f+0xc2>
    2668:	41 15       	cp	r20, r1
    266a:	51 05       	cpc	r21, r1
    266c:	61 05       	cpc	r22, r1
    266e:	71 05       	cpc	r23, r1
    2670:	19 f4       	brne	.+6      	; 0x2678 <__unpack_f+0xb4>
    2672:	84 e0       	ldi	r24, 0x04	; 4
    2674:	8c 93       	st	X, r24
    2676:	08 95       	ret
    2678:	64 ff       	sbrs	r22, 4
    267a:	03 c0       	rjmp	.+6      	; 0x2682 <__unpack_f+0xbe>
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	8c 93       	st	X, r24
    2680:	12 c0       	rjmp	.+36     	; 0x26a6 <__unpack_f+0xe2>
    2682:	1c 92       	st	X, r1
    2684:	10 c0       	rjmp	.+32     	; 0x26a6 <__unpack_f+0xe2>
    2686:	2f 57       	subi	r18, 0x7F	; 127
    2688:	30 40       	sbci	r19, 0x00	; 0
    268a:	13 96       	adiw	r26, 0x03	; 3
    268c:	3c 93       	st	X, r19
    268e:	2e 93       	st	-X, r18
    2690:	12 97       	sbiw	r26, 0x02	; 2
    2692:	83 e0       	ldi	r24, 0x03	; 3
    2694:	8c 93       	st	X, r24
    2696:	87 e0       	ldi	r24, 0x07	; 7
    2698:	44 0f       	add	r20, r20
    269a:	55 1f       	adc	r21, r21
    269c:	66 1f       	adc	r22, r22
    269e:	77 1f       	adc	r23, r23
    26a0:	8a 95       	dec	r24
    26a2:	d1 f7       	brne	.-12     	; 0x2698 <__unpack_f+0xd4>
    26a4:	70 64       	ori	r23, 0x40	; 64
    26a6:	14 96       	adiw	r26, 0x04	; 4
    26a8:	4d 93       	st	X+, r20
    26aa:	5d 93       	st	X+, r21
    26ac:	6d 93       	st	X+, r22
    26ae:	7c 93       	st	X, r23
    26b0:	17 97       	sbiw	r26, 0x07	; 7
    26b2:	08 95       	ret

000026b4 <__fpcmp_parts_f>:
    26b4:	1f 93       	push	r17
    26b6:	dc 01       	movw	r26, r24
    26b8:	fb 01       	movw	r30, r22
    26ba:	9c 91       	ld	r25, X
    26bc:	92 30       	cpi	r25, 0x02	; 2
    26be:	08 f4       	brcc	.+2      	; 0x26c2 <__fpcmp_parts_f+0xe>
    26c0:	47 c0       	rjmp	.+142    	; 0x2750 <__fpcmp_parts_f+0x9c>
    26c2:	80 81       	ld	r24, Z
    26c4:	82 30       	cpi	r24, 0x02	; 2
    26c6:	08 f4       	brcc	.+2      	; 0x26ca <__fpcmp_parts_f+0x16>
    26c8:	43 c0       	rjmp	.+134    	; 0x2750 <__fpcmp_parts_f+0x9c>
    26ca:	94 30       	cpi	r25, 0x04	; 4
    26cc:	51 f4       	brne	.+20     	; 0x26e2 <__fpcmp_parts_f+0x2e>
    26ce:	11 96       	adiw	r26, 0x01	; 1
    26d0:	1c 91       	ld	r17, X
    26d2:	84 30       	cpi	r24, 0x04	; 4
    26d4:	99 f5       	brne	.+102    	; 0x273c <__fpcmp_parts_f+0x88>
    26d6:	81 81       	ldd	r24, Z+1	; 0x01
    26d8:	68 2f       	mov	r22, r24
    26da:	70 e0       	ldi	r23, 0x00	; 0
    26dc:	61 1b       	sub	r22, r17
    26de:	71 09       	sbc	r23, r1
    26e0:	3f c0       	rjmp	.+126    	; 0x2760 <__fpcmp_parts_f+0xac>
    26e2:	84 30       	cpi	r24, 0x04	; 4
    26e4:	21 f0       	breq	.+8      	; 0x26ee <__fpcmp_parts_f+0x3a>
    26e6:	92 30       	cpi	r25, 0x02	; 2
    26e8:	31 f4       	brne	.+12     	; 0x26f6 <__fpcmp_parts_f+0x42>
    26ea:	82 30       	cpi	r24, 0x02	; 2
    26ec:	b9 f1       	breq	.+110    	; 0x275c <__fpcmp_parts_f+0xa8>
    26ee:	81 81       	ldd	r24, Z+1	; 0x01
    26f0:	88 23       	and	r24, r24
    26f2:	89 f1       	breq	.+98     	; 0x2756 <__fpcmp_parts_f+0xa2>
    26f4:	2d c0       	rjmp	.+90     	; 0x2750 <__fpcmp_parts_f+0x9c>
    26f6:	11 96       	adiw	r26, 0x01	; 1
    26f8:	1c 91       	ld	r17, X
    26fa:	11 97       	sbiw	r26, 0x01	; 1
    26fc:	82 30       	cpi	r24, 0x02	; 2
    26fe:	f1 f0       	breq	.+60     	; 0x273c <__fpcmp_parts_f+0x88>
    2700:	81 81       	ldd	r24, Z+1	; 0x01
    2702:	18 17       	cp	r17, r24
    2704:	d9 f4       	brne	.+54     	; 0x273c <__fpcmp_parts_f+0x88>
    2706:	12 96       	adiw	r26, 0x02	; 2
    2708:	2d 91       	ld	r18, X+
    270a:	3c 91       	ld	r19, X
    270c:	13 97       	sbiw	r26, 0x03	; 3
    270e:	82 81       	ldd	r24, Z+2	; 0x02
    2710:	93 81       	ldd	r25, Z+3	; 0x03
    2712:	82 17       	cp	r24, r18
    2714:	93 07       	cpc	r25, r19
    2716:	94 f0       	brlt	.+36     	; 0x273c <__fpcmp_parts_f+0x88>
    2718:	28 17       	cp	r18, r24
    271a:	39 07       	cpc	r19, r25
    271c:	bc f0       	brlt	.+46     	; 0x274c <__fpcmp_parts_f+0x98>
    271e:	14 96       	adiw	r26, 0x04	; 4
    2720:	8d 91       	ld	r24, X+
    2722:	9d 91       	ld	r25, X+
    2724:	0d 90       	ld	r0, X+
    2726:	bc 91       	ld	r27, X
    2728:	a0 2d       	mov	r26, r0
    272a:	24 81       	ldd	r18, Z+4	; 0x04
    272c:	35 81       	ldd	r19, Z+5	; 0x05
    272e:	46 81       	ldd	r20, Z+6	; 0x06
    2730:	57 81       	ldd	r21, Z+7	; 0x07
    2732:	28 17       	cp	r18, r24
    2734:	39 07       	cpc	r19, r25
    2736:	4a 07       	cpc	r20, r26
    2738:	5b 07       	cpc	r21, r27
    273a:	18 f4       	brcc	.+6      	; 0x2742 <__fpcmp_parts_f+0x8e>
    273c:	11 23       	and	r17, r17
    273e:	41 f0       	breq	.+16     	; 0x2750 <__fpcmp_parts_f+0x9c>
    2740:	0a c0       	rjmp	.+20     	; 0x2756 <__fpcmp_parts_f+0xa2>
    2742:	82 17       	cp	r24, r18
    2744:	93 07       	cpc	r25, r19
    2746:	a4 07       	cpc	r26, r20
    2748:	b5 07       	cpc	r27, r21
    274a:	40 f4       	brcc	.+16     	; 0x275c <__fpcmp_parts_f+0xa8>
    274c:	11 23       	and	r17, r17
    274e:	19 f0       	breq	.+6      	; 0x2756 <__fpcmp_parts_f+0xa2>
    2750:	61 e0       	ldi	r22, 0x01	; 1
    2752:	70 e0       	ldi	r23, 0x00	; 0
    2754:	05 c0       	rjmp	.+10     	; 0x2760 <__fpcmp_parts_f+0xac>
    2756:	6f ef       	ldi	r22, 0xFF	; 255
    2758:	7f ef       	ldi	r23, 0xFF	; 255
    275a:	02 c0       	rjmp	.+4      	; 0x2760 <__fpcmp_parts_f+0xac>
    275c:	60 e0       	ldi	r22, 0x00	; 0
    275e:	70 e0       	ldi	r23, 0x00	; 0
    2760:	cb 01       	movw	r24, r22
    2762:	1f 91       	pop	r17
    2764:	08 95       	ret

00002766 <UART_SendString>:
#include "UART_interface.h"
#include "UART_private.h"
#include "UART_config.h"
static void (*Global_Ptr_To_FunNotification) (void) = NULL ;
void UART_SendString (u8 *Copy_Ptru8_To_String)
{
    2766:	df 93       	push	r29
    2768:	cf 93       	push	r28
    276a:	00 d0       	rcall	.+0      	; 0x276c <UART_SendString+0x6>
    276c:	0f 92       	push	r0
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
    2772:	9b 83       	std	Y+3, r25	; 0x03
    2774:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_iterator = 0;
    2776:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Ptru8_To_String != NULL)
    2778:	8a 81       	ldd	r24, Y+2	; 0x02
    277a:	9b 81       	ldd	r25, Y+3	; 0x03
    277c:	00 97       	sbiw	r24, 0x00	; 0
    277e:	d1 f0       	breq	.+52     	; 0x27b4 <UART_SendString+0x4e>
    2780:	0e c0       	rjmp	.+28     	; 0x279e <UART_SendString+0x38>
	{
		while( Copy_Ptru8_To_String[local_iterator] != '\0' )
		{
			UART_u8SendData_Sync(Copy_Ptru8_To_String[local_iterator]);
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	28 2f       	mov	r18, r24
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	8a 81       	ldd	r24, Y+2	; 0x02
    278a:	9b 81       	ldd	r25, Y+3	; 0x03
    278c:	fc 01       	movw	r30, r24
    278e:	e2 0f       	add	r30, r18
    2790:	f3 1f       	adc	r31, r19
    2792:	80 81       	ld	r24, Z
    2794:	0e 94 20 15 	call	0x2a40	; 0x2a40 <UART_u8SendData_Sync>
			local_iterator++;
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	8f 5f       	subi	r24, 0xFF	; 255
    279c:	89 83       	std	Y+1, r24	; 0x01
void UART_SendString (u8 *Copy_Ptru8_To_String)
{
	u8 local_iterator = 0;
	if(Copy_Ptru8_To_String != NULL)
	{
		while( Copy_Ptru8_To_String[local_iterator] != '\0' )
    279e:	89 81       	ldd	r24, Y+1	; 0x01
    27a0:	28 2f       	mov	r18, r24
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	8a 81       	ldd	r24, Y+2	; 0x02
    27a6:	9b 81       	ldd	r25, Y+3	; 0x03
    27a8:	fc 01       	movw	r30, r24
    27aa:	e2 0f       	add	r30, r18
    27ac:	f3 1f       	adc	r31, r19
    27ae:	80 81       	ld	r24, Z
    27b0:	88 23       	and	r24, r24
    27b2:	39 f7       	brne	.-50     	; 0x2782 <UART_SendString+0x1c>
			UART_u8SendData_Sync(Copy_Ptru8_To_String[local_iterator]);
			local_iterator++;

		}
	}
}
    27b4:	0f 90       	pop	r0
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	cf 91       	pop	r28
    27bc:	df 91       	pop	r29
    27be:	08 95       	ret

000027c0 <UART_ReceiveString>:
void UART_ReceiveString(u8 *Copy_Ptru8_To_String)
{
    27c0:	0f 93       	push	r16
    27c2:	1f 93       	push	r17
    27c4:	df 93       	push	r29
    27c6:	cf 93       	push	r28
    27c8:	00 d0       	rcall	.+0      	; 0x27ca <UART_ReceiveString+0xa>
    27ca:	0f 92       	push	r0
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
    27d0:	9b 83       	std	Y+3, r25	; 0x03
    27d2:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_iterator = 0;
    27d4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Ptru8_To_String != NULL)
    27d6:	8a 81       	ldd	r24, Y+2	; 0x02
    27d8:	9b 81       	ldd	r25, Y+3	; 0x03
    27da:	00 97       	sbiw	r24, 0x00	; 0
    27dc:	d9 f0       	breq	.+54     	; 0x2814 <UART_ReceiveString+0x54>
    27de:	0f c0       	rjmp	.+30     	; 0x27fe <UART_ReceiveString+0x3e>
	{
		while( Copy_Ptru8_To_String[local_iterator] != '\0' )
		{
			Copy_Ptru8_To_String[local_iterator] = UART_voidReceiveData_Sync() ;
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	28 2f       	mov	r18, r24
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	8a 81       	ldd	r24, Y+2	; 0x02
    27e8:	9b 81       	ldd	r25, Y+3	; 0x03
    27ea:	8c 01       	movw	r16, r24
    27ec:	02 0f       	add	r16, r18
    27ee:	13 1f       	adc	r17, r19
    27f0:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <UART_voidReceiveData_Sync>
    27f4:	f8 01       	movw	r30, r16
    27f6:	80 83       	st	Z, r24
			local_iterator++;
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	8f 5f       	subi	r24, 0xFF	; 255
    27fc:	89 83       	std	Y+1, r24	; 0x01
void UART_ReceiveString(u8 *Copy_Ptru8_To_String)
{
	u8 local_iterator = 0;
	if(Copy_Ptru8_To_String != NULL)
	{
		while( Copy_Ptru8_To_String[local_iterator] != '\0' )
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	28 2f       	mov	r18, r24
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	8a 81       	ldd	r24, Y+2	; 0x02
    2806:	9b 81       	ldd	r25, Y+3	; 0x03
    2808:	fc 01       	movw	r30, r24
    280a:	e2 0f       	add	r30, r18
    280c:	f3 1f       	adc	r31, r19
    280e:	80 81       	ld	r24, Z
    2810:	88 23       	and	r24, r24
    2812:	31 f7       	brne	.-52     	; 0x27e0 <UART_ReceiveString+0x20>
		{
			Copy_Ptru8_To_String[local_iterator] = UART_voidReceiveData_Sync() ;
			local_iterator++;
		}
	}
}
    2814:	0f 90       	pop	r0
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	cf 91       	pop	r28
    281c:	df 91       	pop	r29
    281e:	1f 91       	pop	r17
    2820:	0f 91       	pop	r16
    2822:	08 95       	ret

00002824 <UART_void_Init>:
void UART_void_Init(UART_Config_t *Ptr_To_UART_CONFIG )
{
    2824:	df 93       	push	r29
    2826:	cf 93       	push	r28
    2828:	cd b7       	in	r28, 0x3d	; 61
    282a:	de b7       	in	r29, 0x3e	; 62
    282c:	2b 97       	sbiw	r28, 0x0b	; 11
    282e:	0f b6       	in	r0, 0x3f	; 63
    2830:	f8 94       	cli
    2832:	de bf       	out	0x3e, r29	; 62
    2834:	0f be       	out	0x3f, r0	; 63
    2836:	cd bf       	out	0x3d, r28	; 61
    2838:	9f 83       	std	Y+7, r25	; 0x07
    283a:	8e 83       	std	Y+6, r24	; 0x06

	switch (Ptr_To_UART_CONFIG ->TX_RX_ENABLE_DISABLE)
    283c:	ee 81       	ldd	r30, Y+6	; 0x06
    283e:	ff 81       	ldd	r31, Y+7	; 0x07
    2840:	85 81       	ldd	r24, Z+5	; 0x05
    2842:	28 2f       	mov	r18, r24
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	3b 87       	std	Y+11, r19	; 0x0b
    2848:	2a 87       	std	Y+10, r18	; 0x0a
    284a:	8a 85       	ldd	r24, Y+10	; 0x0a
    284c:	9b 85       	ldd	r25, Y+11	; 0x0b
    284e:	81 30       	cpi	r24, 0x01	; 1
    2850:	91 05       	cpc	r25, r1
    2852:	51 f0       	breq	.+20     	; 0x2868 <UART_void_Init+0x44>
    2854:	2a 85       	ldd	r18, Y+10	; 0x0a
    2856:	3b 85       	ldd	r19, Y+11	; 0x0b
    2858:	22 30       	cpi	r18, 0x02	; 2
    285a:	31 05       	cpc	r19, r1
    285c:	a9 f0       	breq	.+42     	; 0x2888 <UART_void_Init+0x64>
    285e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2860:	9b 85       	ldd	r25, Y+11	; 0x0b
    2862:	00 97       	sbiw	r24, 0x00	; 0
    2864:	49 f0       	breq	.+18     	; 0x2878 <UART_void_Init+0x54>
    2866:	1e c0       	rjmp	.+60     	; 0x28a4 <UART_void_Init+0x80>
	{
	case RX_Only_Enable:
		SET_BIT( UCSRB_REG ,  RX_ENABLE_BIT );
    2868:	aa e2       	ldi	r26, 0x2A	; 42
    286a:	b0 e0       	ldi	r27, 0x00	; 0
    286c:	ea e2       	ldi	r30, 0x2A	; 42
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	80 81       	ld	r24, Z
    2872:	80 61       	ori	r24, 0x10	; 16
    2874:	8c 93       	st	X, r24
    2876:	16 c0       	rjmp	.+44     	; 0x28a4 <UART_void_Init+0x80>
		break;

	case TX_Only_Enable:
		SET_BIT( UCSRB_REG ,  TX_ENABLE_BIT );
    2878:	aa e2       	ldi	r26, 0x2A	; 42
    287a:	b0 e0       	ldi	r27, 0x00	; 0
    287c:	ea e2       	ldi	r30, 0x2A	; 42
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	80 81       	ld	r24, Z
    2882:	88 60       	ori	r24, 0x08	; 8
    2884:	8c 93       	st	X, r24
    2886:	0e c0       	rjmp	.+28     	; 0x28a4 <UART_void_Init+0x80>
		break;

	case TX_RX_Enable:
		SET_BIT( UCSRB_REG ,  RX_ENABLE_BIT );
    2888:	aa e2       	ldi	r26, 0x2A	; 42
    288a:	b0 e0       	ldi	r27, 0x00	; 0
    288c:	ea e2       	ldi	r30, 0x2A	; 42
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	80 81       	ld	r24, Z
    2892:	80 61       	ori	r24, 0x10	; 16
    2894:	8c 93       	st	X, r24
		SET_BIT( UCSRB_REG ,  TX_ENABLE_BIT );
    2896:	aa e2       	ldi	r26, 0x2A	; 42
    2898:	b0 e0       	ldi	r27, 0x00	; 0
    289a:	ea e2       	ldi	r30, 0x2A	; 42
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	80 81       	ld	r24, Z
    28a0:	88 60       	ori	r24, 0x08	; 8
    28a2:	8c 93       	st	X, r24
		break;
	}

	UCSRB_REG |=       ( (Ptr_To_UART_CONFIG ->Character_Size) & 0b100 );
    28a4:	aa e2       	ldi	r26, 0x2A	; 42
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	ea e2       	ldi	r30, 0x2A	; 42
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	80 81       	ld	r24, Z
    28ae:	98 2f       	mov	r25, r24
    28b0:	ee 81       	ldd	r30, Y+6	; 0x06
    28b2:	ff 81       	ldd	r31, Y+7	; 0x07
    28b4:	83 81       	ldd	r24, Z+3	; 0x03
    28b6:	84 70       	andi	r24, 0x04	; 4
    28b8:	89 2b       	or	r24, r25
    28ba:	8c 93       	st	X, r24
	u8 local_variable_To_UCSRC = 0b10000000;
    28bc:	80 e8       	ldi	r24, 0x80	; 128
    28be:	8d 83       	std	Y+5, r24	; 0x05
	// to select UCSRC

	local_variable_To_UCSRC |= ( ( (Ptr_To_UART_CONFIG ->Character_Size) & 0b011 ) << 1 );
    28c0:	ee 81       	ldd	r30, Y+6	; 0x06
    28c2:	ff 81       	ldd	r31, Y+7	; 0x07
    28c4:	83 81       	ldd	r24, Z+3	; 0x03
    28c6:	88 2f       	mov	r24, r24
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	83 70       	andi	r24, 0x03	; 3
    28cc:	90 70       	andi	r25, 0x00	; 0
    28ce:	88 0f       	add	r24, r24
    28d0:	99 1f       	adc	r25, r25
    28d2:	98 2f       	mov	r25, r24
    28d4:	8d 81       	ldd	r24, Y+5	; 0x05
    28d6:	89 2b       	or	r24, r25
    28d8:	8d 83       	std	Y+5, r24	; 0x05

	local_variable_To_UCSRC |= ( (Ptr_To_UART_CONFIG->USART_Mode)  << 6  );
    28da:	ee 81       	ldd	r30, Y+6	; 0x06
    28dc:	ff 81       	ldd	r31, Y+7	; 0x07
    28de:	80 81       	ld	r24, Z
    28e0:	88 2f       	mov	r24, r24
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	00 24       	eor	r0, r0
    28e6:	96 95       	lsr	r25
    28e8:	87 95       	ror	r24
    28ea:	07 94       	ror	r0
    28ec:	96 95       	lsr	r25
    28ee:	87 95       	ror	r24
    28f0:	07 94       	ror	r0
    28f2:	98 2f       	mov	r25, r24
    28f4:	80 2d       	mov	r24, r0
    28f6:	98 2f       	mov	r25, r24
    28f8:	8d 81       	ldd	r24, Y+5	; 0x05
    28fa:	89 2b       	or	r24, r25
    28fc:	8d 83       	std	Y+5, r24	; 0x05

	local_variable_To_UCSRC |= ( (Ptr_To_UART_CONFIG->Parity_Mode) << 4  );
    28fe:	ee 81       	ldd	r30, Y+6	; 0x06
    2900:	ff 81       	ldd	r31, Y+7	; 0x07
    2902:	81 81       	ldd	r24, Z+1	; 0x01
    2904:	88 2f       	mov	r24, r24
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	82 95       	swap	r24
    290a:	92 95       	swap	r25
    290c:	90 7f       	andi	r25, 0xF0	; 240
    290e:	98 27       	eor	r25, r24
    2910:	80 7f       	andi	r24, 0xF0	; 240
    2912:	98 27       	eor	r25, r24
    2914:	98 2f       	mov	r25, r24
    2916:	8d 81       	ldd	r24, Y+5	; 0x05
    2918:	89 2b       	or	r24, r25
    291a:	8d 83       	std	Y+5, r24	; 0x05

	local_variable_To_UCSRC |= ( (Ptr_To_UART_CONFIG->Stop_Bits)   << 3  );
    291c:	ee 81       	ldd	r30, Y+6	; 0x06
    291e:	ff 81       	ldd	r31, Y+7	; 0x07
    2920:	82 81       	ldd	r24, Z+2	; 0x02
    2922:	88 2f       	mov	r24, r24
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	88 0f       	add	r24, r24
    2928:	99 1f       	adc	r25, r25
    292a:	88 0f       	add	r24, r24
    292c:	99 1f       	adc	r25, r25
    292e:	88 0f       	add	r24, r24
    2930:	99 1f       	adc	r25, r25
    2932:	98 2f       	mov	r25, r24
    2934:	8d 81       	ldd	r24, Y+5	; 0x05
    2936:	89 2b       	or	r24, r25
    2938:	8d 83       	std	Y+5, r24	; 0x05

	local_variable_To_UCSRC |= ( (Ptr_To_UART_CONFIG->Clock_Polarity) );
    293a:	ee 81       	ldd	r30, Y+6	; 0x06
    293c:	ff 81       	ldd	r31, Y+7	; 0x07
    293e:	94 81       	ldd	r25, Z+4	; 0x04
    2940:	8d 81       	ldd	r24, Y+5	; 0x05
    2942:	89 2b       	or	r24, r25
    2944:	8d 83       	std	Y+5, r24	; 0x05

	UCSRC_UBRRH_REG = local_variable_To_UCSRC ;
    2946:	e0 e4       	ldi	r30, 0x40	; 64
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	8d 81       	ldd	r24, Y+5	; 0x05
    294c:	80 83       	st	Z, r24



	u16 BAUD_PRESCALE     = (((8000000 / (Ptr_To_UART_CONFIG->BAUD_RATE * 16UL))) - 1);
    294e:	ee 81       	ldd	r30, Y+6	; 0x06
    2950:	ff 81       	ldd	r31, Y+7	; 0x07
    2952:	87 81       	ldd	r24, Z+7	; 0x07
    2954:	90 85       	ldd	r25, Z+8	; 0x08
    2956:	cc 01       	movw	r24, r24
    2958:	a0 e0       	ldi	r26, 0x00	; 0
    295a:	b0 e0       	ldi	r27, 0x00	; 0
    295c:	88 0f       	add	r24, r24
    295e:	99 1f       	adc	r25, r25
    2960:	aa 1f       	adc	r26, r26
    2962:	bb 1f       	adc	r27, r27
    2964:	88 0f       	add	r24, r24
    2966:	99 1f       	adc	r25, r25
    2968:	aa 1f       	adc	r26, r26
    296a:	bb 1f       	adc	r27, r27
    296c:	88 0f       	add	r24, r24
    296e:	99 1f       	adc	r25, r25
    2970:	aa 1f       	adc	r26, r26
    2972:	bb 1f       	adc	r27, r27
    2974:	88 0f       	add	r24, r24
    2976:	99 1f       	adc	r25, r25
    2978:	aa 1f       	adc	r26, r26
    297a:	bb 1f       	adc	r27, r27
    297c:	9c 01       	movw	r18, r24
    297e:	ad 01       	movw	r20, r26
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	92 e1       	ldi	r25, 0x12	; 18
    2984:	aa e7       	ldi	r26, 0x7A	; 122
    2986:	b0 e0       	ldi	r27, 0x00	; 0
    2988:	bc 01       	movw	r22, r24
    298a:	cd 01       	movw	r24, r26
    298c:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
    2990:	da 01       	movw	r26, r20
    2992:	c9 01       	movw	r24, r18
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	9c 83       	std	Y+4, r25	; 0x04
    2998:	8b 83       	std	Y+3, r24	; 0x03
	u16 BAUD_PRESCALE_u2x = (((8000000 / (Ptr_To_UART_CONFIG->BAUD_RATE * 8UL)))  - 1);
    299a:	ee 81       	ldd	r30, Y+6	; 0x06
    299c:	ff 81       	ldd	r31, Y+7	; 0x07
    299e:	87 81       	ldd	r24, Z+7	; 0x07
    29a0:	90 85       	ldd	r25, Z+8	; 0x08
    29a2:	cc 01       	movw	r24, r24
    29a4:	a0 e0       	ldi	r26, 0x00	; 0
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	88 0f       	add	r24, r24
    29aa:	99 1f       	adc	r25, r25
    29ac:	aa 1f       	adc	r26, r26
    29ae:	bb 1f       	adc	r27, r27
    29b0:	88 0f       	add	r24, r24
    29b2:	99 1f       	adc	r25, r25
    29b4:	aa 1f       	adc	r26, r26
    29b6:	bb 1f       	adc	r27, r27
    29b8:	88 0f       	add	r24, r24
    29ba:	99 1f       	adc	r25, r25
    29bc:	aa 1f       	adc	r26, r26
    29be:	bb 1f       	adc	r27, r27
    29c0:	9c 01       	movw	r18, r24
    29c2:	ad 01       	movw	r20, r26
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	92 e1       	ldi	r25, 0x12	; 18
    29c8:	aa e7       	ldi	r26, 0x7A	; 122
    29ca:	b0 e0       	ldi	r27, 0x00	; 0
    29cc:	bc 01       	movw	r22, r24
    29ce:	cd 01       	movw	r24, r26
    29d0:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodsi4>
    29d4:	da 01       	movw	r26, r20
    29d6:	c9 01       	movw	r24, r18
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	9a 83       	std	Y+2, r25	; 0x02
    29dc:	89 83       	std	Y+1, r24	; 0x01

	switch(  Ptr_To_UART_CONFIG->UART_SPEED   )
    29de:	ee 81       	ldd	r30, Y+6	; 0x06
    29e0:	ff 81       	ldd	r31, Y+7	; 0x07
    29e2:	86 81       	ldd	r24, Z+6	; 0x06
    29e4:	28 2f       	mov	r18, r24
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	39 87       	std	Y+9, r19	; 0x09
    29ea:	28 87       	std	Y+8, r18	; 0x08
    29ec:	88 85       	ldd	r24, Y+8	; 0x08
    29ee:	99 85       	ldd	r25, Y+9	; 0x09
    29f0:	00 97       	sbiw	r24, 0x00	; 0
    29f2:	31 f0       	breq	.+12     	; 0x2a00 <UART_void_Init+0x1dc>
    29f4:	28 85       	ldd	r18, Y+8	; 0x08
    29f6:	39 85       	ldd	r19, Y+9	; 0x09
    29f8:	21 30       	cpi	r18, 0x01	; 1
    29fa:	31 05       	cpc	r19, r1
    29fc:	69 f0       	breq	.+26     	; 0x2a18 <UART_void_Init+0x1f4>
    29fe:	17 c0       	rjmp	.+46     	; 0x2a2e <UART_void_Init+0x20a>
	{
	case NORMAL_SPEED:
		UBRRL_REG       = (u8)   BAUD_PRESCALE        ;
    2a00:	e9 e2       	ldi	r30, 0x29	; 41
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	8b 81       	ldd	r24, Y+3	; 0x03
    2a06:	80 83       	st	Z, r24
		UCSRC_UBRRH_REG = (u8) ( BAUD_PRESCALE  >> 8 );
    2a08:	e0 e4       	ldi	r30, 0x40	; 64
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a10:	89 2f       	mov	r24, r25
    2a12:	99 27       	eor	r25, r25
    2a14:	80 83       	st	Z, r24
    2a16:	0b c0       	rjmp	.+22     	; 0x2a2e <UART_void_Init+0x20a>
		break;

	case U2X_SPEED:
		UBRRL_REG       = (u8)   BAUD_PRESCALE_u2x        ;
    2a18:	e9 e2       	ldi	r30, 0x29	; 41
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	80 83       	st	Z, r24
		UCSRC_UBRRH_REG = (u8) ( BAUD_PRESCALE_u2x  >> 8 );
    2a20:	e0 e4       	ldi	r30, 0x40	; 64
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	89 81       	ldd	r24, Y+1	; 0x01
    2a26:	9a 81       	ldd	r25, Y+2	; 0x02
    2a28:	89 2f       	mov	r24, r25
    2a2a:	99 27       	eor	r25, r25
    2a2c:	80 83       	st	Z, r24
	}




}
    2a2e:	2b 96       	adiw	r28, 0x0b	; 11
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	f8 94       	cli
    2a34:	de bf       	out	0x3e, r29	; 62
    2a36:	0f be       	out	0x3f, r0	; 63
    2a38:	cd bf       	out	0x3d, r28	; 61
    2a3a:	cf 91       	pop	r28
    2a3c:	df 91       	pop	r29
    2a3e:	08 95       	ret

00002a40 <UART_u8SendData_Sync>:
void UART_u8SendData_Sync(u8 Copy_Data)
{
    2a40:	df 93       	push	r29
    2a42:	cf 93       	push	r28
    2a44:	cd b7       	in	r28, 0x3d	; 61
    2a46:	de b7       	in	r29, 0x3e	; 62
    2a48:	2f 97       	sbiw	r28, 0x0f	; 15
    2a4a:	0f b6       	in	r0, 0x3f	; 63
    2a4c:	f8 94       	cli
    2a4e:	de bf       	out	0x3e, r29	; 62
    2a50:	0f be       	out	0x3f, r0	; 63
    2a52:	cd bf       	out	0x3d, r28	; 61
    2a54:	8f 87       	std	Y+15, r24	; 0x0f
	while(  GET_BIT( UCSRA_REG , DATA_REG_EMPTY_INTERRUPT_ENABLE_BIT) == 0 );
    2a56:	eb e2       	ldi	r30, 0x2B	; 43
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	80 81       	ld	r24, Z
    2a5c:	82 95       	swap	r24
    2a5e:	86 95       	lsr	r24
    2a60:	87 70       	andi	r24, 0x07	; 7
    2a62:	88 2f       	mov	r24, r24
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	81 70       	andi	r24, 0x01	; 1
    2a68:	90 70       	andi	r25, 0x00	; 0
    2a6a:	00 97       	sbiw	r24, 0x00	; 0
    2a6c:	a1 f3       	breq	.-24     	; 0x2a56 <UART_u8SendData_Sync+0x16>
	UDR_REG = Copy_Data ;
    2a6e:	ec e2       	ldi	r30, 0x2C	; 44
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a74:	80 83       	st	Z, r24
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	a0 ea       	ldi	r26, 0xA0	; 160
    2a7c:	b0 e4       	ldi	r27, 0x40	; 64
    2a7e:	8b 87       	std	Y+11, r24	; 0x0b
    2a80:	9c 87       	std	Y+12, r25	; 0x0c
    2a82:	ad 87       	std	Y+13, r26	; 0x0d
    2a84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a86:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a88:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	4a ef       	ldi	r20, 0xFA	; 250
    2a94:	54 e4       	ldi	r21, 0x44	; 68
    2a96:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	8f 83       	std	Y+7, r24	; 0x07
    2aa0:	98 87       	std	Y+8, r25	; 0x08
    2aa2:	a9 87       	std	Y+9, r26	; 0x09
    2aa4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2aa6:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa8:	78 85       	ldd	r23, Y+8	; 0x08
    2aaa:	89 85       	ldd	r24, Y+9	; 0x09
    2aac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	40 e8       	ldi	r20, 0x80	; 128
    2ab4:	5f e3       	ldi	r21, 0x3F	; 63
    2ab6:	0e 94 89 11 	call	0x2312	; 0x2312 <__ltsf2>
    2aba:	88 23       	and	r24, r24
    2abc:	2c f4       	brge	.+10     	; 0x2ac8 <UART_u8SendData_Sync+0x88>
		__ticks = 1;
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	9e 83       	std	Y+6, r25	; 0x06
    2ac4:	8d 83       	std	Y+5, r24	; 0x05
    2ac6:	3f c0       	rjmp	.+126    	; 0x2b46 <UART_u8SendData_Sync+0x106>
	else if (__tmp > 65535)
    2ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aca:	78 85       	ldd	r23, Y+8	; 0x08
    2acc:	89 85       	ldd	r24, Y+9	; 0x09
    2ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	3f ef       	ldi	r19, 0xFF	; 255
    2ad4:	4f e7       	ldi	r20, 0x7F	; 127
    2ad6:	57 e4       	ldi	r21, 0x47	; 71
    2ad8:	0e 94 29 11 	call	0x2252	; 0x2252 <__gtsf2>
    2adc:	18 16       	cp	r1, r24
    2ade:	4c f5       	brge	.+82     	; 0x2b32 <UART_u8SendData_Sync+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ae2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ae4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	40 e2       	ldi	r20, 0x20	; 32
    2aee:	51 e4       	ldi	r21, 0x41	; 65
    2af0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	bc 01       	movw	r22, r24
    2afa:	cd 01       	movw	r24, r26
    2afc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	9e 83       	std	Y+6, r25	; 0x06
    2b06:	8d 83       	std	Y+5, r24	; 0x05
    2b08:	0f c0       	rjmp	.+30     	; 0x2b28 <UART_u8SendData_Sync+0xe8>
    2b0a:	88 ec       	ldi	r24, 0xC8	; 200
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	9c 83       	std	Y+4, r25	; 0x04
    2b10:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b12:	8b 81       	ldd	r24, Y+3	; 0x03
    2b14:	9c 81       	ldd	r25, Y+4	; 0x04
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	f1 f7       	brne	.-4      	; 0x2b16 <UART_u8SendData_Sync+0xd6>
    2b1a:	9c 83       	std	Y+4, r25	; 0x04
    2b1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b20:	9e 81       	ldd	r25, Y+6	; 0x06
    2b22:	01 97       	sbiw	r24, 0x01	; 1
    2b24:	9e 83       	std	Y+6, r25	; 0x06
    2b26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b28:	8d 81       	ldd	r24, Y+5	; 0x05
    2b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b2c:	00 97       	sbiw	r24, 0x00	; 0
    2b2e:	69 f7       	brne	.-38     	; 0x2b0a <UART_u8SendData_Sync+0xca>
    2b30:	14 c0       	rjmp	.+40     	; 0x2b5a <UART_u8SendData_Sync+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b32:	6f 81       	ldd	r22, Y+7	; 0x07
    2b34:	78 85       	ldd	r23, Y+8	; 0x08
    2b36:	89 85       	ldd	r24, Y+9	; 0x09
    2b38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b3a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2b3e:	dc 01       	movw	r26, r24
    2b40:	cb 01       	movw	r24, r22
    2b42:	9e 83       	std	Y+6, r25	; 0x06
    2b44:	8d 83       	std	Y+5, r24	; 0x05
    2b46:	8d 81       	ldd	r24, Y+5	; 0x05
    2b48:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4a:	9a 83       	std	Y+2, r25	; 0x02
    2b4c:	89 83       	std	Y+1, r24	; 0x01
    2b4e:	89 81       	ldd	r24, Y+1	; 0x01
    2b50:	9a 81       	ldd	r25, Y+2	; 0x02
    2b52:	01 97       	sbiw	r24, 0x01	; 1
    2b54:	f1 f7       	brne	.-4      	; 0x2b52 <UART_u8SendData_Sync+0x112>
    2b56:	9a 83       	std	Y+2, r25	; 0x02
    2b58:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    2b5a:	2f 96       	adiw	r28, 0x0f	; 15
    2b5c:	0f b6       	in	r0, 0x3f	; 63
    2b5e:	f8 94       	cli
    2b60:	de bf       	out	0x3e, r29	; 62
    2b62:	0f be       	out	0x3f, r0	; 63
    2b64:	cd bf       	out	0x3d, r28	; 61
    2b66:	cf 91       	pop	r28
    2b68:	df 91       	pop	r29
    2b6a:	08 95       	ret

00002b6c <UART_voidReceiveData_Sync>:
u8 UART_voidReceiveData_Sync(void)
{
    2b6c:	df 93       	push	r29
    2b6e:	cf 93       	push	r28
    2b70:	cd b7       	in	r28, 0x3d	; 61
    2b72:	de b7       	in	r29, 0x3e	; 62
	while(  GET_BIT( UCSRA_REG , RX_COMPLETE_FLAG_BIT ) == 0  );
    2b74:	eb e2       	ldi	r30, 0x2B	; 43
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	80 81       	ld	r24, Z
    2b7a:	88 23       	and	r24, r24
    2b7c:	dc f7       	brge	.-10     	; 0x2b74 <UART_voidReceiveData_Sync+0x8>
	return UDR_REG;
    2b7e:	ec e2       	ldi	r30, 0x2C	; 44
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	80 81       	ld	r24, Z
}
    2b84:	cf 91       	pop	r28
    2b86:	df 91       	pop	r29
    2b88:	08 95       	ret

00002b8a <UART_u8SendData_Async>:

void UART_u8SendData_Async(u8 Copy_Data)
{
    2b8a:	df 93       	push	r29
    2b8c:	cf 93       	push	r28
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
    2b92:	2f 97       	sbiw	r28, 0x0f	; 15
    2b94:	0f b6       	in	r0, 0x3f	; 63
    2b96:	f8 94       	cli
    2b98:	de bf       	out	0x3e, r29	; 62
    2b9a:	0f be       	out	0x3f, r0	; 63
    2b9c:	cd bf       	out	0x3d, r28	; 61
    2b9e:	8f 87       	std	Y+15, r24	; 0x0f

	UDR_REG = Copy_Data ;
    2ba0:	ec e2       	ldi	r30, 0x2C	; 44
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ba6:	80 83       	st	Z, r24
    2ba8:	80 e0       	ldi	r24, 0x00	; 0
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	a0 ea       	ldi	r26, 0xA0	; 160
    2bae:	b0 e4       	ldi	r27, 0x40	; 64
    2bb0:	8b 87       	std	Y+11, r24	; 0x0b
    2bb2:	9c 87       	std	Y+12, r25	; 0x0c
    2bb4:	ad 87       	std	Y+13, r26	; 0x0d
    2bb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bba:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	4a ef       	ldi	r20, 0xFA	; 250
    2bc6:	54 e4       	ldi	r21, 0x44	; 68
    2bc8:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	8f 83       	std	Y+7, r24	; 0x07
    2bd2:	98 87       	std	Y+8, r25	; 0x08
    2bd4:	a9 87       	std	Y+9, r26	; 0x09
    2bd6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bd8:	6f 81       	ldd	r22, Y+7	; 0x07
    2bda:	78 85       	ldd	r23, Y+8	; 0x08
    2bdc:	89 85       	ldd	r24, Y+9	; 0x09
    2bde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	40 e8       	ldi	r20, 0x80	; 128
    2be6:	5f e3       	ldi	r21, 0x3F	; 63
    2be8:	0e 94 89 11 	call	0x2312	; 0x2312 <__ltsf2>
    2bec:	88 23       	and	r24, r24
    2bee:	2c f4       	brge	.+10     	; 0x2bfa <UART_u8SendData_Async+0x70>
		__ticks = 1;
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	9e 83       	std	Y+6, r25	; 0x06
    2bf6:	8d 83       	std	Y+5, r24	; 0x05
    2bf8:	3f c0       	rjmp	.+126    	; 0x2c78 <UART_u8SendData_Async+0xee>
	else if (__tmp > 65535)
    2bfa:	6f 81       	ldd	r22, Y+7	; 0x07
    2bfc:	78 85       	ldd	r23, Y+8	; 0x08
    2bfe:	89 85       	ldd	r24, Y+9	; 0x09
    2c00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	3f ef       	ldi	r19, 0xFF	; 255
    2c06:	4f e7       	ldi	r20, 0x7F	; 127
    2c08:	57 e4       	ldi	r21, 0x47	; 71
    2c0a:	0e 94 29 11 	call	0x2252	; 0x2252 <__gtsf2>
    2c0e:	18 16       	cp	r1, r24
    2c10:	4c f5       	brge	.+82     	; 0x2c64 <UART_u8SendData_Async+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	40 e2       	ldi	r20, 0x20	; 32
    2c20:	51 e4       	ldi	r21, 0x41	; 65
    2c22:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	bc 01       	movw	r22, r24
    2c2c:	cd 01       	movw	r24, r26
    2c2e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	9e 83       	std	Y+6, r25	; 0x06
    2c38:	8d 83       	std	Y+5, r24	; 0x05
    2c3a:	0f c0       	rjmp	.+30     	; 0x2c5a <UART_u8SendData_Async+0xd0>
    2c3c:	88 ec       	ldi	r24, 0xC8	; 200
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	9c 83       	std	Y+4, r25	; 0x04
    2c42:	8b 83       	std	Y+3, r24	; 0x03
    2c44:	8b 81       	ldd	r24, Y+3	; 0x03
    2c46:	9c 81       	ldd	r25, Y+4	; 0x04
    2c48:	01 97       	sbiw	r24, 0x01	; 1
    2c4a:	f1 f7       	brne	.-4      	; 0x2c48 <UART_u8SendData_Async+0xbe>
    2c4c:	9c 83       	std	Y+4, r25	; 0x04
    2c4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c50:	8d 81       	ldd	r24, Y+5	; 0x05
    2c52:	9e 81       	ldd	r25, Y+6	; 0x06
    2c54:	01 97       	sbiw	r24, 0x01	; 1
    2c56:	9e 83       	std	Y+6, r25	; 0x06
    2c58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c5e:	00 97       	sbiw	r24, 0x00	; 0
    2c60:	69 f7       	brne	.-38     	; 0x2c3c <UART_u8SendData_Async+0xb2>
    2c62:	14 c0       	rjmp	.+40     	; 0x2c8c <UART_u8SendData_Async+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c64:	6f 81       	ldd	r22, Y+7	; 0x07
    2c66:	78 85       	ldd	r23, Y+8	; 0x08
    2c68:	89 85       	ldd	r24, Y+9	; 0x09
    2c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c6c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	9e 83       	std	Y+6, r25	; 0x06
    2c76:	8d 83       	std	Y+5, r24	; 0x05
    2c78:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7c:	9a 83       	std	Y+2, r25	; 0x02
    2c7e:	89 83       	std	Y+1, r24	; 0x01
    2c80:	89 81       	ldd	r24, Y+1	; 0x01
    2c82:	9a 81       	ldd	r25, Y+2	; 0x02
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	f1 f7       	brne	.-4      	; 0x2c84 <UART_u8SendData_Async+0xfa>
    2c88:	9a 83       	std	Y+2, r25	; 0x02
    2c8a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    2c8c:	2f 96       	adiw	r28, 0x0f	; 15
    2c8e:	0f b6       	in	r0, 0x3f	; 63
    2c90:	f8 94       	cli
    2c92:	de bf       	out	0x3e, r29	; 62
    2c94:	0f be       	out	0x3f, r0	; 63
    2c96:	cd bf       	out	0x3d, r28	; 61
    2c98:	cf 91       	pop	r28
    2c9a:	df 91       	pop	r29
    2c9c:	08 95       	ret

00002c9e <UART_voidReceiveData_Async>:

u8 UART_voidReceiveData_Async(void)
{
    2c9e:	df 93       	push	r29
    2ca0:	cf 93       	push	r28
    2ca2:	cd b7       	in	r28, 0x3d	; 61
    2ca4:	de b7       	in	r29, 0x3e	; 62


	return UDR_REG;
    2ca6:	ec e2       	ldi	r30, 0x2C	; 44
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	80 81       	ld	r24, Z
}
    2cac:	cf 91       	pop	r28
    2cae:	df 91       	pop	r29
    2cb0:	08 95       	ret

00002cb2 <UART_voidCallBackFunSending>:

static u8 UART_Sending_Flag = 0;
static u8 UART_Receiving_Flag = 0;

void UART_voidCallBackFunSending ( void (*Ptr_To_Func)(void) )
{//Register Empty
    2cb2:	df 93       	push	r29
    2cb4:	cf 93       	push	r28
    2cb6:	00 d0       	rcall	.+0      	; 0x2cb8 <UART_voidCallBackFunSending+0x6>
    2cb8:	cd b7       	in	r28, 0x3d	; 61
    2cba:	de b7       	in	r29, 0x3e	; 62
    2cbc:	9a 83       	std	Y+2, r25	; 0x02
    2cbe:	89 83       	std	Y+1, r24	; 0x01
	if(Ptr_To_Func != NULL  && UART_Sending_Flag ==0)
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
    2cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc4:	00 97       	sbiw	r24, 0x00	; 0
    2cc6:	69 f0       	breq	.+26     	; 0x2ce2 <UART_voidCallBackFunSending+0x30>
    2cc8:	80 91 9c 02 	lds	r24, 0x029C
    2ccc:	88 23       	and	r24, r24
    2cce:	49 f4       	brne	.+18     	; 0x2ce2 <UART_voidCallBackFunSending+0x30>
	{
		UART_Sending_Flag = 1;
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	80 93 9c 02 	sts	0x029C, r24
		Global_Ptr_To_FunNotification = Ptr_To_Func ;
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cda:	90 93 9b 02 	sts	0x029B, r25
    2cde:	80 93 9a 02 	sts	0x029A, r24
	}
	SET_BIT( UCSRB_REG ,  DATA_REG_EMPTY_INTERRUPT_ENABLE_BIT );
    2ce2:	aa e2       	ldi	r26, 0x2A	; 42
    2ce4:	b0 e0       	ldi	r27, 0x00	; 0
    2ce6:	ea e2       	ldi	r30, 0x2A	; 42
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	80 81       	ld	r24, Z
    2cec:	80 62       	ori	r24, 0x20	; 32
    2cee:	8c 93       	st	X, r24

}
    2cf0:	0f 90       	pop	r0
    2cf2:	0f 90       	pop	r0
    2cf4:	cf 91       	pop	r28
    2cf6:	df 91       	pop	r29
    2cf8:	08 95       	ret

00002cfa <UART_voidCallBackFunReceiving>:

void UART_voidCallBackFunReceiving ( void (*Ptr_To_Func)(void) )
{//RX
    2cfa:	df 93       	push	r29
    2cfc:	cf 93       	push	r28
    2cfe:	00 d0       	rcall	.+0      	; 0x2d00 <UART_voidCallBackFunReceiving+0x6>
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
    2d04:	9a 83       	std	Y+2, r25	; 0x02
    2d06:	89 83       	std	Y+1, r24	; 0x01
	if(Ptr_To_Func != NULL  && UART_Receiving_Flag ==0)
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
    2d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0c:	00 97       	sbiw	r24, 0x00	; 0
    2d0e:	69 f0       	breq	.+26     	; 0x2d2a <UART_voidCallBackFunReceiving+0x30>
    2d10:	80 91 9d 02 	lds	r24, 0x029D
    2d14:	88 23       	and	r24, r24
    2d16:	49 f4       	brne	.+18     	; 0x2d2a <UART_voidCallBackFunReceiving+0x30>
	{
		UART_Receiving_Flag = 1;
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	80 93 9d 02 	sts	0x029D, r24
		Global_Ptr_To_FunNotification = Ptr_To_Func ;
    2d1e:	89 81       	ldd	r24, Y+1	; 0x01
    2d20:	9a 81       	ldd	r25, Y+2	; 0x02
    2d22:	90 93 9b 02 	sts	0x029B, r25
    2d26:	80 93 9a 02 	sts	0x029A, r24
	}
	SET_BIT( UCSRB_REG ,  RX_COMPLETE_INTERRUPT_ENABLE_BIT );
    2d2a:	aa e2       	ldi	r26, 0x2A	; 42
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	ea e2       	ldi	r30, 0x2A	; 42
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	80 68       	ori	r24, 0x80	; 128
    2d36:	8c 93       	st	X, r24

}
    2d38:	0f 90       	pop	r0
    2d3a:	0f 90       	pop	r0
    2d3c:	cf 91       	pop	r28
    2d3e:	df 91       	pop	r29
    2d40:	08 95       	ret

00002d42 <__vector_13>:


void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{//RX
    2d42:	1f 92       	push	r1
    2d44:	0f 92       	push	r0
    2d46:	0f b6       	in	r0, 0x3f	; 63
    2d48:	0f 92       	push	r0
    2d4a:	11 24       	eor	r1, r1
    2d4c:	2f 93       	push	r18
    2d4e:	3f 93       	push	r19
    2d50:	4f 93       	push	r20
    2d52:	5f 93       	push	r21
    2d54:	6f 93       	push	r22
    2d56:	7f 93       	push	r23
    2d58:	8f 93       	push	r24
    2d5a:	9f 93       	push	r25
    2d5c:	af 93       	push	r26
    2d5e:	bf 93       	push	r27
    2d60:	ef 93       	push	r30
    2d62:	ff 93       	push	r31
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
	if(Global_Ptr_To_FunNotification != NULL)
    2d6c:	80 91 9a 02 	lds	r24, 0x029A
    2d70:	90 91 9b 02 	lds	r25, 0x029B
    2d74:	00 97       	sbiw	r24, 0x00	; 0
    2d76:	29 f0       	breq	.+10     	; 0x2d82 <__vector_13+0x40>
	{
		Global_Ptr_To_FunNotification();
    2d78:	e0 91 9a 02 	lds	r30, 0x029A
    2d7c:	f0 91 9b 02 	lds	r31, 0x029B
    2d80:	09 95       	icall
	}
	   CLR_BIT( UCSRB_REG ,  RX_COMPLETE_INTERRUPT_ENABLE_BIT );
    2d82:	aa e2       	ldi	r26, 0x2A	; 42
    2d84:	b0 e0       	ldi	r27, 0x00	; 0
    2d86:	ea e2       	ldi	r30, 0x2A	; 42
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
    2d8c:	8f 77       	andi	r24, 0x7F	; 127
    2d8e:	8c 93       	st	X, r24
	   UART_Receiving_Flag = 0;
    2d90:	10 92 9d 02 	sts	0x029D, r1

}
    2d94:	cf 91       	pop	r28
    2d96:	df 91       	pop	r29
    2d98:	ff 91       	pop	r31
    2d9a:	ef 91       	pop	r30
    2d9c:	bf 91       	pop	r27
    2d9e:	af 91       	pop	r26
    2da0:	9f 91       	pop	r25
    2da2:	8f 91       	pop	r24
    2da4:	7f 91       	pop	r23
    2da6:	6f 91       	pop	r22
    2da8:	5f 91       	pop	r21
    2daa:	4f 91       	pop	r20
    2dac:	3f 91       	pop	r19
    2dae:	2f 91       	pop	r18
    2db0:	0f 90       	pop	r0
    2db2:	0f be       	out	0x3f, r0	; 63
    2db4:	0f 90       	pop	r0
    2db6:	1f 90       	pop	r1
    2db8:	18 95       	reti

00002dba <__vector_14>:


void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{//Register Empty
    2dba:	1f 92       	push	r1
    2dbc:	0f 92       	push	r0
    2dbe:	0f b6       	in	r0, 0x3f	; 63
    2dc0:	0f 92       	push	r0
    2dc2:	11 24       	eor	r1, r1
    2dc4:	2f 93       	push	r18
    2dc6:	3f 93       	push	r19
    2dc8:	4f 93       	push	r20
    2dca:	5f 93       	push	r21
    2dcc:	6f 93       	push	r22
    2dce:	7f 93       	push	r23
    2dd0:	8f 93       	push	r24
    2dd2:	9f 93       	push	r25
    2dd4:	af 93       	push	r26
    2dd6:	bf 93       	push	r27
    2dd8:	ef 93       	push	r30
    2dda:	ff 93       	push	r31
    2ddc:	df 93       	push	r29
    2dde:	cf 93       	push	r28
    2de0:	cd b7       	in	r28, 0x3d	; 61
    2de2:	de b7       	in	r29, 0x3e	; 62

	if(Global_Ptr_To_FunNotification != NULL)
    2de4:	80 91 9a 02 	lds	r24, 0x029A
    2de8:	90 91 9b 02 	lds	r25, 0x029B
    2dec:	00 97       	sbiw	r24, 0x00	; 0
    2dee:	29 f0       	breq	.+10     	; 0x2dfa <__vector_14+0x40>
	{
		Global_Ptr_To_FunNotification();
    2df0:	e0 91 9a 02 	lds	r30, 0x029A
    2df4:	f0 91 9b 02 	lds	r31, 0x029B
    2df8:	09 95       	icall
	}
	CLR_BIT( UCSRB_REG ,   DATA_REG_EMPTY_INTERRUPT_ENABLE_BIT);
    2dfa:	aa e2       	ldi	r26, 0x2A	; 42
    2dfc:	b0 e0       	ldi	r27, 0x00	; 0
    2dfe:	ea e2       	ldi	r30, 0x2A	; 42
    2e00:	f0 e0       	ldi	r31, 0x00	; 0
    2e02:	80 81       	ld	r24, Z
    2e04:	8f 7d       	andi	r24, 0xDF	; 223
    2e06:	8c 93       	st	X, r24
	UART_Sending_Flag = 0;
    2e08:	10 92 9c 02 	sts	0x029C, r1

}
    2e0c:	cf 91       	pop	r28
    2e0e:	df 91       	pop	r29
    2e10:	ff 91       	pop	r31
    2e12:	ef 91       	pop	r30
    2e14:	bf 91       	pop	r27
    2e16:	af 91       	pop	r26
    2e18:	9f 91       	pop	r25
    2e1a:	8f 91       	pop	r24
    2e1c:	7f 91       	pop	r23
    2e1e:	6f 91       	pop	r22
    2e20:	5f 91       	pop	r21
    2e22:	4f 91       	pop	r20
    2e24:	3f 91       	pop	r19
    2e26:	2f 91       	pop	r18
    2e28:	0f 90       	pop	r0
    2e2a:	0f be       	out	0x3f, r0	; 63
    2e2c:	0f 90       	pop	r0
    2e2e:	1f 90       	pop	r1
    2e30:	18 95       	reti

00002e32 <Timer_voidT0Init>:
static void (*Global_PtrToFun_Notification) (void) = NULL;



void Timer_voidT0Init(TIMER_CONFIG_T0 *Ptr_To_TIMERCONFIG)
{
    2e32:	df 93       	push	r29
    2e34:	cf 93       	push	r28
    2e36:	00 d0       	rcall	.+0      	; 0x2e38 <Timer_voidT0Init+0x6>
    2e38:	00 d0       	rcall	.+0      	; 0x2e3a <Timer_voidT0Init+0x8>
    2e3a:	00 d0       	rcall	.+0      	; 0x2e3c <Timer_voidT0Init+0xa>
    2e3c:	cd b7       	in	r28, 0x3d	; 61
    2e3e:	de b7       	in	r29, 0x3e	; 62
    2e40:	9a 83       	std	Y+2, r25	; 0x02
    2e42:	89 83       	std	Y+1, r24	; 0x01

	if( (Ptr_To_TIMERCONFIG->timer_mode) == NORMAL_MODE    ||  (Ptr_To_TIMERCONFIG->timer_mode) == CTC )
    2e44:	e9 81       	ldd	r30, Y+1	; 0x01
    2e46:	fa 81       	ldd	r31, Y+2	; 0x02
    2e48:	80 81       	ld	r24, Z
    2e4a:	88 23       	and	r24, r24
    2e4c:	29 f0       	breq	.+10     	; 0x2e58 <Timer_voidT0Init+0x26>
    2e4e:	e9 81       	ldd	r30, Y+1	; 0x01
    2e50:	fa 81       	ldd	r31, Y+2	; 0x02
    2e52:	80 81       	ld	r24, Z
    2e54:	82 30       	cpi	r24, 0x02	; 2
    2e56:	41 f4       	brne	.+16     	; 0x2e68 <Timer_voidT0Init+0x36>
	{
		SET_BIT( TCCR0_REG , FOC0_BIT);
    2e58:	a3 e5       	ldi	r26, 0x53	; 83
    2e5a:	b0 e0       	ldi	r27, 0x00	; 0
    2e5c:	e3 e5       	ldi	r30, 0x53	; 83
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	80 81       	ld	r24, Z
    2e62:	80 68       	ori	r24, 0x80	; 128
    2e64:	8c 93       	st	X, r24
    2e66:	07 c0       	rjmp	.+14     	; 0x2e76 <Timer_voidT0Init+0x44>
	}
	else
	{
		CLR_BIT( TCCR0_REG , FOC0_BIT);
    2e68:	a3 e5       	ldi	r26, 0x53	; 83
    2e6a:	b0 e0       	ldi	r27, 0x00	; 0
    2e6c:	e3 e5       	ldi	r30, 0x53	; 83
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	80 81       	ld	r24, Z
    2e72:	8f 77       	andi	r24, 0x7F	; 127
    2e74:	8c 93       	st	X, r24
	}

	switch (Ptr_To_TIMERCONFIG ->timer_mode)
    2e76:	e9 81       	ldd	r30, Y+1	; 0x01
    2e78:	fa 81       	ldd	r31, Y+2	; 0x02
    2e7a:	80 81       	ld	r24, Z
    2e7c:	28 2f       	mov	r18, r24
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	3e 83       	std	Y+6, r19	; 0x06
    2e82:	2d 83       	std	Y+5, r18	; 0x05
    2e84:	8d 81       	ldd	r24, Y+5	; 0x05
    2e86:	9e 81       	ldd	r25, Y+6	; 0x06
    2e88:	81 30       	cpi	r24, 0x01	; 1
    2e8a:	91 05       	cpc	r25, r1
    2e8c:	21 f1       	breq	.+72     	; 0x2ed6 <Timer_voidT0Init+0xa4>
    2e8e:	2d 81       	ldd	r18, Y+5	; 0x05
    2e90:	3e 81       	ldd	r19, Y+6	; 0x06
    2e92:	22 30       	cpi	r18, 0x02	; 2
    2e94:	31 05       	cpc	r19, r1
    2e96:	2c f4       	brge	.+10     	; 0x2ea2 <Timer_voidT0Init+0x70>
    2e98:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9c:	00 97       	sbiw	r24, 0x00	; 0
    2e9e:	61 f0       	breq	.+24     	; 0x2eb8 <Timer_voidT0Init+0x86>
    2ea0:	46 c0       	rjmp	.+140    	; 0x2f2e <Timer_voidT0Init+0xfc>
    2ea2:	2d 81       	ldd	r18, Y+5	; 0x05
    2ea4:	3e 81       	ldd	r19, Y+6	; 0x06
    2ea6:	22 30       	cpi	r18, 0x02	; 2
    2ea8:	31 05       	cpc	r19, r1
    2eaa:	21 f1       	breq	.+72     	; 0x2ef4 <Timer_voidT0Init+0xc2>
    2eac:	8d 81       	ldd	r24, Y+5	; 0x05
    2eae:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb0:	83 30       	cpi	r24, 0x03	; 3
    2eb2:	91 05       	cpc	r25, r1
    2eb4:	71 f1       	breq	.+92     	; 0x2f12 <Timer_voidT0Init+0xe0>
    2eb6:	3b c0       	rjmp	.+118    	; 0x2f2e <Timer_voidT0Init+0xfc>
	{
	case NORMAL_MODE:
		CLR_BIT(TCCR0_REG , WGMOO_BIT);
    2eb8:	a3 e5       	ldi	r26, 0x53	; 83
    2eba:	b0 e0       	ldi	r27, 0x00	; 0
    2ebc:	e3 e5       	ldi	r30, 0x53	; 83
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	80 81       	ld	r24, Z
    2ec2:	8f 7b       	andi	r24, 0xBF	; 191
    2ec4:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG , WGM01_BIT);
    2ec6:	a3 e5       	ldi	r26, 0x53	; 83
    2ec8:	b0 e0       	ldi	r27, 0x00	; 0
    2eca:	e3 e5       	ldi	r30, 0x53	; 83
    2ecc:	f0 e0       	ldi	r31, 0x00	; 0
    2ece:	80 81       	ld	r24, Z
    2ed0:	87 7f       	andi	r24, 0xF7	; 247
    2ed2:	8c 93       	st	X, r24
    2ed4:	2c c0       	rjmp	.+88     	; 0x2f2e <Timer_voidT0Init+0xfc>
		break;

	case PWM_PHASE_CORRECT:
		SET_BIT(TCCR0_REG , WGMOO_BIT);
    2ed6:	a3 e5       	ldi	r26, 0x53	; 83
    2ed8:	b0 e0       	ldi	r27, 0x00	; 0
    2eda:	e3 e5       	ldi	r30, 0x53	; 83
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	80 81       	ld	r24, Z
    2ee0:	80 64       	ori	r24, 0x40	; 64
    2ee2:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG , WGM01_BIT);
    2ee4:	a3 e5       	ldi	r26, 0x53	; 83
    2ee6:	b0 e0       	ldi	r27, 0x00	; 0
    2ee8:	e3 e5       	ldi	r30, 0x53	; 83
    2eea:	f0 e0       	ldi	r31, 0x00	; 0
    2eec:	80 81       	ld	r24, Z
    2eee:	87 7f       	andi	r24, 0xF7	; 247
    2ef0:	8c 93       	st	X, r24
    2ef2:	1d c0       	rjmp	.+58     	; 0x2f2e <Timer_voidT0Init+0xfc>
		break;

	case CTC:
		CLR_BIT(TCCR0_REG , WGMOO_BIT);
    2ef4:	a3 e5       	ldi	r26, 0x53	; 83
    2ef6:	b0 e0       	ldi	r27, 0x00	; 0
    2ef8:	e3 e5       	ldi	r30, 0x53	; 83
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	80 81       	ld	r24, Z
    2efe:	8f 7b       	andi	r24, 0xBF	; 191
    2f00:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG , WGM01_BIT);
    2f02:	a3 e5       	ldi	r26, 0x53	; 83
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	e3 e5       	ldi	r30, 0x53	; 83
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	80 81       	ld	r24, Z
    2f0c:	88 60       	ori	r24, 0x08	; 8
    2f0e:	8c 93       	st	X, r24
    2f10:	0e c0       	rjmp	.+28     	; 0x2f2e <Timer_voidT0Init+0xfc>
		break;

	case FAST_PWM:
		SET_BIT(TCCR0_REG , WGMOO_BIT);
    2f12:	a3 e5       	ldi	r26, 0x53	; 83
    2f14:	b0 e0       	ldi	r27, 0x00	; 0
    2f16:	e3 e5       	ldi	r30, 0x53	; 83
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	80 81       	ld	r24, Z
    2f1c:	80 64       	ori	r24, 0x40	; 64
    2f1e:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG , WGM01_BIT);
    2f20:	a3 e5       	ldi	r26, 0x53	; 83
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	e3 e5       	ldi	r30, 0x53	; 83
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	80 81       	ld	r24, Z
    2f2a:	88 60       	ori	r24, 0x08	; 8
    2f2c:	8c 93       	st	X, r24

	default :
		break;
	}

	TCCR0_REG &= 0xCF ;
    2f2e:	a3 e5       	ldi	r26, 0x53	; 83
    2f30:	b0 e0       	ldi	r27, 0x00	; 0
    2f32:	e3 e5       	ldi	r30, 0x53	; 83
    2f34:	f0 e0       	ldi	r31, 0x00	; 0
    2f36:	80 81       	ld	r24, Z
    2f38:	8f 7c       	andi	r24, 0xCF	; 207
    2f3a:	8c 93       	st	X, r24
	TCCR0_REG |= ( (Ptr_To_TIMERCONFIG->control_oc) << 4 );
    2f3c:	a3 e5       	ldi	r26, 0x53	; 83
    2f3e:	b0 e0       	ldi	r27, 0x00	; 0
    2f40:	e3 e5       	ldi	r30, 0x53	; 83
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	80 81       	ld	r24, Z
    2f46:	28 2f       	mov	r18, r24
    2f48:	e9 81       	ldd	r30, Y+1	; 0x01
    2f4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f4c:	81 81       	ldd	r24, Z+1	; 0x01
    2f4e:	88 2f       	mov	r24, r24
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	82 95       	swap	r24
    2f54:	92 95       	swap	r25
    2f56:	90 7f       	andi	r25, 0xF0	; 240
    2f58:	98 27       	eor	r25, r24
    2f5a:	80 7f       	andi	r24, 0xF0	; 240
    2f5c:	98 27       	eor	r25, r24
    2f5e:	82 2b       	or	r24, r18
    2f60:	8c 93       	st	X, r24

	TCCR0_REG &= 0xF8 ;
    2f62:	a3 e5       	ldi	r26, 0x53	; 83
    2f64:	b0 e0       	ldi	r27, 0x00	; 0
    2f66:	e3 e5       	ldi	r30, 0x53	; 83
    2f68:	f0 e0       	ldi	r31, 0x00	; 0
    2f6a:	80 81       	ld	r24, Z
    2f6c:	88 7f       	andi	r24, 0xF8	; 248
    2f6e:	8c 93       	st	X, r24
	TCCR0_REG |= (Ptr_To_TIMERCONFIG->clock_source);
    2f70:	a3 e5       	ldi	r26, 0x53	; 83
    2f72:	b0 e0       	ldi	r27, 0x00	; 0
    2f74:	e3 e5       	ldi	r30, 0x53	; 83
    2f76:	f0 e0       	ldi	r31, 0x00	; 0
    2f78:	90 81       	ld	r25, Z
    2f7a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f7c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f7e:	82 81       	ldd	r24, Z+2	; 0x02
    2f80:	89 2b       	or	r24, r25
    2f82:	8c 93       	st	X, r24

#if (TIMER0_TECHNIQUE == POLLING)

#elif (TIMER0_TECHNIQUE == INTRRUPT)
	switch (Ptr_To_TIMERCONFIG->timer_mode)
    2f84:	e9 81       	ldd	r30, Y+1	; 0x01
    2f86:	fa 81       	ldd	r31, Y+2	; 0x02
    2f88:	80 81       	ld	r24, Z
    2f8a:	28 2f       	mov	r18, r24
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	3c 83       	std	Y+4, r19	; 0x04
    2f90:	2b 83       	std	Y+3, r18	; 0x03
    2f92:	8b 81       	ldd	r24, Y+3	; 0x03
    2f94:	9c 81       	ldd	r25, Y+4	; 0x04
    2f96:	00 97       	sbiw	r24, 0x00	; 0
    2f98:	31 f0       	breq	.+12     	; 0x2fa6 <Timer_voidT0Init+0x174>
    2f9a:	2b 81       	ldd	r18, Y+3	; 0x03
    2f9c:	3c 81       	ldd	r19, Y+4	; 0x04
    2f9e:	22 30       	cpi	r18, 0x02	; 2
    2fa0:	31 05       	cpc	r19, r1
    2fa2:	49 f0       	breq	.+18     	; 0x2fb6 <Timer_voidT0Init+0x184>
    2fa4:	0f c0       	rjmp	.+30     	; 0x2fc4 <Timer_voidT0Init+0x192>
	{
	case NORMAL_MODE:
		SET_BIT(TIMSK_REG , TOIE0_BIT );
    2fa6:	a9 e5       	ldi	r26, 0x59	; 89
    2fa8:	b0 e0       	ldi	r27, 0x00	; 0
    2faa:	e9 e5       	ldi	r30, 0x59	; 89
    2fac:	f0 e0       	ldi	r31, 0x00	; 0
    2fae:	80 81       	ld	r24, Z
    2fb0:	81 60       	ori	r24, 0x01	; 1
    2fb2:	8c 93       	st	X, r24
    2fb4:	07 c0       	rjmp	.+14     	; 0x2fc4 <Timer_voidT0Init+0x192>
		break;

	case CTC:
		SET_BIT(TIMSK_REG , OCIE0_BIT );
    2fb6:	a9 e5       	ldi	r26, 0x59	; 89
    2fb8:	b0 e0       	ldi	r27, 0x00	; 0
    2fba:	e9 e5       	ldi	r30, 0x59	; 89
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	80 81       	ld	r24, Z
    2fc0:	82 60       	ori	r24, 0x02	; 2
    2fc2:	8c 93       	st	X, r24
		break;

	}
#endif

}
    2fc4:	26 96       	adiw	r28, 0x06	; 6
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	f8 94       	cli
    2fca:	de bf       	out	0x3e, r29	; 62
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	cd bf       	out	0x3d, r28	; 61
    2fd0:	cf 91       	pop	r28
    2fd2:	df 91       	pop	r29
    2fd4:	08 95       	ret

00002fd6 <Timer_voidT0Dinit>:


void Timer_voidT0Dinit (void)
{
    2fd6:	df 93       	push	r29
    2fd8:	cf 93       	push	r28
    2fda:	cd b7       	in	r28, 0x3d	; 61
    2fdc:	de b7       	in	r29, 0x3e	; 62
	OCR0_REG   = 0;
    2fde:	ec e5       	ldi	r30, 0x5C	; 92
    2fe0:	f0 e0       	ldi	r31, 0x00	; 0
    2fe2:	10 82       	st	Z, r1
	TCCR0_REG  = 0;
    2fe4:	e3 e5       	ldi	r30, 0x53	; 83
    2fe6:	f0 e0       	ldi	r31, 0x00	; 0
    2fe8:	10 82       	st	Z, r1
	TCNT0_REG  = 0;
    2fea:	e2 e5       	ldi	r30, 0x52	; 82
    2fec:	f0 e0       	ldi	r31, 0x00	; 0
    2fee:	10 82       	st	Z, r1
	TIMSK_REG &= 0xFC;
    2ff0:	a9 e5       	ldi	r26, 0x59	; 89
    2ff2:	b0 e0       	ldi	r27, 0x00	; 0
    2ff4:	e9 e5       	ldi	r30, 0x59	; 89
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	80 81       	ld	r24, Z
    2ffa:	8c 7f       	andi	r24, 0xFC	; 252
    2ffc:	8c 93       	st	X, r24
}
    2ffe:	cf 91       	pop	r28
    3000:	df 91       	pop	r29
    3002:	08 95       	ret

00003004 <Timer_StartT0>:

void Timer_StartT0(TIMER_CONFIG_T0 *Ptr_To_TIMERCONFIG)
{
    3004:	df 93       	push	r29
    3006:	cf 93       	push	r28
    3008:	00 d0       	rcall	.+0      	; 0x300a <Timer_StartT0+0x6>
    300a:	00 d0       	rcall	.+0      	; 0x300c <Timer_StartT0+0x8>
    300c:	cd b7       	in	r28, 0x3d	; 61
    300e:	de b7       	in	r29, 0x3e	; 62
    3010:	9a 83       	std	Y+2, r25	; 0x02
    3012:	89 83       	std	Y+1, r24	; 0x01
	default:
		break;
	}

#elif (TIMER0_TECHNIQUE == INTRRUPT)
	switch (Ptr_To_TIMERCONFIG->timer_mode)
    3014:	e9 81       	ldd	r30, Y+1	; 0x01
    3016:	fa 81       	ldd	r31, Y+2	; 0x02
    3018:	80 81       	ld	r24, Z
    301a:	28 2f       	mov	r18, r24
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	3c 83       	std	Y+4, r19	; 0x04
    3020:	2b 83       	std	Y+3, r18	; 0x03
    3022:	8b 81       	ldd	r24, Y+3	; 0x03
    3024:	9c 81       	ldd	r25, Y+4	; 0x04
    3026:	81 30       	cpi	r24, 0x01	; 1
    3028:	91 05       	cpc	r25, r1
    302a:	a1 f1       	breq	.+104    	; 0x3094 <Timer_StartT0+0x90>
    302c:	2b 81       	ldd	r18, Y+3	; 0x03
    302e:	3c 81       	ldd	r19, Y+4	; 0x04
    3030:	22 30       	cpi	r18, 0x02	; 2
    3032:	31 05       	cpc	r19, r1
    3034:	2c f4       	brge	.+10     	; 0x3040 <Timer_StartT0+0x3c>
    3036:	8b 81       	ldd	r24, Y+3	; 0x03
    3038:	9c 81       	ldd	r25, Y+4	; 0x04
    303a:	00 97       	sbiw	r24, 0x00	; 0
    303c:	61 f0       	breq	.+24     	; 0x3056 <Timer_StartT0+0x52>
    303e:	32 c0       	rjmp	.+100    	; 0x30a4 <Timer_StartT0+0xa0>
    3040:	2b 81       	ldd	r18, Y+3	; 0x03
    3042:	3c 81       	ldd	r19, Y+4	; 0x04
    3044:	22 30       	cpi	r18, 0x02	; 2
    3046:	31 05       	cpc	r19, r1
    3048:	79 f0       	breq	.+30     	; 0x3068 <Timer_StartT0+0x64>
    304a:	8b 81       	ldd	r24, Y+3	; 0x03
    304c:	9c 81       	ldd	r25, Y+4	; 0x04
    304e:	83 30       	cpi	r24, 0x03	; 3
    3050:	91 05       	cpc	r25, r1
    3052:	b9 f0       	breq	.+46     	; 0x3082 <Timer_StartT0+0x7e>
    3054:	27 c0       	rjmp	.+78     	; 0x30a4 <Timer_StartT0+0xa0>
	{
	case NORMAL_MODE:
		TCNT0_REG = Ptr_To_TIMERCONFIG->Preload_Value;
    3056:	e2 e5       	ldi	r30, 0x52	; 82
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	a9 81       	ldd	r26, Y+1	; 0x01
    305c:	ba 81       	ldd	r27, Y+2	; 0x02
    305e:	13 96       	adiw	r26, 0x03	; 3
    3060:	8c 91       	ld	r24, X
    3062:	13 97       	sbiw	r26, 0x03	; 3
    3064:	80 83       	st	Z, r24
    3066:	1e c0       	rjmp	.+60     	; 0x30a4 <Timer_StartT0+0xa0>
		break;

	case CTC:
		TCNT0_REG = Ptr_To_TIMERCONFIG->Preload_Value;
    3068:	a2 e5       	ldi	r26, 0x52	; 82
    306a:	b0 e0       	ldi	r27, 0x00	; 0
    306c:	e9 81       	ldd	r30, Y+1	; 0x01
    306e:	fa 81       	ldd	r31, Y+2	; 0x02
    3070:	83 81       	ldd	r24, Z+3	; 0x03
    3072:	8c 93       	st	X, r24
		OCR0_REG = Ptr_To_TIMERCONFIG->Compare_Value;
    3074:	ac e5       	ldi	r26, 0x5C	; 92
    3076:	b0 e0       	ldi	r27, 0x00	; 0
    3078:	e9 81       	ldd	r30, Y+1	; 0x01
    307a:	fa 81       	ldd	r31, Y+2	; 0x02
    307c:	84 81       	ldd	r24, Z+4	; 0x04
    307e:	8c 93       	st	X, r24
    3080:	11 c0       	rjmp	.+34     	; 0x30a4 <Timer_StartT0+0xa0>
		break;
	case FAST_PWM:
		OCR0_REG = Ptr_To_TIMERCONFIG->Compare_Value;
    3082:	ec e5       	ldi	r30, 0x5C	; 92
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	a9 81       	ldd	r26, Y+1	; 0x01
    3088:	ba 81       	ldd	r27, Y+2	; 0x02
    308a:	14 96       	adiw	r26, 0x04	; 4
    308c:	8c 91       	ld	r24, X
    308e:	14 97       	sbiw	r26, 0x04	; 4
    3090:	80 83       	st	Z, r24
    3092:	08 c0       	rjmp	.+16     	; 0x30a4 <Timer_StartT0+0xa0>
		break;

	case PWM_PHASE_CORRECT:
		OCR0_REG = Ptr_To_TIMERCONFIG->Compare_Value;
    3094:	ec e5       	ldi	r30, 0x5C	; 92
    3096:	f0 e0       	ldi	r31, 0x00	; 0
    3098:	a9 81       	ldd	r26, Y+1	; 0x01
    309a:	ba 81       	ldd	r27, Y+2	; 0x02
    309c:	14 96       	adiw	r26, 0x04	; 4
    309e:	8c 91       	ld	r24, X
    30a0:	14 97       	sbiw	r26, 0x04	; 4
    30a2:	80 83       	st	Z, r24
		break;
	}

#endif

}
    30a4:	0f 90       	pop	r0
    30a6:	0f 90       	pop	r0
    30a8:	0f 90       	pop	r0
    30aa:	0f 90       	pop	r0
    30ac:	cf 91       	pop	r28
    30ae:	df 91       	pop	r29
    30b0:	08 95       	ret

000030b2 <Timer_voidCallBackFun>:



void Timer_voidCallBackFun(void(*Ptr_To_Fun)(void))
{
    30b2:	df 93       	push	r29
    30b4:	cf 93       	push	r28
    30b6:	00 d0       	rcall	.+0      	; 0x30b8 <Timer_voidCallBackFun+0x6>
    30b8:	cd b7       	in	r28, 0x3d	; 61
    30ba:	de b7       	in	r29, 0x3e	; 62
    30bc:	9a 83       	std	Y+2, r25	; 0x02
    30be:	89 83       	std	Y+1, r24	; 0x01
	if(Ptr_To_Fun != NULL)
    30c0:	89 81       	ldd	r24, Y+1	; 0x01
    30c2:	9a 81       	ldd	r25, Y+2	; 0x02
    30c4:	00 97       	sbiw	r24, 0x00	; 0
    30c6:	31 f0       	breq	.+12     	; 0x30d4 <Timer_voidCallBackFun+0x22>
	{
		Global_PtrToFun_Notification = Ptr_To_Fun;
    30c8:	89 81       	ldd	r24, Y+1	; 0x01
    30ca:	9a 81       	ldd	r25, Y+2	; 0x02
    30cc:	90 93 9f 02 	sts	0x029F, r25
    30d0:	80 93 9e 02 	sts	0x029E, r24
	}
}
    30d4:	0f 90       	pop	r0
    30d6:	0f 90       	pop	r0
    30d8:	cf 91       	pop	r28
    30da:	df 91       	pop	r29
    30dc:	08 95       	ret

000030de <__vector_10>:


void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    30de:	1f 92       	push	r1
    30e0:	0f 92       	push	r0
    30e2:	0f b6       	in	r0, 0x3f	; 63
    30e4:	0f 92       	push	r0
    30e6:	11 24       	eor	r1, r1
    30e8:	2f 93       	push	r18
    30ea:	3f 93       	push	r19
    30ec:	4f 93       	push	r20
    30ee:	5f 93       	push	r21
    30f0:	6f 93       	push	r22
    30f2:	7f 93       	push	r23
    30f4:	8f 93       	push	r24
    30f6:	9f 93       	push	r25
    30f8:	af 93       	push	r26
    30fa:	bf 93       	push	r27
    30fc:	ef 93       	push	r30
    30fe:	ff 93       	push	r31
    3100:	df 93       	push	r29
    3102:	cf 93       	push	r28
    3104:	cd b7       	in	r28, 0x3d	; 61
    3106:	de b7       	in	r29, 0x3e	; 62
	//ctc
	if(Global_PtrToFun_Notification != NULL)
    3108:	80 91 9e 02 	lds	r24, 0x029E
    310c:	90 91 9f 02 	lds	r25, 0x029F
    3110:	00 97       	sbiw	r24, 0x00	; 0
    3112:	29 f0       	breq	.+10     	; 0x311e <__vector_10+0x40>
	(*Global_PtrToFun_Notification)();
    3114:	e0 91 9e 02 	lds	r30, 0x029E
    3118:	f0 91 9f 02 	lds	r31, 0x029F
    311c:	09 95       	icall


}
    311e:	cf 91       	pop	r28
    3120:	df 91       	pop	r29
    3122:	ff 91       	pop	r31
    3124:	ef 91       	pop	r30
    3126:	bf 91       	pop	r27
    3128:	af 91       	pop	r26
    312a:	9f 91       	pop	r25
    312c:	8f 91       	pop	r24
    312e:	7f 91       	pop	r23
    3130:	6f 91       	pop	r22
    3132:	5f 91       	pop	r21
    3134:	4f 91       	pop	r20
    3136:	3f 91       	pop	r19
    3138:	2f 91       	pop	r18
    313a:	0f 90       	pop	r0
    313c:	0f be       	out	0x3f, r0	; 63
    313e:	0f 90       	pop	r0
    3140:	1f 90       	pop	r1
    3142:	18 95       	reti

00003144 <__vector_11>:
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    3144:	1f 92       	push	r1
    3146:	0f 92       	push	r0
    3148:	0f b6       	in	r0, 0x3f	; 63
    314a:	0f 92       	push	r0
    314c:	11 24       	eor	r1, r1
    314e:	2f 93       	push	r18
    3150:	3f 93       	push	r19
    3152:	4f 93       	push	r20
    3154:	5f 93       	push	r21
    3156:	6f 93       	push	r22
    3158:	7f 93       	push	r23
    315a:	8f 93       	push	r24
    315c:	9f 93       	push	r25
    315e:	af 93       	push	r26
    3160:	bf 93       	push	r27
    3162:	ef 93       	push	r30
    3164:	ff 93       	push	r31
    3166:	df 93       	push	r29
    3168:	cf 93       	push	r28
    316a:	cd b7       	in	r28, 0x3d	; 61
    316c:	de b7       	in	r29, 0x3e	; 62
	// ovf
	if(Global_PtrToFun_Notification != NULL)
    316e:	80 91 9e 02 	lds	r24, 0x029E
    3172:	90 91 9f 02 	lds	r25, 0x029F
    3176:	00 97       	sbiw	r24, 0x00	; 0
    3178:	29 f0       	breq	.+10     	; 0x3184 <__vector_11+0x40>
	(*Global_PtrToFun_Notification)();
    317a:	e0 91 9e 02 	lds	r30, 0x029E
    317e:	f0 91 9f 02 	lds	r31, 0x029F
    3182:	09 95       	icall

}
    3184:	cf 91       	pop	r28
    3186:	df 91       	pop	r29
    3188:	ff 91       	pop	r31
    318a:	ef 91       	pop	r30
    318c:	bf 91       	pop	r27
    318e:	af 91       	pop	r26
    3190:	9f 91       	pop	r25
    3192:	8f 91       	pop	r24
    3194:	7f 91       	pop	r23
    3196:	6f 91       	pop	r22
    3198:	5f 91       	pop	r21
    319a:	4f 91       	pop	r20
    319c:	3f 91       	pop	r19
    319e:	2f 91       	pop	r18
    31a0:	0f 90       	pop	r0
    31a2:	0f be       	out	0x3f, r0	; 63
    31a4:	0f 90       	pop	r0
    31a6:	1f 90       	pop	r1
    31a8:	18 95       	reti

000031aa <Timer_voidT1Init>:



void Timer_voidT1Init( TIMER_CONFIG_T1 *Ptr_To_TIMERCONFIG)
{
    31aa:	df 93       	push	r29
    31ac:	cf 93       	push	r28
    31ae:	00 d0       	rcall	.+0      	; 0x31b0 <Timer_voidT1Init+0x6>
    31b0:	cd b7       	in	r28, 0x3d	; 61
    31b2:	de b7       	in	r29, 0x3e	; 62
    31b4:	9a 83       	std	Y+2, r25	; 0x02
    31b6:	89 83       	std	Y+1, r24	; 0x01
	// timer_mode
	TCCR1A_REG &= 0xFC ;
    31b8:	af e4       	ldi	r26, 0x4F	; 79
    31ba:	b0 e0       	ldi	r27, 0x00	; 0
    31bc:	ef e4       	ldi	r30, 0x4F	; 79
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	80 81       	ld	r24, Z
    31c2:	8c 7f       	andi	r24, 0xFC	; 252
    31c4:	8c 93       	st	X, r24
	TCCR1A_REG |= ( ( (Ptr_To_TIMERCONFIG->timer_mode_T1) & 0b0011) );
    31c6:	af e4       	ldi	r26, 0x4F	; 79
    31c8:	b0 e0       	ldi	r27, 0x00	; 0
    31ca:	ef e4       	ldi	r30, 0x4F	; 79
    31cc:	f0 e0       	ldi	r31, 0x00	; 0
    31ce:	80 81       	ld	r24, Z
    31d0:	98 2f       	mov	r25, r24
    31d2:	e9 81       	ldd	r30, Y+1	; 0x01
    31d4:	fa 81       	ldd	r31, Y+2	; 0x02
    31d6:	80 81       	ld	r24, Z
    31d8:	83 70       	andi	r24, 0x03	; 3
    31da:	89 2b       	or	r24, r25
    31dc:	8c 93       	st	X, r24

	TCCR1B_REG &= 0xE7 ;
    31de:	ae e4       	ldi	r26, 0x4E	; 78
    31e0:	b0 e0       	ldi	r27, 0x00	; 0
    31e2:	ee e4       	ldi	r30, 0x4E	; 78
    31e4:	f0 e0       	ldi	r31, 0x00	; 0
    31e6:	80 81       	ld	r24, Z
    31e8:	87 7e       	andi	r24, 0xE7	; 231
    31ea:	8c 93       	st	X, r24
	TCCR1B_REG |= ( ( (Ptr_To_TIMERCONFIG->timer_mode_T1) & 0b1100 ) << 1 );
    31ec:	ae e4       	ldi	r26, 0x4E	; 78
    31ee:	b0 e0       	ldi	r27, 0x00	; 0
    31f0:	ee e4       	ldi	r30, 0x4E	; 78
    31f2:	f0 e0       	ldi	r31, 0x00	; 0
    31f4:	80 81       	ld	r24, Z
    31f6:	28 2f       	mov	r18, r24
    31f8:	e9 81       	ldd	r30, Y+1	; 0x01
    31fa:	fa 81       	ldd	r31, Y+2	; 0x02
    31fc:	80 81       	ld	r24, Z
    31fe:	88 2f       	mov	r24, r24
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	8c 70       	andi	r24, 0x0C	; 12
    3204:	90 70       	andi	r25, 0x00	; 0
    3206:	88 0f       	add	r24, r24
    3208:	99 1f       	adc	r25, r25
    320a:	82 2b       	or	r24, r18
    320c:	8c 93       	st	X, r24


	//oc control
	TCCR1A_REG &= 0x3F ;
    320e:	af e4       	ldi	r26, 0x4F	; 79
    3210:	b0 e0       	ldi	r27, 0x00	; 0
    3212:	ef e4       	ldi	r30, 0x4F	; 79
    3214:	f0 e0       	ldi	r31, 0x00	; 0
    3216:	80 81       	ld	r24, Z
    3218:	8f 73       	andi	r24, 0x3F	; 63
    321a:	8c 93       	st	X, r24
	TCCR1A_REG |= ( (Ptr_To_TIMERCONFIG->control_oc_T1) << 6 );
    321c:	af e4       	ldi	r26, 0x4F	; 79
    321e:	b0 e0       	ldi	r27, 0x00	; 0
    3220:	ef e4       	ldi	r30, 0x4F	; 79
    3222:	f0 e0       	ldi	r31, 0x00	; 0
    3224:	80 81       	ld	r24, Z
    3226:	28 2f       	mov	r18, r24
    3228:	e9 81       	ldd	r30, Y+1	; 0x01
    322a:	fa 81       	ldd	r31, Y+2	; 0x02
    322c:	81 81       	ldd	r24, Z+1	; 0x01
    322e:	88 2f       	mov	r24, r24
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	00 24       	eor	r0, r0
    3234:	96 95       	lsr	r25
    3236:	87 95       	ror	r24
    3238:	07 94       	ror	r0
    323a:	96 95       	lsr	r25
    323c:	87 95       	ror	r24
    323e:	07 94       	ror	r0
    3240:	98 2f       	mov	r25, r24
    3242:	80 2d       	mov	r24, r0
    3244:	82 2b       	or	r24, r18
    3246:	8c 93       	st	X, r24


	//clock source
	TCCR0_REG &= 0xF8 ;
    3248:	a3 e5       	ldi	r26, 0x53	; 83
    324a:	b0 e0       	ldi	r27, 0x00	; 0
    324c:	e3 e5       	ldi	r30, 0x53	; 83
    324e:	f0 e0       	ldi	r31, 0x00	; 0
    3250:	80 81       	ld	r24, Z
    3252:	88 7f       	andi	r24, 0xF8	; 248
    3254:	8c 93       	st	X, r24
	TCCR1B_REG |= (Ptr_To_TIMERCONFIG->clock_source_T1);
    3256:	ae e4       	ldi	r26, 0x4E	; 78
    3258:	b0 e0       	ldi	r27, 0x00	; 0
    325a:	ee e4       	ldi	r30, 0x4E	; 78
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	90 81       	ld	r25, Z
    3260:	e9 81       	ldd	r30, Y+1	; 0x01
    3262:	fa 81       	ldd	r31, Y+2	; 0x02
    3264:	82 81       	ldd	r24, Z+2	; 0x02
    3266:	89 2b       	or	r24, r25
    3268:	8c 93       	st	X, r24

	Timer_voidSetICRValueT1(20000);
    326a:	80 e2       	ldi	r24, 0x20	; 32
    326c:	9e e4       	ldi	r25, 0x4E	; 78
    326e:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Timer_voidSetICRValueT1>
}
    3272:	0f 90       	pop	r0
    3274:	0f 90       	pop	r0
    3276:	cf 91       	pop	r28
    3278:	df 91       	pop	r29
    327a:	08 95       	ret

0000327c <Timer_voidSetCompareMatchValueT1A>:

void Timer_voidSetCompareMatchValueT1A (u16 Copy)
{
    327c:	df 93       	push	r29
    327e:	cf 93       	push	r28
    3280:	00 d0       	rcall	.+0      	; 0x3282 <Timer_voidSetCompareMatchValueT1A+0x6>
    3282:	cd b7       	in	r28, 0x3d	; 61
    3284:	de b7       	in	r29, 0x3e	; 62
    3286:	9a 83       	std	Y+2, r25	; 0x02
    3288:	89 83       	std	Y+1, r24	; 0x01
	OCR1A_REG = Copy;
    328a:	ea e4       	ldi	r30, 0x4A	; 74
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	9a 81       	ldd	r25, Y+2	; 0x02
    3292:	91 83       	std	Z+1, r25	; 0x01
    3294:	80 83       	st	Z, r24
}
    3296:	0f 90       	pop	r0
    3298:	0f 90       	pop	r0
    329a:	cf 91       	pop	r28
    329c:	df 91       	pop	r29
    329e:	08 95       	ret

000032a0 <Timer_voidSetICRValueT1>:

void Timer_voidSetICRValueT1 (u16 Copy)
{
    32a0:	df 93       	push	r29
    32a2:	cf 93       	push	r28
    32a4:	00 d0       	rcall	.+0      	; 0x32a6 <Timer_voidSetICRValueT1+0x6>
    32a6:	cd b7       	in	r28, 0x3d	; 61
    32a8:	de b7       	in	r29, 0x3e	; 62
    32aa:	9a 83       	std	Y+2, r25	; 0x02
    32ac:	89 83       	std	Y+1, r24	; 0x01
	ICR1_REG = Copy;
    32ae:	e6 e4       	ldi	r30, 0x46	; 70
    32b0:	f0 e0       	ldi	r31, 0x00	; 0
    32b2:	89 81       	ldd	r24, Y+1	; 0x01
    32b4:	9a 81       	ldd	r25, Y+2	; 0x02
    32b6:	91 83       	std	Z+1, r25	; 0x01
    32b8:	80 83       	st	Z, r24
}
    32ba:	0f 90       	pop	r0
    32bc:	0f 90       	pop	r0
    32be:	cf 91       	pop	r28
    32c0:	df 91       	pop	r29
    32c2:	08 95       	ret

000032c4 <GIE_voidEnable>:
#include"../../LIB/BIT_MATH.h"

#include "GIE_interface.h"

void GIE_voidEnable  (void)
{
    32c4:	df 93       	push	r29
    32c6:	cf 93       	push	r28
    32c8:	cd b7       	in	r28, 0x3d	; 61
    32ca:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG , 7 );
    32cc:	af e5       	ldi	r26, 0x5F	; 95
    32ce:	b0 e0       	ldi	r27, 0x00	; 0
    32d0:	ef e5       	ldi	r30, 0x5F	; 95
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	80 81       	ld	r24, Z
    32d6:	80 68       	ori	r24, 0x80	; 128
    32d8:	8c 93       	st	X, r24
}
    32da:	cf 91       	pop	r28
    32dc:	df 91       	pop	r29
    32de:	08 95       	ret

000032e0 <GIE_voidDisable>:
void GIE_voidDisable (void)
{
    32e0:	df 93       	push	r29
    32e2:	cf 93       	push	r28
    32e4:	cd b7       	in	r28, 0x3d	; 61
    32e6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG , 7 );
    32e8:	af e5       	ldi	r26, 0x5F	; 95
    32ea:	b0 e0       	ldi	r27, 0x00	; 0
    32ec:	ef e5       	ldi	r30, 0x5F	; 95
    32ee:	f0 e0       	ldi	r31, 0x00	; 0
    32f0:	80 81       	ld	r24, Z
    32f2:	8f 77       	andi	r24, 0x7F	; 127
    32f4:	8c 93       	st	X, r24
}
    32f6:	cf 91       	pop	r28
    32f8:	df 91       	pop	r29
    32fa:	08 95       	ret

000032fc <DIO_voidSetPinDirection>:




void DIO_voidSetPinDirection    (u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8Direction )
{
    32fc:	df 93       	push	r29
    32fe:	cf 93       	push	r28
    3300:	cd b7       	in	r28, 0x3d	; 61
    3302:	de b7       	in	r29, 0x3e	; 62
    3304:	29 97       	sbiw	r28, 0x09	; 9
    3306:	0f b6       	in	r0, 0x3f	; 63
    3308:	f8 94       	cli
    330a:	de bf       	out	0x3e, r29	; 62
    330c:	0f be       	out	0x3f, r0	; 63
    330e:	cd bf       	out	0x3d, r28	; 61
    3310:	89 83       	std	Y+1, r24	; 0x01
    3312:	6a 83       	std	Y+2, r22	; 0x02
    3314:	4b 83       	std	Y+3, r20	; 0x03

    switch(Copy_u8Direction)
    3316:	8b 81       	ldd	r24, Y+3	; 0x03
    3318:	28 2f       	mov	r18, r24
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	39 87       	std	Y+9, r19	; 0x09
    331e:	28 87       	std	Y+8, r18	; 0x08
    3320:	88 85       	ldd	r24, Y+8	; 0x08
    3322:	99 85       	ldd	r25, Y+9	; 0x09
    3324:	00 97       	sbiw	r24, 0x00	; 0
    3326:	09 f4       	brne	.+2      	; 0x332a <DIO_voidSetPinDirection+0x2e>
    3328:	75 c0       	rjmp	.+234    	; 0x3414 <DIO_voidSetPinDirection+0x118>
    332a:	28 85       	ldd	r18, Y+8	; 0x08
    332c:	39 85       	ldd	r19, Y+9	; 0x09
    332e:	21 30       	cpi	r18, 0x01	; 1
    3330:	31 05       	cpc	r19, r1
    3332:	09 f0       	breq	.+2      	; 0x3336 <DIO_voidSetPinDirection+0x3a>
    3334:	e2 c0       	rjmp	.+452    	; 0x34fa <DIO_voidSetPinDirection+0x1fe>
    
    {
        case DIO_OUTPUT :
            switch(Copy_u8PortId)
    3336:	89 81       	ldd	r24, Y+1	; 0x01
    3338:	28 2f       	mov	r18, r24
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	3f 83       	std	Y+7, r19	; 0x07
    333e:	2e 83       	std	Y+6, r18	; 0x06
    3340:	8e 81       	ldd	r24, Y+6	; 0x06
    3342:	9f 81       	ldd	r25, Y+7	; 0x07
    3344:	81 30       	cpi	r24, 0x01	; 1
    3346:	91 05       	cpc	r25, r1
    3348:	49 f1       	breq	.+82     	; 0x339c <DIO_voidSetPinDirection+0xa0>
    334a:	2e 81       	ldd	r18, Y+6	; 0x06
    334c:	3f 81       	ldd	r19, Y+7	; 0x07
    334e:	22 30       	cpi	r18, 0x02	; 2
    3350:	31 05       	cpc	r19, r1
    3352:	2c f4       	brge	.+10     	; 0x335e <DIO_voidSetPinDirection+0x62>
    3354:	8e 81       	ldd	r24, Y+6	; 0x06
    3356:	9f 81       	ldd	r25, Y+7	; 0x07
    3358:	00 97       	sbiw	r24, 0x00	; 0
    335a:	61 f0       	breq	.+24     	; 0x3374 <DIO_voidSetPinDirection+0x78>
    335c:	ce c0       	rjmp	.+412    	; 0x34fa <DIO_voidSetPinDirection+0x1fe>
    335e:	2e 81       	ldd	r18, Y+6	; 0x06
    3360:	3f 81       	ldd	r19, Y+7	; 0x07
    3362:	22 30       	cpi	r18, 0x02	; 2
    3364:	31 05       	cpc	r19, r1
    3366:	71 f1       	breq	.+92     	; 0x33c4 <DIO_voidSetPinDirection+0xc8>
    3368:	8e 81       	ldd	r24, Y+6	; 0x06
    336a:	9f 81       	ldd	r25, Y+7	; 0x07
    336c:	83 30       	cpi	r24, 0x03	; 3
    336e:	91 05       	cpc	r25, r1
    3370:	e9 f1       	breq	.+122    	; 0x33ec <DIO_voidSetPinDirection+0xf0>
    3372:	c3 c0       	rjmp	.+390    	; 0x34fa <DIO_voidSetPinDirection+0x1fe>
            {
                case DIO_PORTA :
                                SET_BIT(DDRA_REG , Copy_u8PinId);
    3374:	aa e3       	ldi	r26, 0x3A	; 58
    3376:	b0 e0       	ldi	r27, 0x00	; 0
    3378:	ea e3       	ldi	r30, 0x3A	; 58
    337a:	f0 e0       	ldi	r31, 0x00	; 0
    337c:	80 81       	ld	r24, Z
    337e:	48 2f       	mov	r20, r24
    3380:	8a 81       	ldd	r24, Y+2	; 0x02
    3382:	28 2f       	mov	r18, r24
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	81 e0       	ldi	r24, 0x01	; 1
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	02 2e       	mov	r0, r18
    338c:	02 c0       	rjmp	.+4      	; 0x3392 <DIO_voidSetPinDirection+0x96>
    338e:	88 0f       	add	r24, r24
    3390:	99 1f       	adc	r25, r25
    3392:	0a 94       	dec	r0
    3394:	e2 f7       	brpl	.-8      	; 0x338e <DIO_voidSetPinDirection+0x92>
    3396:	84 2b       	or	r24, r20
    3398:	8c 93       	st	X, r24
    339a:	af c0       	rjmp	.+350    	; 0x34fa <DIO_voidSetPinDirection+0x1fe>
                break ; 
                case DIO_PORTB :
                                SET_BIT(DDRB_REG , Copy_u8PinId);
    339c:	a7 e3       	ldi	r26, 0x37	; 55
    339e:	b0 e0       	ldi	r27, 0x00	; 0
    33a0:	e7 e3       	ldi	r30, 0x37	; 55
    33a2:	f0 e0       	ldi	r31, 0x00	; 0
    33a4:	80 81       	ld	r24, Z
    33a6:	48 2f       	mov	r20, r24
    33a8:	8a 81       	ldd	r24, Y+2	; 0x02
    33aa:	28 2f       	mov	r18, r24
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	02 2e       	mov	r0, r18
    33b4:	02 c0       	rjmp	.+4      	; 0x33ba <DIO_voidSetPinDirection+0xbe>
    33b6:	88 0f       	add	r24, r24
    33b8:	99 1f       	adc	r25, r25
    33ba:	0a 94       	dec	r0
    33bc:	e2 f7       	brpl	.-8      	; 0x33b6 <DIO_voidSetPinDirection+0xba>
    33be:	84 2b       	or	r24, r20
    33c0:	8c 93       	st	X, r24
    33c2:	9b c0       	rjmp	.+310    	; 0x34fa <DIO_voidSetPinDirection+0x1fe>
                break;
                case DIO_PORTC :
                                SET_BIT(DDRC_REG , Copy_u8PinId);
    33c4:	a4 e3       	ldi	r26, 0x34	; 52
    33c6:	b0 e0       	ldi	r27, 0x00	; 0
    33c8:	e4 e3       	ldi	r30, 0x34	; 52
    33ca:	f0 e0       	ldi	r31, 0x00	; 0
    33cc:	80 81       	ld	r24, Z
    33ce:	48 2f       	mov	r20, r24
    33d0:	8a 81       	ldd	r24, Y+2	; 0x02
    33d2:	28 2f       	mov	r18, r24
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	81 e0       	ldi	r24, 0x01	; 1
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	02 2e       	mov	r0, r18
    33dc:	02 c0       	rjmp	.+4      	; 0x33e2 <DIO_voidSetPinDirection+0xe6>
    33de:	88 0f       	add	r24, r24
    33e0:	99 1f       	adc	r25, r25
    33e2:	0a 94       	dec	r0
    33e4:	e2 f7       	brpl	.-8      	; 0x33de <DIO_voidSetPinDirection+0xe2>
    33e6:	84 2b       	or	r24, r20
    33e8:	8c 93       	st	X, r24
    33ea:	87 c0       	rjmp	.+270    	; 0x34fa <DIO_voidSetPinDirection+0x1fe>
                break ; 
                case DIO_PORTD :
                                SET_BIT(DDRD_REG , Copy_u8PinId);
    33ec:	a1 e3       	ldi	r26, 0x31	; 49
    33ee:	b0 e0       	ldi	r27, 0x00	; 0
    33f0:	e1 e3       	ldi	r30, 0x31	; 49
    33f2:	f0 e0       	ldi	r31, 0x00	; 0
    33f4:	80 81       	ld	r24, Z
    33f6:	48 2f       	mov	r20, r24
    33f8:	8a 81       	ldd	r24, Y+2	; 0x02
    33fa:	28 2f       	mov	r18, r24
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	02 2e       	mov	r0, r18
    3404:	02 c0       	rjmp	.+4      	; 0x340a <DIO_voidSetPinDirection+0x10e>
    3406:	88 0f       	add	r24, r24
    3408:	99 1f       	adc	r25, r25
    340a:	0a 94       	dec	r0
    340c:	e2 f7       	brpl	.-8      	; 0x3406 <DIO_voidSetPinDirection+0x10a>
    340e:	84 2b       	or	r24, r20
    3410:	8c 93       	st	X, r24
    3412:	73 c0       	rjmp	.+230    	; 0x34fa <DIO_voidSetPinDirection+0x1fe>
                break;
            }
        break;        
        case DIO_INPUT :
        switch(Copy_u8PortId)
    3414:	89 81       	ldd	r24, Y+1	; 0x01
    3416:	28 2f       	mov	r18, r24
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	3d 83       	std	Y+5, r19	; 0x05
    341c:	2c 83       	std	Y+4, r18	; 0x04
    341e:	8c 81       	ldd	r24, Y+4	; 0x04
    3420:	9d 81       	ldd	r25, Y+5	; 0x05
    3422:	81 30       	cpi	r24, 0x01	; 1
    3424:	91 05       	cpc	r25, r1
    3426:	59 f1       	breq	.+86     	; 0x347e <DIO_voidSetPinDirection+0x182>
    3428:	2c 81       	ldd	r18, Y+4	; 0x04
    342a:	3d 81       	ldd	r19, Y+5	; 0x05
    342c:	22 30       	cpi	r18, 0x02	; 2
    342e:	31 05       	cpc	r19, r1
    3430:	2c f4       	brge	.+10     	; 0x343c <DIO_voidSetPinDirection+0x140>
    3432:	8c 81       	ldd	r24, Y+4	; 0x04
    3434:	9d 81       	ldd	r25, Y+5	; 0x05
    3436:	00 97       	sbiw	r24, 0x00	; 0
    3438:	69 f0       	breq	.+26     	; 0x3454 <DIO_voidSetPinDirection+0x158>
    343a:	5f c0       	rjmp	.+190    	; 0x34fa <DIO_voidSetPinDirection+0x1fe>
    343c:	2c 81       	ldd	r18, Y+4	; 0x04
    343e:	3d 81       	ldd	r19, Y+5	; 0x05
    3440:	22 30       	cpi	r18, 0x02	; 2
    3442:	31 05       	cpc	r19, r1
    3444:	89 f1       	breq	.+98     	; 0x34a8 <DIO_voidSetPinDirection+0x1ac>
    3446:	8c 81       	ldd	r24, Y+4	; 0x04
    3448:	9d 81       	ldd	r25, Y+5	; 0x05
    344a:	83 30       	cpi	r24, 0x03	; 3
    344c:	91 05       	cpc	r25, r1
    344e:	09 f4       	brne	.+2      	; 0x3452 <DIO_voidSetPinDirection+0x156>
    3450:	40 c0       	rjmp	.+128    	; 0x34d2 <DIO_voidSetPinDirection+0x1d6>
    3452:	53 c0       	rjmp	.+166    	; 0x34fa <DIO_voidSetPinDirection+0x1fe>
            {
                case DIO_PORTA :
                                CLR_BIT(DDRA_REG , Copy_u8PinId);
    3454:	aa e3       	ldi	r26, 0x3A	; 58
    3456:	b0 e0       	ldi	r27, 0x00	; 0
    3458:	ea e3       	ldi	r30, 0x3A	; 58
    345a:	f0 e0       	ldi	r31, 0x00	; 0
    345c:	80 81       	ld	r24, Z
    345e:	48 2f       	mov	r20, r24
    3460:	8a 81       	ldd	r24, Y+2	; 0x02
    3462:	28 2f       	mov	r18, r24
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	81 e0       	ldi	r24, 0x01	; 1
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	02 2e       	mov	r0, r18
    346c:	02 c0       	rjmp	.+4      	; 0x3472 <DIO_voidSetPinDirection+0x176>
    346e:	88 0f       	add	r24, r24
    3470:	99 1f       	adc	r25, r25
    3472:	0a 94       	dec	r0
    3474:	e2 f7       	brpl	.-8      	; 0x346e <DIO_voidSetPinDirection+0x172>
    3476:	80 95       	com	r24
    3478:	84 23       	and	r24, r20
    347a:	8c 93       	st	X, r24
    347c:	3e c0       	rjmp	.+124    	; 0x34fa <DIO_voidSetPinDirection+0x1fe>
                break ; 
                case DIO_PORTB :
                                CLR_BIT(DDRB_REG , Copy_u8PinId);
    347e:	a7 e3       	ldi	r26, 0x37	; 55
    3480:	b0 e0       	ldi	r27, 0x00	; 0
    3482:	e7 e3       	ldi	r30, 0x37	; 55
    3484:	f0 e0       	ldi	r31, 0x00	; 0
    3486:	80 81       	ld	r24, Z
    3488:	48 2f       	mov	r20, r24
    348a:	8a 81       	ldd	r24, Y+2	; 0x02
    348c:	28 2f       	mov	r18, r24
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	81 e0       	ldi	r24, 0x01	; 1
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	02 2e       	mov	r0, r18
    3496:	02 c0       	rjmp	.+4      	; 0x349c <DIO_voidSetPinDirection+0x1a0>
    3498:	88 0f       	add	r24, r24
    349a:	99 1f       	adc	r25, r25
    349c:	0a 94       	dec	r0
    349e:	e2 f7       	brpl	.-8      	; 0x3498 <DIO_voidSetPinDirection+0x19c>
    34a0:	80 95       	com	r24
    34a2:	84 23       	and	r24, r20
    34a4:	8c 93       	st	X, r24
    34a6:	29 c0       	rjmp	.+82     	; 0x34fa <DIO_voidSetPinDirection+0x1fe>
                break;
                case DIO_PORTC :
                                CLR_BIT(DDRC_REG , Copy_u8PinId);
    34a8:	a4 e3       	ldi	r26, 0x34	; 52
    34aa:	b0 e0       	ldi	r27, 0x00	; 0
    34ac:	e4 e3       	ldi	r30, 0x34	; 52
    34ae:	f0 e0       	ldi	r31, 0x00	; 0
    34b0:	80 81       	ld	r24, Z
    34b2:	48 2f       	mov	r20, r24
    34b4:	8a 81       	ldd	r24, Y+2	; 0x02
    34b6:	28 2f       	mov	r18, r24
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	81 e0       	ldi	r24, 0x01	; 1
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	02 2e       	mov	r0, r18
    34c0:	02 c0       	rjmp	.+4      	; 0x34c6 <DIO_voidSetPinDirection+0x1ca>
    34c2:	88 0f       	add	r24, r24
    34c4:	99 1f       	adc	r25, r25
    34c6:	0a 94       	dec	r0
    34c8:	e2 f7       	brpl	.-8      	; 0x34c2 <DIO_voidSetPinDirection+0x1c6>
    34ca:	80 95       	com	r24
    34cc:	84 23       	and	r24, r20
    34ce:	8c 93       	st	X, r24
    34d0:	14 c0       	rjmp	.+40     	; 0x34fa <DIO_voidSetPinDirection+0x1fe>
                break ; 
                case DIO_PORTD :
                                CLR_BIT(DDRD_REG , Copy_u8PinId);
    34d2:	a1 e3       	ldi	r26, 0x31	; 49
    34d4:	b0 e0       	ldi	r27, 0x00	; 0
    34d6:	e1 e3       	ldi	r30, 0x31	; 49
    34d8:	f0 e0       	ldi	r31, 0x00	; 0
    34da:	80 81       	ld	r24, Z
    34dc:	48 2f       	mov	r20, r24
    34de:	8a 81       	ldd	r24, Y+2	; 0x02
    34e0:	28 2f       	mov	r18, r24
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	81 e0       	ldi	r24, 0x01	; 1
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	02 2e       	mov	r0, r18
    34ea:	02 c0       	rjmp	.+4      	; 0x34f0 <DIO_voidSetPinDirection+0x1f4>
    34ec:	88 0f       	add	r24, r24
    34ee:	99 1f       	adc	r25, r25
    34f0:	0a 94       	dec	r0
    34f2:	e2 f7       	brpl	.-8      	; 0x34ec <DIO_voidSetPinDirection+0x1f0>
    34f4:	80 95       	com	r24
    34f6:	84 23       	and	r24, r20
    34f8:	8c 93       	st	X, r24
                break;
            }
        break ; 
    }
}
    34fa:	29 96       	adiw	r28, 0x09	; 9
    34fc:	0f b6       	in	r0, 0x3f	; 63
    34fe:	f8 94       	cli
    3500:	de bf       	out	0x3e, r29	; 62
    3502:	0f be       	out	0x3f, r0	; 63
    3504:	cd bf       	out	0x3d, r28	; 61
    3506:	cf 91       	pop	r28
    3508:	df 91       	pop	r29
    350a:	08 95       	ret

0000350c <DIO_voidSetPinValue>:

void DIO_voidSetPinValue    (u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8Value )
{
    350c:	df 93       	push	r29
    350e:	cf 93       	push	r28
    3510:	cd b7       	in	r28, 0x3d	; 61
    3512:	de b7       	in	r29, 0x3e	; 62
    3514:	29 97       	sbiw	r28, 0x09	; 9
    3516:	0f b6       	in	r0, 0x3f	; 63
    3518:	f8 94       	cli
    351a:	de bf       	out	0x3e, r29	; 62
    351c:	0f be       	out	0x3f, r0	; 63
    351e:	cd bf       	out	0x3d, r28	; 61
    3520:	89 83       	std	Y+1, r24	; 0x01
    3522:	6a 83       	std	Y+2, r22	; 0x02
    3524:	4b 83       	std	Y+3, r20	; 0x03


    switch(Copy_u8Value)
    3526:	8b 81       	ldd	r24, Y+3	; 0x03
    3528:	28 2f       	mov	r18, r24
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	39 87       	std	Y+9, r19	; 0x09
    352e:	28 87       	std	Y+8, r18	; 0x08
    3530:	88 85       	ldd	r24, Y+8	; 0x08
    3532:	99 85       	ldd	r25, Y+9	; 0x09
    3534:	00 97       	sbiw	r24, 0x00	; 0
    3536:	09 f4       	brne	.+2      	; 0x353a <DIO_voidSetPinValue+0x2e>
    3538:	75 c0       	rjmp	.+234    	; 0x3624 <DIO_voidSetPinValue+0x118>
    353a:	28 85       	ldd	r18, Y+8	; 0x08
    353c:	39 85       	ldd	r19, Y+9	; 0x09
    353e:	21 30       	cpi	r18, 0x01	; 1
    3540:	31 05       	cpc	r19, r1
    3542:	09 f0       	breq	.+2      	; 0x3546 <DIO_voidSetPinValue+0x3a>
    3544:	e2 c0       	rjmp	.+452    	; 0x370a <DIO_voidSetPinValue+0x1fe>
    
    {
        case DIO_HIGH :
            switch(Copy_u8PortId)
    3546:	89 81       	ldd	r24, Y+1	; 0x01
    3548:	28 2f       	mov	r18, r24
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	3f 83       	std	Y+7, r19	; 0x07
    354e:	2e 83       	std	Y+6, r18	; 0x06
    3550:	8e 81       	ldd	r24, Y+6	; 0x06
    3552:	9f 81       	ldd	r25, Y+7	; 0x07
    3554:	81 30       	cpi	r24, 0x01	; 1
    3556:	91 05       	cpc	r25, r1
    3558:	49 f1       	breq	.+82     	; 0x35ac <DIO_voidSetPinValue+0xa0>
    355a:	2e 81       	ldd	r18, Y+6	; 0x06
    355c:	3f 81       	ldd	r19, Y+7	; 0x07
    355e:	22 30       	cpi	r18, 0x02	; 2
    3560:	31 05       	cpc	r19, r1
    3562:	2c f4       	brge	.+10     	; 0x356e <DIO_voidSetPinValue+0x62>
    3564:	8e 81       	ldd	r24, Y+6	; 0x06
    3566:	9f 81       	ldd	r25, Y+7	; 0x07
    3568:	00 97       	sbiw	r24, 0x00	; 0
    356a:	61 f0       	breq	.+24     	; 0x3584 <DIO_voidSetPinValue+0x78>
    356c:	ce c0       	rjmp	.+412    	; 0x370a <DIO_voidSetPinValue+0x1fe>
    356e:	2e 81       	ldd	r18, Y+6	; 0x06
    3570:	3f 81       	ldd	r19, Y+7	; 0x07
    3572:	22 30       	cpi	r18, 0x02	; 2
    3574:	31 05       	cpc	r19, r1
    3576:	71 f1       	breq	.+92     	; 0x35d4 <DIO_voidSetPinValue+0xc8>
    3578:	8e 81       	ldd	r24, Y+6	; 0x06
    357a:	9f 81       	ldd	r25, Y+7	; 0x07
    357c:	83 30       	cpi	r24, 0x03	; 3
    357e:	91 05       	cpc	r25, r1
    3580:	e9 f1       	breq	.+122    	; 0x35fc <DIO_voidSetPinValue+0xf0>
    3582:	c3 c0       	rjmp	.+390    	; 0x370a <DIO_voidSetPinValue+0x1fe>
            {
                case DIO_PORTA :
                                SET_BIT(PORTA_REG , Copy_u8PinId);
    3584:	ab e3       	ldi	r26, 0x3B	; 59
    3586:	b0 e0       	ldi	r27, 0x00	; 0
    3588:	eb e3       	ldi	r30, 0x3B	; 59
    358a:	f0 e0       	ldi	r31, 0x00	; 0
    358c:	80 81       	ld	r24, Z
    358e:	48 2f       	mov	r20, r24
    3590:	8a 81       	ldd	r24, Y+2	; 0x02
    3592:	28 2f       	mov	r18, r24
    3594:	30 e0       	ldi	r19, 0x00	; 0
    3596:	81 e0       	ldi	r24, 0x01	; 1
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	02 2e       	mov	r0, r18
    359c:	02 c0       	rjmp	.+4      	; 0x35a2 <DIO_voidSetPinValue+0x96>
    359e:	88 0f       	add	r24, r24
    35a0:	99 1f       	adc	r25, r25
    35a2:	0a 94       	dec	r0
    35a4:	e2 f7       	brpl	.-8      	; 0x359e <DIO_voidSetPinValue+0x92>
    35a6:	84 2b       	or	r24, r20
    35a8:	8c 93       	st	X, r24
    35aa:	af c0       	rjmp	.+350    	; 0x370a <DIO_voidSetPinValue+0x1fe>
                break ; 
                case DIO_PORTB :
                                SET_BIT(PORTB_REG , Copy_u8PinId);
    35ac:	a8 e3       	ldi	r26, 0x38	; 56
    35ae:	b0 e0       	ldi	r27, 0x00	; 0
    35b0:	e8 e3       	ldi	r30, 0x38	; 56
    35b2:	f0 e0       	ldi	r31, 0x00	; 0
    35b4:	80 81       	ld	r24, Z
    35b6:	48 2f       	mov	r20, r24
    35b8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ba:	28 2f       	mov	r18, r24
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	81 e0       	ldi	r24, 0x01	; 1
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	02 2e       	mov	r0, r18
    35c4:	02 c0       	rjmp	.+4      	; 0x35ca <DIO_voidSetPinValue+0xbe>
    35c6:	88 0f       	add	r24, r24
    35c8:	99 1f       	adc	r25, r25
    35ca:	0a 94       	dec	r0
    35cc:	e2 f7       	brpl	.-8      	; 0x35c6 <DIO_voidSetPinValue+0xba>
    35ce:	84 2b       	or	r24, r20
    35d0:	8c 93       	st	X, r24
    35d2:	9b c0       	rjmp	.+310    	; 0x370a <DIO_voidSetPinValue+0x1fe>
                break;
                case DIO_PORTC :
                                SET_BIT(PORTC_REG , Copy_u8PinId);
    35d4:	a5 e3       	ldi	r26, 0x35	; 53
    35d6:	b0 e0       	ldi	r27, 0x00	; 0
    35d8:	e5 e3       	ldi	r30, 0x35	; 53
    35da:	f0 e0       	ldi	r31, 0x00	; 0
    35dc:	80 81       	ld	r24, Z
    35de:	48 2f       	mov	r20, r24
    35e0:	8a 81       	ldd	r24, Y+2	; 0x02
    35e2:	28 2f       	mov	r18, r24
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	81 e0       	ldi	r24, 0x01	; 1
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	02 2e       	mov	r0, r18
    35ec:	02 c0       	rjmp	.+4      	; 0x35f2 <DIO_voidSetPinValue+0xe6>
    35ee:	88 0f       	add	r24, r24
    35f0:	99 1f       	adc	r25, r25
    35f2:	0a 94       	dec	r0
    35f4:	e2 f7       	brpl	.-8      	; 0x35ee <DIO_voidSetPinValue+0xe2>
    35f6:	84 2b       	or	r24, r20
    35f8:	8c 93       	st	X, r24
    35fa:	87 c0       	rjmp	.+270    	; 0x370a <DIO_voidSetPinValue+0x1fe>
                break ; 
                case DIO_PORTD :
                                SET_BIT(PORTD_REG , Copy_u8PinId);
    35fc:	a2 e3       	ldi	r26, 0x32	; 50
    35fe:	b0 e0       	ldi	r27, 0x00	; 0
    3600:	e2 e3       	ldi	r30, 0x32	; 50
    3602:	f0 e0       	ldi	r31, 0x00	; 0
    3604:	80 81       	ld	r24, Z
    3606:	48 2f       	mov	r20, r24
    3608:	8a 81       	ldd	r24, Y+2	; 0x02
    360a:	28 2f       	mov	r18, r24
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	02 2e       	mov	r0, r18
    3614:	02 c0       	rjmp	.+4      	; 0x361a <DIO_voidSetPinValue+0x10e>
    3616:	88 0f       	add	r24, r24
    3618:	99 1f       	adc	r25, r25
    361a:	0a 94       	dec	r0
    361c:	e2 f7       	brpl	.-8      	; 0x3616 <DIO_voidSetPinValue+0x10a>
    361e:	84 2b       	or	r24, r20
    3620:	8c 93       	st	X, r24
    3622:	73 c0       	rjmp	.+230    	; 0x370a <DIO_voidSetPinValue+0x1fe>
                break;
            }
        break;        
        case DIO_LOW :
        switch(Copy_u8PortId)
    3624:	89 81       	ldd	r24, Y+1	; 0x01
    3626:	28 2f       	mov	r18, r24
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	3d 83       	std	Y+5, r19	; 0x05
    362c:	2c 83       	std	Y+4, r18	; 0x04
    362e:	8c 81       	ldd	r24, Y+4	; 0x04
    3630:	9d 81       	ldd	r25, Y+5	; 0x05
    3632:	81 30       	cpi	r24, 0x01	; 1
    3634:	91 05       	cpc	r25, r1
    3636:	59 f1       	breq	.+86     	; 0x368e <DIO_voidSetPinValue+0x182>
    3638:	2c 81       	ldd	r18, Y+4	; 0x04
    363a:	3d 81       	ldd	r19, Y+5	; 0x05
    363c:	22 30       	cpi	r18, 0x02	; 2
    363e:	31 05       	cpc	r19, r1
    3640:	2c f4       	brge	.+10     	; 0x364c <DIO_voidSetPinValue+0x140>
    3642:	8c 81       	ldd	r24, Y+4	; 0x04
    3644:	9d 81       	ldd	r25, Y+5	; 0x05
    3646:	00 97       	sbiw	r24, 0x00	; 0
    3648:	69 f0       	breq	.+26     	; 0x3664 <DIO_voidSetPinValue+0x158>
    364a:	5f c0       	rjmp	.+190    	; 0x370a <DIO_voidSetPinValue+0x1fe>
    364c:	2c 81       	ldd	r18, Y+4	; 0x04
    364e:	3d 81       	ldd	r19, Y+5	; 0x05
    3650:	22 30       	cpi	r18, 0x02	; 2
    3652:	31 05       	cpc	r19, r1
    3654:	89 f1       	breq	.+98     	; 0x36b8 <DIO_voidSetPinValue+0x1ac>
    3656:	8c 81       	ldd	r24, Y+4	; 0x04
    3658:	9d 81       	ldd	r25, Y+5	; 0x05
    365a:	83 30       	cpi	r24, 0x03	; 3
    365c:	91 05       	cpc	r25, r1
    365e:	09 f4       	brne	.+2      	; 0x3662 <DIO_voidSetPinValue+0x156>
    3660:	40 c0       	rjmp	.+128    	; 0x36e2 <DIO_voidSetPinValue+0x1d6>
    3662:	53 c0       	rjmp	.+166    	; 0x370a <DIO_voidSetPinValue+0x1fe>
            {
                case DIO_PORTA :
                                CLR_BIT(PORTA_REG , Copy_u8PinId);
    3664:	ab e3       	ldi	r26, 0x3B	; 59
    3666:	b0 e0       	ldi	r27, 0x00	; 0
    3668:	eb e3       	ldi	r30, 0x3B	; 59
    366a:	f0 e0       	ldi	r31, 0x00	; 0
    366c:	80 81       	ld	r24, Z
    366e:	48 2f       	mov	r20, r24
    3670:	8a 81       	ldd	r24, Y+2	; 0x02
    3672:	28 2f       	mov	r18, r24
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	81 e0       	ldi	r24, 0x01	; 1
    3678:	90 e0       	ldi	r25, 0x00	; 0
    367a:	02 2e       	mov	r0, r18
    367c:	02 c0       	rjmp	.+4      	; 0x3682 <DIO_voidSetPinValue+0x176>
    367e:	88 0f       	add	r24, r24
    3680:	99 1f       	adc	r25, r25
    3682:	0a 94       	dec	r0
    3684:	e2 f7       	brpl	.-8      	; 0x367e <DIO_voidSetPinValue+0x172>
    3686:	80 95       	com	r24
    3688:	84 23       	and	r24, r20
    368a:	8c 93       	st	X, r24
    368c:	3e c0       	rjmp	.+124    	; 0x370a <DIO_voidSetPinValue+0x1fe>
                break ; 
                case DIO_PORTB :
                                CLR_BIT(PORTB_REG , Copy_u8PinId);
    368e:	a8 e3       	ldi	r26, 0x38	; 56
    3690:	b0 e0       	ldi	r27, 0x00	; 0
    3692:	e8 e3       	ldi	r30, 0x38	; 56
    3694:	f0 e0       	ldi	r31, 0x00	; 0
    3696:	80 81       	ld	r24, Z
    3698:	48 2f       	mov	r20, r24
    369a:	8a 81       	ldd	r24, Y+2	; 0x02
    369c:	28 2f       	mov	r18, r24
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	02 2e       	mov	r0, r18
    36a6:	02 c0       	rjmp	.+4      	; 0x36ac <DIO_voidSetPinValue+0x1a0>
    36a8:	88 0f       	add	r24, r24
    36aa:	99 1f       	adc	r25, r25
    36ac:	0a 94       	dec	r0
    36ae:	e2 f7       	brpl	.-8      	; 0x36a8 <DIO_voidSetPinValue+0x19c>
    36b0:	80 95       	com	r24
    36b2:	84 23       	and	r24, r20
    36b4:	8c 93       	st	X, r24
    36b6:	29 c0       	rjmp	.+82     	; 0x370a <DIO_voidSetPinValue+0x1fe>
                break;
                case DIO_PORTC :
                                CLR_BIT(PORTC_REG , Copy_u8PinId);
    36b8:	a5 e3       	ldi	r26, 0x35	; 53
    36ba:	b0 e0       	ldi	r27, 0x00	; 0
    36bc:	e5 e3       	ldi	r30, 0x35	; 53
    36be:	f0 e0       	ldi	r31, 0x00	; 0
    36c0:	80 81       	ld	r24, Z
    36c2:	48 2f       	mov	r20, r24
    36c4:	8a 81       	ldd	r24, Y+2	; 0x02
    36c6:	28 2f       	mov	r18, r24
    36c8:	30 e0       	ldi	r19, 0x00	; 0
    36ca:	81 e0       	ldi	r24, 0x01	; 1
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	02 2e       	mov	r0, r18
    36d0:	02 c0       	rjmp	.+4      	; 0x36d6 <DIO_voidSetPinValue+0x1ca>
    36d2:	88 0f       	add	r24, r24
    36d4:	99 1f       	adc	r25, r25
    36d6:	0a 94       	dec	r0
    36d8:	e2 f7       	brpl	.-8      	; 0x36d2 <DIO_voidSetPinValue+0x1c6>
    36da:	80 95       	com	r24
    36dc:	84 23       	and	r24, r20
    36de:	8c 93       	st	X, r24
    36e0:	14 c0       	rjmp	.+40     	; 0x370a <DIO_voidSetPinValue+0x1fe>
                break ; 
                case DIO_PORTD :
                                CLR_BIT(PORTD_REG , Copy_u8PinId);
    36e2:	a2 e3       	ldi	r26, 0x32	; 50
    36e4:	b0 e0       	ldi	r27, 0x00	; 0
    36e6:	e2 e3       	ldi	r30, 0x32	; 50
    36e8:	f0 e0       	ldi	r31, 0x00	; 0
    36ea:	80 81       	ld	r24, Z
    36ec:	48 2f       	mov	r20, r24
    36ee:	8a 81       	ldd	r24, Y+2	; 0x02
    36f0:	28 2f       	mov	r18, r24
    36f2:	30 e0       	ldi	r19, 0x00	; 0
    36f4:	81 e0       	ldi	r24, 0x01	; 1
    36f6:	90 e0       	ldi	r25, 0x00	; 0
    36f8:	02 2e       	mov	r0, r18
    36fa:	02 c0       	rjmp	.+4      	; 0x3700 <DIO_voidSetPinValue+0x1f4>
    36fc:	88 0f       	add	r24, r24
    36fe:	99 1f       	adc	r25, r25
    3700:	0a 94       	dec	r0
    3702:	e2 f7       	brpl	.-8      	; 0x36fc <DIO_voidSetPinValue+0x1f0>
    3704:	80 95       	com	r24
    3706:	84 23       	and	r24, r20
    3708:	8c 93       	st	X, r24
                break;
            }
        break ; 
    }

}
    370a:	29 96       	adiw	r28, 0x09	; 9
    370c:	0f b6       	in	r0, 0x3f	; 63
    370e:	f8 94       	cli
    3710:	de bf       	out	0x3e, r29	; 62
    3712:	0f be       	out	0x3f, r0	; 63
    3714:	cd bf       	out	0x3d, r28	; 61
    3716:	cf 91       	pop	r28
    3718:	df 91       	pop	r29
    371a:	08 95       	ret

0000371c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue        (u8 Copy_u8PortId , u8 Copy_u8PinId )
{
    371c:	df 93       	push	r29
    371e:	cf 93       	push	r28
    3720:	00 d0       	rcall	.+0      	; 0x3722 <DIO_u8GetPinValue+0x6>
    3722:	00 d0       	rcall	.+0      	; 0x3724 <DIO_u8GetPinValue+0x8>
    3724:	0f 92       	push	r0
    3726:	cd b7       	in	r28, 0x3d	; 61
    3728:	de b7       	in	r29, 0x3e	; 62
    372a:	8a 83       	std	Y+2, r24	; 0x02
    372c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnedValue = 255 ; 
    372e:	8f ef       	ldi	r24, 0xFF	; 255
    3730:	89 83       	std	Y+1, r24	; 0x01

    switch(Copy_u8PortId)
    3732:	8a 81       	ldd	r24, Y+2	; 0x02
    3734:	28 2f       	mov	r18, r24
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	3d 83       	std	Y+5, r19	; 0x05
    373a:	2c 83       	std	Y+4, r18	; 0x04
    373c:	4c 81       	ldd	r20, Y+4	; 0x04
    373e:	5d 81       	ldd	r21, Y+5	; 0x05
    3740:	41 30       	cpi	r20, 0x01	; 1
    3742:	51 05       	cpc	r21, r1
    3744:	41 f1       	breq	.+80     	; 0x3796 <DIO_u8GetPinValue+0x7a>
    3746:	8c 81       	ldd	r24, Y+4	; 0x04
    3748:	9d 81       	ldd	r25, Y+5	; 0x05
    374a:	82 30       	cpi	r24, 0x02	; 2
    374c:	91 05       	cpc	r25, r1
    374e:	34 f4       	brge	.+12     	; 0x375c <DIO_u8GetPinValue+0x40>
    3750:	2c 81       	ldd	r18, Y+4	; 0x04
    3752:	3d 81       	ldd	r19, Y+5	; 0x05
    3754:	21 15       	cp	r18, r1
    3756:	31 05       	cpc	r19, r1
    3758:	61 f0       	breq	.+24     	; 0x3772 <DIO_u8GetPinValue+0x56>
    375a:	52 c0       	rjmp	.+164    	; 0x3800 <DIO_u8GetPinValue+0xe4>
    375c:	4c 81       	ldd	r20, Y+4	; 0x04
    375e:	5d 81       	ldd	r21, Y+5	; 0x05
    3760:	42 30       	cpi	r20, 0x02	; 2
    3762:	51 05       	cpc	r21, r1
    3764:	51 f1       	breq	.+84     	; 0x37ba <DIO_u8GetPinValue+0x9e>
    3766:	8c 81       	ldd	r24, Y+4	; 0x04
    3768:	9d 81       	ldd	r25, Y+5	; 0x05
    376a:	83 30       	cpi	r24, 0x03	; 3
    376c:	91 05       	cpc	r25, r1
    376e:	b9 f1       	breq	.+110    	; 0x37de <DIO_u8GetPinValue+0xc2>
    3770:	47 c0       	rjmp	.+142    	; 0x3800 <DIO_u8GetPinValue+0xe4>
    {
        case DIO_PORTA :
            Local_u8ReturnedValue = GET_BIT(PINA_REG , Copy_u8PinId);
    3772:	e9 e3       	ldi	r30, 0x39	; 57
    3774:	f0 e0       	ldi	r31, 0x00	; 0
    3776:	80 81       	ld	r24, Z
    3778:	28 2f       	mov	r18, r24
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	8b 81       	ldd	r24, Y+3	; 0x03
    377e:	88 2f       	mov	r24, r24
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	a9 01       	movw	r20, r18
    3784:	02 c0       	rjmp	.+4      	; 0x378a <DIO_u8GetPinValue+0x6e>
    3786:	55 95       	asr	r21
    3788:	47 95       	ror	r20
    378a:	8a 95       	dec	r24
    378c:	e2 f7       	brpl	.-8      	; 0x3786 <DIO_u8GetPinValue+0x6a>
    378e:	ca 01       	movw	r24, r20
    3790:	81 70       	andi	r24, 0x01	; 1
    3792:	89 83       	std	Y+1, r24	; 0x01
    3794:	35 c0       	rjmp	.+106    	; 0x3800 <DIO_u8GetPinValue+0xe4>
        break ;
        case DIO_PORTB :
            Local_u8ReturnedValue = GET_BIT(PINB_REG , Copy_u8PinId);
    3796:	e6 e3       	ldi	r30, 0x36	; 54
    3798:	f0 e0       	ldi	r31, 0x00	; 0
    379a:	80 81       	ld	r24, Z
    379c:	28 2f       	mov	r18, r24
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	8b 81       	ldd	r24, Y+3	; 0x03
    37a2:	88 2f       	mov	r24, r24
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	a9 01       	movw	r20, r18
    37a8:	02 c0       	rjmp	.+4      	; 0x37ae <DIO_u8GetPinValue+0x92>
    37aa:	55 95       	asr	r21
    37ac:	47 95       	ror	r20
    37ae:	8a 95       	dec	r24
    37b0:	e2 f7       	brpl	.-8      	; 0x37aa <DIO_u8GetPinValue+0x8e>
    37b2:	ca 01       	movw	r24, r20
    37b4:	81 70       	andi	r24, 0x01	; 1
    37b6:	89 83       	std	Y+1, r24	; 0x01
    37b8:	23 c0       	rjmp	.+70     	; 0x3800 <DIO_u8GetPinValue+0xe4>
        break ;
        case DIO_PORTC :
            Local_u8ReturnedValue = GET_BIT(PINC_REG , Copy_u8PinId);
    37ba:	e3 e3       	ldi	r30, 0x33	; 51
    37bc:	f0 e0       	ldi	r31, 0x00	; 0
    37be:	80 81       	ld	r24, Z
    37c0:	28 2f       	mov	r18, r24
    37c2:	30 e0       	ldi	r19, 0x00	; 0
    37c4:	8b 81       	ldd	r24, Y+3	; 0x03
    37c6:	88 2f       	mov	r24, r24
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	a9 01       	movw	r20, r18
    37cc:	02 c0       	rjmp	.+4      	; 0x37d2 <DIO_u8GetPinValue+0xb6>
    37ce:	55 95       	asr	r21
    37d0:	47 95       	ror	r20
    37d2:	8a 95       	dec	r24
    37d4:	e2 f7       	brpl	.-8      	; 0x37ce <DIO_u8GetPinValue+0xb2>
    37d6:	ca 01       	movw	r24, r20
    37d8:	81 70       	andi	r24, 0x01	; 1
    37da:	89 83       	std	Y+1, r24	; 0x01
    37dc:	11 c0       	rjmp	.+34     	; 0x3800 <DIO_u8GetPinValue+0xe4>
        break ; 
        case DIO_PORTD : 
            Local_u8ReturnedValue = GET_BIT(PIND_REG , Copy_u8PinId);
    37de:	e0 e3       	ldi	r30, 0x30	; 48
    37e0:	f0 e0       	ldi	r31, 0x00	; 0
    37e2:	80 81       	ld	r24, Z
    37e4:	28 2f       	mov	r18, r24
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	8b 81       	ldd	r24, Y+3	; 0x03
    37ea:	88 2f       	mov	r24, r24
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	a9 01       	movw	r20, r18
    37f0:	02 c0       	rjmp	.+4      	; 0x37f6 <DIO_u8GetPinValue+0xda>
    37f2:	55 95       	asr	r21
    37f4:	47 95       	ror	r20
    37f6:	8a 95       	dec	r24
    37f8:	e2 f7       	brpl	.-8      	; 0x37f2 <DIO_u8GetPinValue+0xd6>
    37fa:	ca 01       	movw	r24, r20
    37fc:	81 70       	andi	r24, 0x01	; 1
    37fe:	89 83       	std	Y+1, r24	; 0x01
        break ;
    }



    return Local_u8ReturnedValue ; 
    3800:	89 81       	ldd	r24, Y+1	; 0x01
}
    3802:	0f 90       	pop	r0
    3804:	0f 90       	pop	r0
    3806:	0f 90       	pop	r0
    3808:	0f 90       	pop	r0
    380a:	0f 90       	pop	r0
    380c:	cf 91       	pop	r28
    380e:	df 91       	pop	r29
    3810:	08 95       	ret

00003812 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 Copy_u8PortId ,  u8 Copy_u8Direction)
{
    3812:	df 93       	push	r29
    3814:	cf 93       	push	r28
    3816:	cd b7       	in	r28, 0x3d	; 61
    3818:	de b7       	in	r29, 0x3e	; 62
    381a:	28 97       	sbiw	r28, 0x08	; 8
    381c:	0f b6       	in	r0, 0x3f	; 63
    381e:	f8 94       	cli
    3820:	de bf       	out	0x3e, r29	; 62
    3822:	0f be       	out	0x3f, r0	; 63
    3824:	cd bf       	out	0x3d, r28	; 61
    3826:	89 83       	std	Y+1, r24	; 0x01
    3828:	6a 83       	std	Y+2, r22	; 0x02

    switch(Copy_u8Direction)
    382a:	8a 81       	ldd	r24, Y+2	; 0x02
    382c:	28 2f       	mov	r18, r24
    382e:	30 e0       	ldi	r19, 0x00	; 0
    3830:	38 87       	std	Y+8, r19	; 0x08
    3832:	2f 83       	std	Y+7, r18	; 0x07
    3834:	8f 81       	ldd	r24, Y+7	; 0x07
    3836:	98 85       	ldd	r25, Y+8	; 0x08
    3838:	00 97       	sbiw	r24, 0x00	; 0
    383a:	c9 f1       	breq	.+114    	; 0x38ae <DIO_voidSetPortDirection+0x9c>
    383c:	2f 81       	ldd	r18, Y+7	; 0x07
    383e:	38 85       	ldd	r19, Y+8	; 0x08
    3840:	21 30       	cpi	r18, 0x01	; 1
    3842:	31 05       	cpc	r19, r1
    3844:	09 f0       	breq	.+2      	; 0x3848 <DIO_voidSetPortDirection+0x36>
    3846:	61 c0       	rjmp	.+194    	; 0x390a <DIO_voidSetPortDirection+0xf8>

    {
        case DIO_OUTPUT :
            switch(Copy_u8PortId)
    3848:	89 81       	ldd	r24, Y+1	; 0x01
    384a:	28 2f       	mov	r18, r24
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	3e 83       	std	Y+6, r19	; 0x06
    3850:	2d 83       	std	Y+5, r18	; 0x05
    3852:	8d 81       	ldd	r24, Y+5	; 0x05
    3854:	9e 81       	ldd	r25, Y+6	; 0x06
    3856:	81 30       	cpi	r24, 0x01	; 1
    3858:	91 05       	cpc	r25, r1
    385a:	d1 f0       	breq	.+52     	; 0x3890 <DIO_voidSetPortDirection+0x7e>
    385c:	2d 81       	ldd	r18, Y+5	; 0x05
    385e:	3e 81       	ldd	r19, Y+6	; 0x06
    3860:	22 30       	cpi	r18, 0x02	; 2
    3862:	31 05       	cpc	r19, r1
    3864:	2c f4       	brge	.+10     	; 0x3870 <DIO_voidSetPortDirection+0x5e>
    3866:	8d 81       	ldd	r24, Y+5	; 0x05
    3868:	9e 81       	ldd	r25, Y+6	; 0x06
    386a:	00 97       	sbiw	r24, 0x00	; 0
    386c:	61 f0       	breq	.+24     	; 0x3886 <DIO_voidSetPortDirection+0x74>
    386e:	4d c0       	rjmp	.+154    	; 0x390a <DIO_voidSetPortDirection+0xf8>
    3870:	2d 81       	ldd	r18, Y+5	; 0x05
    3872:	3e 81       	ldd	r19, Y+6	; 0x06
    3874:	22 30       	cpi	r18, 0x02	; 2
    3876:	31 05       	cpc	r19, r1
    3878:	81 f0       	breq	.+32     	; 0x389a <DIO_voidSetPortDirection+0x88>
    387a:	8d 81       	ldd	r24, Y+5	; 0x05
    387c:	9e 81       	ldd	r25, Y+6	; 0x06
    387e:	83 30       	cpi	r24, 0x03	; 3
    3880:	91 05       	cpc	r25, r1
    3882:	81 f0       	breq	.+32     	; 0x38a4 <DIO_voidSetPortDirection+0x92>
    3884:	42 c0       	rjmp	.+132    	; 0x390a <DIO_voidSetPortDirection+0xf8>
            {
                case DIO_PORTA :
                                DDRA_REG = 0xFF;
    3886:	ea e3       	ldi	r30, 0x3A	; 58
    3888:	f0 e0       	ldi	r31, 0x00	; 0
    388a:	8f ef       	ldi	r24, 0xFF	; 255
    388c:	80 83       	st	Z, r24
    388e:	3d c0       	rjmp	.+122    	; 0x390a <DIO_voidSetPortDirection+0xf8>
                break ;
                case DIO_PORTB :
                	            DDRB_REG = 0xFF;
    3890:	e7 e3       	ldi	r30, 0x37	; 55
    3892:	f0 e0       	ldi	r31, 0x00	; 0
    3894:	8f ef       	ldi	r24, 0xFF	; 255
    3896:	80 83       	st	Z, r24
    3898:	38 c0       	rjmp	.+112    	; 0x390a <DIO_voidSetPortDirection+0xf8>
                break;
                case DIO_PORTC :
                	           DDRC_REG = 0xFF;
    389a:	e4 e3       	ldi	r30, 0x34	; 52
    389c:	f0 e0       	ldi	r31, 0x00	; 0
    389e:	8f ef       	ldi	r24, 0xFF	; 255
    38a0:	80 83       	st	Z, r24
    38a2:	33 c0       	rjmp	.+102    	; 0x390a <DIO_voidSetPortDirection+0xf8>
                break ;
                case DIO_PORTD :
                	           DDRD_REG = 0xFF;
    38a4:	e1 e3       	ldi	r30, 0x31	; 49
    38a6:	f0 e0       	ldi	r31, 0x00	; 0
    38a8:	8f ef       	ldi	r24, 0xFF	; 255
    38aa:	80 83       	st	Z, r24
    38ac:	2e c0       	rjmp	.+92     	; 0x390a <DIO_voidSetPortDirection+0xf8>
                break;
            }
        break;
        case DIO_INPUT :
        switch(Copy_u8PortId)
    38ae:	89 81       	ldd	r24, Y+1	; 0x01
    38b0:	28 2f       	mov	r18, r24
    38b2:	30 e0       	ldi	r19, 0x00	; 0
    38b4:	3c 83       	std	Y+4, r19	; 0x04
    38b6:	2b 83       	std	Y+3, r18	; 0x03
    38b8:	8b 81       	ldd	r24, Y+3	; 0x03
    38ba:	9c 81       	ldd	r25, Y+4	; 0x04
    38bc:	81 30       	cpi	r24, 0x01	; 1
    38be:	91 05       	cpc	r25, r1
    38c0:	c9 f0       	breq	.+50     	; 0x38f4 <DIO_voidSetPortDirection+0xe2>
    38c2:	2b 81       	ldd	r18, Y+3	; 0x03
    38c4:	3c 81       	ldd	r19, Y+4	; 0x04
    38c6:	22 30       	cpi	r18, 0x02	; 2
    38c8:	31 05       	cpc	r19, r1
    38ca:	2c f4       	brge	.+10     	; 0x38d6 <DIO_voidSetPortDirection+0xc4>
    38cc:	8b 81       	ldd	r24, Y+3	; 0x03
    38ce:	9c 81       	ldd	r25, Y+4	; 0x04
    38d0:	00 97       	sbiw	r24, 0x00	; 0
    38d2:	61 f0       	breq	.+24     	; 0x38ec <DIO_voidSetPortDirection+0xda>
    38d4:	1a c0       	rjmp	.+52     	; 0x390a <DIO_voidSetPortDirection+0xf8>
    38d6:	2b 81       	ldd	r18, Y+3	; 0x03
    38d8:	3c 81       	ldd	r19, Y+4	; 0x04
    38da:	22 30       	cpi	r18, 0x02	; 2
    38dc:	31 05       	cpc	r19, r1
    38de:	71 f0       	breq	.+28     	; 0x38fc <DIO_voidSetPortDirection+0xea>
    38e0:	8b 81       	ldd	r24, Y+3	; 0x03
    38e2:	9c 81       	ldd	r25, Y+4	; 0x04
    38e4:	83 30       	cpi	r24, 0x03	; 3
    38e6:	91 05       	cpc	r25, r1
    38e8:	69 f0       	breq	.+26     	; 0x3904 <DIO_voidSetPortDirection+0xf2>
    38ea:	0f c0       	rjmp	.+30     	; 0x390a <DIO_voidSetPortDirection+0xf8>
            {
                        case DIO_PORTA :
                                        DDRA_REG = 0x00;
    38ec:	ea e3       	ldi	r30, 0x3A	; 58
    38ee:	f0 e0       	ldi	r31, 0x00	; 0
    38f0:	10 82       	st	Z, r1
    38f2:	0b c0       	rjmp	.+22     	; 0x390a <DIO_voidSetPortDirection+0xf8>
                        break ;
                        case DIO_PORTB :
                        	            DDRB_REG = 0x00;
    38f4:	e7 e3       	ldi	r30, 0x37	; 55
    38f6:	f0 e0       	ldi	r31, 0x00	; 0
    38f8:	10 82       	st	Z, r1
    38fa:	07 c0       	rjmp	.+14     	; 0x390a <DIO_voidSetPortDirection+0xf8>
                        break;
                        case DIO_PORTC :
                        	           DDRC_REG = 0x00;
    38fc:	e4 e3       	ldi	r30, 0x34	; 52
    38fe:	f0 e0       	ldi	r31, 0x00	; 0
    3900:	10 82       	st	Z, r1
    3902:	03 c0       	rjmp	.+6      	; 0x390a <DIO_voidSetPortDirection+0xf8>
                        break ;
                        case DIO_PORTD :
                        	           DDRD_REG = 0x00;
    3904:	e1 e3       	ldi	r30, 0x31	; 49
    3906:	f0 e0       	ldi	r31, 0x00	; 0
    3908:	10 82       	st	Z, r1
                        break;
            }
        break ;
    }
}
    390a:	28 96       	adiw	r28, 0x08	; 8
    390c:	0f b6       	in	r0, 0x3f	; 63
    390e:	f8 94       	cli
    3910:	de bf       	out	0x3e, r29	; 62
    3912:	0f be       	out	0x3f, r0	; 63
    3914:	cd bf       	out	0x3d, r28	; 61
    3916:	cf 91       	pop	r28
    3918:	df 91       	pop	r29
    391a:	08 95       	ret

0000391c <DIO_voidSetPortValue>:
void DIO_voidSetPortValue(u8 Copy_u8PortId ,  u8 Copy_u8Value)
{
    391c:	df 93       	push	r29
    391e:	cf 93       	push	r28
    3920:	00 d0       	rcall	.+0      	; 0x3922 <DIO_voidSetPortValue+0x6>
    3922:	00 d0       	rcall	.+0      	; 0x3924 <DIO_voidSetPortValue+0x8>
    3924:	cd b7       	in	r28, 0x3d	; 61
    3926:	de b7       	in	r29, 0x3e	; 62
    3928:	89 83       	std	Y+1, r24	; 0x01
    392a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortId)
    392c:	89 81       	ldd	r24, Y+1	; 0x01
    392e:	28 2f       	mov	r18, r24
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	3c 83       	std	Y+4, r19	; 0x04
    3934:	2b 83       	std	Y+3, r18	; 0x03
    3936:	8b 81       	ldd	r24, Y+3	; 0x03
    3938:	9c 81       	ldd	r25, Y+4	; 0x04
    393a:	81 30       	cpi	r24, 0x01	; 1
    393c:	91 05       	cpc	r25, r1
    393e:	d1 f0       	breq	.+52     	; 0x3974 <DIO_voidSetPortValue+0x58>
    3940:	2b 81       	ldd	r18, Y+3	; 0x03
    3942:	3c 81       	ldd	r19, Y+4	; 0x04
    3944:	22 30       	cpi	r18, 0x02	; 2
    3946:	31 05       	cpc	r19, r1
    3948:	2c f4       	brge	.+10     	; 0x3954 <DIO_voidSetPortValue+0x38>
    394a:	8b 81       	ldd	r24, Y+3	; 0x03
    394c:	9c 81       	ldd	r25, Y+4	; 0x04
    394e:	00 97       	sbiw	r24, 0x00	; 0
    3950:	61 f0       	breq	.+24     	; 0x396a <DIO_voidSetPortValue+0x4e>
    3952:	1e c0       	rjmp	.+60     	; 0x3990 <DIO_voidSetPortValue+0x74>
    3954:	2b 81       	ldd	r18, Y+3	; 0x03
    3956:	3c 81       	ldd	r19, Y+4	; 0x04
    3958:	22 30       	cpi	r18, 0x02	; 2
    395a:	31 05       	cpc	r19, r1
    395c:	81 f0       	breq	.+32     	; 0x397e <DIO_voidSetPortValue+0x62>
    395e:	8b 81       	ldd	r24, Y+3	; 0x03
    3960:	9c 81       	ldd	r25, Y+4	; 0x04
    3962:	83 30       	cpi	r24, 0x03	; 3
    3964:	91 05       	cpc	r25, r1
    3966:	81 f0       	breq	.+32     	; 0x3988 <DIO_voidSetPortValue+0x6c>
    3968:	13 c0       	rjmp	.+38     	; 0x3990 <DIO_voidSetPortValue+0x74>
	            {
	                case DIO_PORTA :
	                                PORTA_REG = Copy_u8Value;
    396a:	eb e3       	ldi	r30, 0x3B	; 59
    396c:	f0 e0       	ldi	r31, 0x00	; 0
    396e:	8a 81       	ldd	r24, Y+2	; 0x02
    3970:	80 83       	st	Z, r24
    3972:	0e c0       	rjmp	.+28     	; 0x3990 <DIO_voidSetPortValue+0x74>
	                break ;
	                case DIO_PORTB :
	                	            PORTB_REG = Copy_u8Value;
    3974:	e8 e3       	ldi	r30, 0x38	; 56
    3976:	f0 e0       	ldi	r31, 0x00	; 0
    3978:	8a 81       	ldd	r24, Y+2	; 0x02
    397a:	80 83       	st	Z, r24
    397c:	09 c0       	rjmp	.+18     	; 0x3990 <DIO_voidSetPortValue+0x74>
	                break;
	                case DIO_PORTC :
	                	           PORTC_REG = Copy_u8Value;
    397e:	e5 e3       	ldi	r30, 0x35	; 53
    3980:	f0 e0       	ldi	r31, 0x00	; 0
    3982:	8a 81       	ldd	r24, Y+2	; 0x02
    3984:	80 83       	st	Z, r24
    3986:	04 c0       	rjmp	.+8      	; 0x3990 <DIO_voidSetPortValue+0x74>
	                break ;
	                case DIO_PORTD :
	                	           PORTD_REG = Copy_u8Value;
    3988:	e2 e3       	ldi	r30, 0x32	; 50
    398a:	f0 e0       	ldi	r31, 0x00	; 0
    398c:	8a 81       	ldd	r24, Y+2	; 0x02
    398e:	80 83       	st	Z, r24
	                break;
	            }

}
    3990:	0f 90       	pop	r0
    3992:	0f 90       	pop	r0
    3994:	0f 90       	pop	r0
    3996:	0f 90       	pop	r0
    3998:	cf 91       	pop	r28
    399a:	df 91       	pop	r29
    399c:	08 95       	ret

0000399e <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 Copy_u8PortId)
{
    399e:	df 93       	push	r29
    39a0:	cf 93       	push	r28
    39a2:	00 d0       	rcall	.+0      	; 0x39a4 <DIO_u8GetPortValue+0x6>
    39a4:	00 d0       	rcall	.+0      	; 0x39a6 <DIO_u8GetPortValue+0x8>
    39a6:	cd b7       	in	r28, 0x3d	; 61
    39a8:	de b7       	in	r29, 0x3e	; 62
    39aa:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_variable=255;
    39ac:	8f ef       	ldi	r24, 0xFF	; 255
    39ae:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
    39b0:	8a 81       	ldd	r24, Y+2	; 0x02
    39b2:	28 2f       	mov	r18, r24
    39b4:	30 e0       	ldi	r19, 0x00	; 0
    39b6:	3c 83       	std	Y+4, r19	; 0x04
    39b8:	2b 83       	std	Y+3, r18	; 0x03
    39ba:	8b 81       	ldd	r24, Y+3	; 0x03
    39bc:	9c 81       	ldd	r25, Y+4	; 0x04
    39be:	81 30       	cpi	r24, 0x01	; 1
    39c0:	91 05       	cpc	r25, r1
    39c2:	d1 f0       	breq	.+52     	; 0x39f8 <DIO_u8GetPortValue+0x5a>
    39c4:	2b 81       	ldd	r18, Y+3	; 0x03
    39c6:	3c 81       	ldd	r19, Y+4	; 0x04
    39c8:	22 30       	cpi	r18, 0x02	; 2
    39ca:	31 05       	cpc	r19, r1
    39cc:	2c f4       	brge	.+10     	; 0x39d8 <DIO_u8GetPortValue+0x3a>
    39ce:	8b 81       	ldd	r24, Y+3	; 0x03
    39d0:	9c 81       	ldd	r25, Y+4	; 0x04
    39d2:	00 97       	sbiw	r24, 0x00	; 0
    39d4:	61 f0       	breq	.+24     	; 0x39ee <DIO_u8GetPortValue+0x50>
    39d6:	1e c0       	rjmp	.+60     	; 0x3a14 <DIO_u8GetPortValue+0x76>
    39d8:	2b 81       	ldd	r18, Y+3	; 0x03
    39da:	3c 81       	ldd	r19, Y+4	; 0x04
    39dc:	22 30       	cpi	r18, 0x02	; 2
    39de:	31 05       	cpc	r19, r1
    39e0:	81 f0       	breq	.+32     	; 0x3a02 <DIO_u8GetPortValue+0x64>
    39e2:	8b 81       	ldd	r24, Y+3	; 0x03
    39e4:	9c 81       	ldd	r25, Y+4	; 0x04
    39e6:	83 30       	cpi	r24, 0x03	; 3
    39e8:	91 05       	cpc	r25, r1
    39ea:	81 f0       	breq	.+32     	; 0x3a0c <DIO_u8GetPortValue+0x6e>
    39ec:	13 c0       	rjmp	.+38     	; 0x3a14 <DIO_u8GetPortValue+0x76>
		            {
		                case DIO_PORTA :
		                	local_variable =   PINA_REG ;
    39ee:	e9 e3       	ldi	r30, 0x39	; 57
    39f0:	f0 e0       	ldi	r31, 0x00	; 0
    39f2:	80 81       	ld	r24, Z
    39f4:	89 83       	std	Y+1, r24	; 0x01
    39f6:	0e c0       	rjmp	.+28     	; 0x3a14 <DIO_u8GetPortValue+0x76>
		                break ;
		                case DIO_PORTB :
		                	local_variable =   PINB_REG ;
    39f8:	e6 e3       	ldi	r30, 0x36	; 54
    39fa:	f0 e0       	ldi	r31, 0x00	; 0
    39fc:	80 81       	ld	r24, Z
    39fe:	89 83       	std	Y+1, r24	; 0x01
    3a00:	09 c0       	rjmp	.+18     	; 0x3a14 <DIO_u8GetPortValue+0x76>
		                break;
		                case DIO_PORTC :
		                	local_variable =   PINC_REG ;
    3a02:	e3 e3       	ldi	r30, 0x33	; 51
    3a04:	f0 e0       	ldi	r31, 0x00	; 0
    3a06:	80 81       	ld	r24, Z
    3a08:	89 83       	std	Y+1, r24	; 0x01
    3a0a:	04 c0       	rjmp	.+8      	; 0x3a14 <DIO_u8GetPortValue+0x76>
		                break ;
		                case DIO_PORTD :
		                	local_variable =   PIND_REG ;
    3a0c:	e0 e3       	ldi	r30, 0x30	; 48
    3a0e:	f0 e0       	ldi	r31, 0x00	; 0
    3a10:	80 81       	ld	r24, Z
    3a12:	89 83       	std	Y+1, r24	; 0x01
		                break;
		            }

	return local_variable;
    3a14:	89 81       	ldd	r24, Y+1	; 0x01

}
    3a16:	0f 90       	pop	r0
    3a18:	0f 90       	pop	r0
    3a1a:	0f 90       	pop	r0
    3a1c:	0f 90       	pop	r0
    3a1e:	cf 91       	pop	r28
    3a20:	df 91       	pop	r29
    3a22:	08 95       	ret

00003a24 <ADC_ErrorStateConvertedValueSync>:
#include"ADC_interface.h"
#include"ADC_private.h"
#include "ADC_config.h"

ERROR_STATE_t ADC_ErrorStateConvertedValueSync(ADC_Channel_t channel_number ,  u16 *Ptr_To_u16ReturnedValue)
{
    3a24:	df 93       	push	r29
    3a26:	cf 93       	push	r28
    3a28:	00 d0       	rcall	.+0      	; 0x3a2a <ADC_ErrorStateConvertedValueSync+0x6>
    3a2a:	00 d0       	rcall	.+0      	; 0x3a2c <ADC_ErrorStateConvertedValueSync+0x8>
    3a2c:	00 d0       	rcall	.+0      	; 0x3a2e <ADC_ErrorStateConvertedValueSync+0xa>
    3a2e:	cd b7       	in	r28, 0x3d	; 61
    3a30:	de b7       	in	r29, 0x3e	; 62
    3a32:	8c 83       	std	Y+4, r24	; 0x04
    3a34:	7e 83       	std	Y+6, r23	; 0x06
    3a36:	6d 83       	std	Y+5, r22	; 0x05
	ERROR_STATE_t Local_Error_State = STD_TYPE_OK;
    3a38:	81 e0       	ldi	r24, 0x01	; 1
    3a3a:	8b 83       	std	Y+3, r24	; 0x03
	ADMUX_REG &= 0b11100000; //0xE0 clearing 5 bits of channels
    3a3c:	a7 e2       	ldi	r26, 0x27	; 39
    3a3e:	b0 e0       	ldi	r27, 0x00	; 0
    3a40:	e7 e2       	ldi	r30, 0x27	; 39
    3a42:	f0 e0       	ldi	r31, 0x00	; 0
    3a44:	80 81       	ld	r24, Z
    3a46:	80 7e       	andi	r24, 0xE0	; 224
    3a48:	8c 93       	st	X, r24

	ADMUX_REG |=  (channel_number & 0x07 );//INSERT THE REQUERED CHANNEL  (& with 0b00000111) forcing user to iput from adc0 to adc7 only
    3a4a:	a7 e2       	ldi	r26, 0x27	; 39
    3a4c:	b0 e0       	ldi	r27, 0x00	; 0
    3a4e:	e7 e2       	ldi	r30, 0x27	; 39
    3a50:	f0 e0       	ldi	r31, 0x00	; 0
    3a52:	80 81       	ld	r24, Z
    3a54:	98 2f       	mov	r25, r24
    3a56:	8c 81       	ldd	r24, Y+4	; 0x04
    3a58:	87 70       	andi	r24, 0x07	; 7
    3a5a:	89 2b       	or	r24, r25
    3a5c:	8c 93       	st	X, r24

	SET_BIT( ADCSRA_REG , ADC_ADSC_BIT); // START CONVERSION
    3a5e:	a6 e2       	ldi	r26, 0x26	; 38
    3a60:	b0 e0       	ldi	r27, 0x00	; 0
    3a62:	e6 e2       	ldi	r30, 0x26	; 38
    3a64:	f0 e0       	ldi	r31, 0x00	; 0
    3a66:	80 81       	ld	r24, Z
    3a68:	80 64       	ori	r24, 0x40	; 64
    3a6a:	8c 93       	st	X, r24

	u16 local_u16TimeOutCounter = 0 ;
    3a6c:	1a 82       	std	Y+2, r1	; 0x02
    3a6e:	19 82       	std	Y+1, r1	; 0x01
    3a70:	05 c0       	rjmp	.+10     	; 0x3a7c <ADC_ErrorStateConvertedValueSync+0x58>
	while (  ( GET_BIT( ADCSRA_REG , ADC_ADIF_BIT) == 0 ) && local_u16TimeOutCounter < 30000 )// waiting for flag to be 1
	{
		local_u16TimeOutCounter++;
    3a72:	89 81       	ldd	r24, Y+1	; 0x01
    3a74:	9a 81       	ldd	r25, Y+2	; 0x02
    3a76:	01 96       	adiw	r24, 0x01	; 1
    3a78:	9a 83       	std	Y+2, r25	; 0x02
    3a7a:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_REG |=  (channel_number & 0x07 );//INSERT THE REQUERED CHANNEL  (& with 0b00000111) forcing user to iput from adc0 to adc7 only

	SET_BIT( ADCSRA_REG , ADC_ADSC_BIT); // START CONVERSION

	u16 local_u16TimeOutCounter = 0 ;
	while (  ( GET_BIT( ADCSRA_REG , ADC_ADIF_BIT) == 0 ) && local_u16TimeOutCounter < 30000 )// waiting for flag to be 1
    3a7c:	e6 e2       	ldi	r30, 0x26	; 38
    3a7e:	f0 e0       	ldi	r31, 0x00	; 0
    3a80:	80 81       	ld	r24, Z
    3a82:	82 95       	swap	r24
    3a84:	8f 70       	andi	r24, 0x0F	; 15
    3a86:	88 2f       	mov	r24, r24
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	81 70       	andi	r24, 0x01	; 1
    3a8c:	90 70       	andi	r25, 0x00	; 0
    3a8e:	00 97       	sbiw	r24, 0x00	; 0
    3a90:	31 f4       	brne	.+12     	; 0x3a9e <ADC_ErrorStateConvertedValueSync+0x7a>
    3a92:	89 81       	ldd	r24, Y+1	; 0x01
    3a94:	9a 81       	ldd	r25, Y+2	; 0x02
    3a96:	25 e7       	ldi	r18, 0x75	; 117
    3a98:	80 33       	cpi	r24, 0x30	; 48
    3a9a:	92 07       	cpc	r25, r18
    3a9c:	50 f3       	brcs	.-44     	; 0x3a72 <ADC_ErrorStateConvertedValueSync+0x4e>
	{
		local_u16TimeOutCounter++;
	}

	if(  GET_BIT( ADCSRA_REG , ADC_ADIF_BIT) == 1 && Ptr_To_u16ReturnedValue != NULL  )
    3a9e:	e6 e2       	ldi	r30, 0x26	; 38
    3aa0:	f0 e0       	ldi	r31, 0x00	; 0
    3aa2:	80 81       	ld	r24, Z
    3aa4:	82 95       	swap	r24
    3aa6:	8f 70       	andi	r24, 0x0F	; 15
    3aa8:	88 2f       	mov	r24, r24
    3aaa:	90 e0       	ldi	r25, 0x00	; 0
    3aac:	81 70       	andi	r24, 0x01	; 1
    3aae:	90 70       	andi	r25, 0x00	; 0
    3ab0:	98 2f       	mov	r25, r24
    3ab2:	81 e0       	ldi	r24, 0x01	; 1
    3ab4:	89 27       	eor	r24, r25
    3ab6:	88 23       	and	r24, r24
    3ab8:	f1 f4       	brne	.+60     	; 0x3af6 <ADC_ErrorStateConvertedValueSync+0xd2>
    3aba:	8d 81       	ldd	r24, Y+5	; 0x05
    3abc:	9e 81       	ldd	r25, Y+6	; 0x06
    3abe:	00 97       	sbiw	r24, 0x00	; 0
    3ac0:	d1 f0       	breq	.+52     	; 0x3af6 <ADC_ErrorStateConvertedValueSync+0xd2>
	{
		SET_BIT( ADCSRA_REG , ADC_ADIF_BIT); // clear flag by writing 1
    3ac2:	a6 e2       	ldi	r26, 0x26	; 38
    3ac4:	b0 e0       	ldi	r27, 0x00	; 0
    3ac6:	e6 e2       	ldi	r30, 0x26	; 38
    3ac8:	f0 e0       	ldi	r31, 0x00	; 0
    3aca:	80 81       	ld	r24, Z
    3acc:	80 61       	ori	r24, 0x10	; 16
    3ace:	8c 93       	st	X, r24
		// GET THE DIGITAL READING
#if ADC_ADJUST == ADC_ADJUST_RIGHT
		*Ptr_To_u16ReturnedValue = ( ADCL_REG | (ADCH_REG<<8) ) ;
    3ad0:	e4 e2       	ldi	r30, 0x24	; 36
    3ad2:	f0 e0       	ldi	r31, 0x00	; 0
    3ad4:	80 81       	ld	r24, Z
    3ad6:	28 2f       	mov	r18, r24
    3ad8:	30 e0       	ldi	r19, 0x00	; 0
    3ada:	e5 e2       	ldi	r30, 0x25	; 37
    3adc:	f0 e0       	ldi	r31, 0x00	; 0
    3ade:	80 81       	ld	r24, Z
    3ae0:	88 2f       	mov	r24, r24
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	98 2f       	mov	r25, r24
    3ae6:	88 27       	eor	r24, r24
    3ae8:	82 2b       	or	r24, r18
    3aea:	93 2b       	or	r25, r19
    3aec:	ed 81       	ldd	r30, Y+5	; 0x05
    3aee:	fe 81       	ldd	r31, Y+6	; 0x06
    3af0:	91 83       	std	Z+1, r25	; 0x01
    3af2:	80 83       	st	Z, r24
    3af4:	01 c0       	rjmp	.+2      	; 0x3af8 <ADC_ErrorStateConvertedValueSync+0xd4>
		*Ptr_To_u16ReturnedValue = (ADCH_REG<<2);
#endif
	}
	else // TIMEOUT
	{
		Local_Error_State = STD_TYPE_NOTOK ;
    3af6:	1b 82       	std	Y+3, r1	; 0x03
	}

	return Local_Error_State;
    3af8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3afa:	26 96       	adiw	r28, 0x06	; 6
    3afc:	0f b6       	in	r0, 0x3f	; 63
    3afe:	f8 94       	cli
    3b00:	de bf       	out	0x3e, r29	; 62
    3b02:	0f be       	out	0x3f, r0	; 63
    3b04:	cd bf       	out	0x3d, r28	; 61
    3b06:	cf 91       	pop	r28
    3b08:	df 91       	pop	r29
    3b0a:	08 95       	ret

00003b0c <ADC_voidInit>:
void ADC_voidInit(Channel_Config_t  *Ptr_To_Channel_Config)
{
    3b0c:	df 93       	push	r29
    3b0e:	cf 93       	push	r28
    3b10:	00 d0       	rcall	.+0      	; 0x3b12 <ADC_voidInit+0x6>
    3b12:	cd b7       	in	r28, 0x3d	; 61
    3b14:	de b7       	in	r29, 0x3e	; 62
    3b16:	9a 83       	std	Y+2, r25	; 0x02
    3b18:	89 83       	std	Y+1, r24	; 0x01

	ADMUX_REG &= 0x3F ;//  to clear REFS1 AND REFS0
    3b1a:	a7 e2       	ldi	r26, 0x27	; 39
    3b1c:	b0 e0       	ldi	r27, 0x00	; 0
    3b1e:	e7 e2       	ldi	r30, 0x27	; 39
    3b20:	f0 e0       	ldi	r31, 0x00	; 0
    3b22:	80 81       	ld	r24, Z
    3b24:	8f 73       	andi	r24, 0x3F	; 63
    3b26:	8c 93       	st	X, r24

	ADMUX_REG |= (Ptr_To_Channel_Config->volt);// SET voltage
    3b28:	a7 e2       	ldi	r26, 0x27	; 39
    3b2a:	b0 e0       	ldi	r27, 0x00	; 0
    3b2c:	e7 e2       	ldi	r30, 0x27	; 39
    3b2e:	f0 e0       	ldi	r31, 0x00	; 0
    3b30:	90 81       	ld	r25, Z
    3b32:	e9 81       	ldd	r30, Y+1	; 0x01
    3b34:	fa 81       	ldd	r31, Y+2	; 0x02
    3b36:	80 81       	ld	r24, Z
    3b38:	89 2b       	or	r24, r25
    3b3a:	8c 93       	st	X, r24


	ADCSRA_REG &= 0xF80 ; //0xF8  0b11111000  to clear least 3 bits of prescaler
    3b3c:	a6 e2       	ldi	r26, 0x26	; 38
    3b3e:	b0 e0       	ldi	r27, 0x00	; 0
    3b40:	e6 e2       	ldi	r30, 0x26	; 38
    3b42:	f0 e0       	ldi	r31, 0x00	; 0
    3b44:	80 81       	ld	r24, Z
    3b46:	80 78       	andi	r24, 0x80	; 128
    3b48:	8c 93       	st	X, r24

	ADCSRA_REG |= (Ptr_To_Channel_Config->Prescaler);// set prescaler
    3b4a:	a6 e2       	ldi	r26, 0x26	; 38
    3b4c:	b0 e0       	ldi	r27, 0x00	; 0
    3b4e:	e6 e2       	ldi	r30, 0x26	; 38
    3b50:	f0 e0       	ldi	r31, 0x00	; 0
    3b52:	90 81       	ld	r25, Z
    3b54:	e9 81       	ldd	r30, Y+1	; 0x01
    3b56:	fa 81       	ldd	r31, Y+2	; 0x02
    3b58:	81 81       	ldd	r24, Z+1	; 0x01
    3b5a:	89 2b       	or	r24, r25
    3b5c:	8c 93       	st	X, r24

	// PIE
#if   ADC_MECHANISM == ADC_POLLING
	CLR_BIT( ADCSRA_REG, ADC_ADIE_BIT );
    3b5e:	a6 e2       	ldi	r26, 0x26	; 38
    3b60:	b0 e0       	ldi	r27, 0x00	; 0
    3b62:	e6 e2       	ldi	r30, 0x26	; 38
    3b64:	f0 e0       	ldi	r31, 0x00	; 0
    3b66:	80 81       	ld	r24, Z
    3b68:	87 7f       	andi	r24, 0xF7	; 247
    3b6a:	8c 93       	st	X, r24
	SET_BIT( ADCSRA_REG, ADC_ADIE_BIT );

#endif

	// ENABLE ADC
	SET_BIT(ADCSRA_REG, ADC_ADEN_BIT);
    3b6c:	a6 e2       	ldi	r26, 0x26	; 38
    3b6e:	b0 e0       	ldi	r27, 0x00	; 0
    3b70:	e6 e2       	ldi	r30, 0x26	; 38
    3b72:	f0 e0       	ldi	r31, 0x00	; 0
    3b74:	80 81       	ld	r24, Z
    3b76:	80 68       	ori	r24, 0x80	; 128
    3b78:	8c 93       	st	X, r24
}
    3b7a:	0f 90       	pop	r0
    3b7c:	0f 90       	pop	r0
    3b7e:	cf 91       	pop	r28
    3b80:	df 91       	pop	r29
    3b82:	08 95       	ret

00003b84 <ADC_u16ConvertedValue>:

u16 ADC_u16ConvertedValue(ADC_Channel_t channel_number)
{
    3b84:	df 93       	push	r29
    3b86:	cf 93       	push	r28
    3b88:	0f 92       	push	r0
    3b8a:	cd b7       	in	r28, 0x3d	; 61
    3b8c:	de b7       	in	r29, 0x3e	; 62
    3b8e:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_REG &= 0b11100000; //0xE0 clearing 5 bits of channels
    3b90:	a7 e2       	ldi	r26, 0x27	; 39
    3b92:	b0 e0       	ldi	r27, 0x00	; 0
    3b94:	e7 e2       	ldi	r30, 0x27	; 39
    3b96:	f0 e0       	ldi	r31, 0x00	; 0
    3b98:	80 81       	ld	r24, Z
    3b9a:	80 7e       	andi	r24, 0xE0	; 224
    3b9c:	8c 93       	st	X, r24

	ADMUX_REG |=  (channel_number & 0x07 );//INSERT THE REQUERED CHANNEL  (& with 0b00000111) forcing user to iput from adc0 to adc7 only
    3b9e:	a7 e2       	ldi	r26, 0x27	; 39
    3ba0:	b0 e0       	ldi	r27, 0x00	; 0
    3ba2:	e7 e2       	ldi	r30, 0x27	; 39
    3ba4:	f0 e0       	ldi	r31, 0x00	; 0
    3ba6:	80 81       	ld	r24, Z
    3ba8:	98 2f       	mov	r25, r24
    3baa:	89 81       	ldd	r24, Y+1	; 0x01
    3bac:	87 70       	andi	r24, 0x07	; 7
    3bae:	89 2b       	or	r24, r25
    3bb0:	8c 93       	st	X, r24

	SET_BIT( ADCSRA_REG , ADC_ADSC_BIT); // START CONVERSION
    3bb2:	a6 e2       	ldi	r26, 0x26	; 38
    3bb4:	b0 e0       	ldi	r27, 0x00	; 0
    3bb6:	e6 e2       	ldi	r30, 0x26	; 38
    3bb8:	f0 e0       	ldi	r31, 0x00	; 0
    3bba:	80 81       	ld	r24, Z
    3bbc:	80 64       	ori	r24, 0x40	; 64
    3bbe:	8c 93       	st	X, r24

	while ( GET_BIT( ADCSRA_REG , ADC_ADIF_BIT) == 0 ); // waiting for flag to be 1
    3bc0:	e6 e2       	ldi	r30, 0x26	; 38
    3bc2:	f0 e0       	ldi	r31, 0x00	; 0
    3bc4:	80 81       	ld	r24, Z
    3bc6:	82 95       	swap	r24
    3bc8:	8f 70       	andi	r24, 0x0F	; 15
    3bca:	88 2f       	mov	r24, r24
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	81 70       	andi	r24, 0x01	; 1
    3bd0:	90 70       	andi	r25, 0x00	; 0
    3bd2:	00 97       	sbiw	r24, 0x00	; 0
    3bd4:	a9 f3       	breq	.-22     	; 0x3bc0 <ADC_u16ConvertedValue+0x3c>

	SET_BIT( ADCSRA_REG , ADC_ADIF_BIT); // clear flag by writing 1
    3bd6:	a6 e2       	ldi	r26, 0x26	; 38
    3bd8:	b0 e0       	ldi	r27, 0x00	; 0
    3bda:	e6 e2       	ldi	r30, 0x26	; 38
    3bdc:	f0 e0       	ldi	r31, 0x00	; 0
    3bde:	80 81       	ld	r24, Z
    3be0:	80 61       	ori	r24, 0x10	; 16
    3be2:	8c 93       	st	X, r24


	return (ADC_RESULT_REG);// GET THE DIGITAL READING
    3be4:	e4 e2       	ldi	r30, 0x24	; 36
    3be6:	f0 e0       	ldi	r31, 0x00	; 0
    3be8:	80 81       	ld	r24, Z
    3bea:	91 81       	ldd	r25, Z+1	; 0x01

}
    3bec:	0f 90       	pop	r0
    3bee:	cf 91       	pop	r28
    3bf0:	df 91       	pop	r29
    3bf2:	08 95       	ret

00003bf4 <SERVO_voidInit>:
#include "../../MCAL/DIO/DIO_interface.h"
#include "../../MCAL/TIMER/TIMER_interface.h"


void SERVO_voidInit(void)
{
    3bf4:	df 93       	push	r29
    3bf6:	cf 93       	push	r28
    3bf8:	cd b7       	in	r28, 0x3d	; 61
    3bfa:	de b7       	in	r29, 0x3e	; 62
    3bfc:	28 97       	sbiw	r28, 0x08	; 8
    3bfe:	0f b6       	in	r0, 0x3f	; 63
    3c00:	f8 94       	cli
    3c02:	de bf       	out	0x3e, r29	; 62
    3c04:	0f be       	out	0x3f, r0	; 63
    3c06:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinDirection(DIO_PORTD , DIO_PIN5 , DIO_OUTPUT);
    3c08:	83 e0       	ldi	r24, 0x03	; 3
    3c0a:	65 e0       	ldi	r22, 0x05	; 5
    3c0c:	41 e0       	ldi	r20, 0x01	; 1
    3c0e:	0e 94 7e 19 	call	0x32fc	; 0x32fc <DIO_voidSetPinDirection>

	TIMER_CONFIG_T1 myTimerT1 = {.timer_mode_T1=FAST_PWM_T1_ICR1_TOP ,
			                     .control_oc_T1 = CLEAR_OC1A_OC1B_AND_SET_ATB0TTOM_FASTPWM,
			                     .clock_source_T1 = FCPU_DIVBY_8
	                             };
    3c12:	ce 01       	movw	r24, r28
    3c14:	01 96       	adiw	r24, 0x01	; 1
    3c16:	9d 83       	std	Y+5, r25	; 0x05
    3c18:	8c 83       	std	Y+4, r24	; 0x04
    3c1a:	ed e8       	ldi	r30, 0x8D	; 141
    3c1c:	f2 e0       	ldi	r31, 0x02	; 2
    3c1e:	ff 83       	std	Y+7, r31	; 0x07
    3c20:	ee 83       	std	Y+6, r30	; 0x06
    3c22:	f3 e0       	ldi	r31, 0x03	; 3
    3c24:	f8 87       	std	Y+8, r31	; 0x08
    3c26:	ee 81       	ldd	r30, Y+6	; 0x06
    3c28:	ff 81       	ldd	r31, Y+7	; 0x07
    3c2a:	00 80       	ld	r0, Z
    3c2c:	8e 81       	ldd	r24, Y+6	; 0x06
    3c2e:	9f 81       	ldd	r25, Y+7	; 0x07
    3c30:	01 96       	adiw	r24, 0x01	; 1
    3c32:	9f 83       	std	Y+7, r25	; 0x07
    3c34:	8e 83       	std	Y+6, r24	; 0x06
    3c36:	ec 81       	ldd	r30, Y+4	; 0x04
    3c38:	fd 81       	ldd	r31, Y+5	; 0x05
    3c3a:	00 82       	st	Z, r0
    3c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    3c3e:	9d 81       	ldd	r25, Y+5	; 0x05
    3c40:	01 96       	adiw	r24, 0x01	; 1
    3c42:	9d 83       	std	Y+5, r25	; 0x05
    3c44:	8c 83       	std	Y+4, r24	; 0x04
    3c46:	98 85       	ldd	r25, Y+8	; 0x08
    3c48:	91 50       	subi	r25, 0x01	; 1
    3c4a:	98 87       	std	Y+8, r25	; 0x08
    3c4c:	e8 85       	ldd	r30, Y+8	; 0x08
    3c4e:	ee 23       	and	r30, r30
    3c50:	51 f7       	brne	.-44     	; 0x3c26 <SERVO_voidInit+0x32>

	Timer_voidT1Init(&myTimerT1);
    3c52:	ce 01       	movw	r24, r28
    3c54:	01 96       	adiw	r24, 0x01	; 1
    3c56:	0e 94 d5 18 	call	0x31aa	; 0x31aa <Timer_voidT1Init>
}
    3c5a:	28 96       	adiw	r28, 0x08	; 8
    3c5c:	0f b6       	in	r0, 0x3f	; 63
    3c5e:	f8 94       	cli
    3c60:	de bf       	out	0x3e, r29	; 62
    3c62:	0f be       	out	0x3f, r0	; 63
    3c64:	cd bf       	out	0x3d, r28	; 61
    3c66:	cf 91       	pop	r28
    3c68:	df 91       	pop	r29
    3c6a:	08 95       	ret

00003c6c <SERVO_u16SendAngle>:

void SERVO_u16SendAngle(u16 Copy_u16Angle)
{
    3c6c:	df 93       	push	r29
    3c6e:	cf 93       	push	r28
    3c70:	00 d0       	rcall	.+0      	; 0x3c72 <SERVO_u16SendAngle+0x6>
    3c72:	00 d0       	rcall	.+0      	; 0x3c74 <SERVO_u16SendAngle+0x8>
    3c74:	cd b7       	in	r28, 0x3d	; 61
    3c76:	de b7       	in	r29, 0x3e	; 62
    3c78:	9c 83       	std	Y+4, r25	; 0x04
    3c7a:	8b 83       	std	Y+3, r24	; 0x03
	if( Copy_u16Angle >0 && Copy_u16Angle <=180)
    3c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c80:	00 97       	sbiw	r24, 0x00	; 0
    3c82:	01 f1       	breq	.+64     	; 0x3cc4 <SERVO_u16SendAngle+0x58>
    3c84:	8b 81       	ldd	r24, Y+3	; 0x03
    3c86:	9c 81       	ldd	r25, Y+4	; 0x04
    3c88:	85 3b       	cpi	r24, 0xB5	; 181
    3c8a:	91 05       	cpc	r25, r1
    3c8c:	d8 f4       	brcc	.+54     	; 0x3cc4 <SERVO_u16SendAngle+0x58>
	{
	u16 Local_OCRValue = ( (Copy_u16Angle + 45 ) * 100 ) / 9 ;
    3c8e:	2b 81       	ldd	r18, Y+3	; 0x03
    3c90:	3c 81       	ldd	r19, Y+4	; 0x04
    3c92:	84 e6       	ldi	r24, 0x64	; 100
    3c94:	90 e0       	ldi	r25, 0x00	; 0
    3c96:	ac 01       	movw	r20, r24
    3c98:	24 9f       	mul	r18, r20
    3c9a:	c0 01       	movw	r24, r0
    3c9c:	25 9f       	mul	r18, r21
    3c9e:	90 0d       	add	r25, r0
    3ca0:	34 9f       	mul	r19, r20
    3ca2:	90 0d       	add	r25, r0
    3ca4:	11 24       	eor	r1, r1
    3ca6:	8c 56       	subi	r24, 0x6C	; 108
    3ca8:	9e 4e       	sbci	r25, 0xEE	; 238
    3caa:	29 e0       	ldi	r18, 0x09	; 9
    3cac:	30 e0       	ldi	r19, 0x00	; 0
    3cae:	b9 01       	movw	r22, r18
    3cb0:	0e 94 4b 33 	call	0x6696	; 0x6696 <__udivmodhi4>
    3cb4:	cb 01       	movw	r24, r22
    3cb6:	9a 83       	std	Y+2, r25	; 0x02
    3cb8:	89 83       	std	Y+1, r24	; 0x01
	Timer_voidSetCompareMatchValueT1A(Local_OCRValue);
    3cba:	89 81       	ldd	r24, Y+1	; 0x01
    3cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    3cbe:	0e 94 3e 19 	call	0x327c	; 0x327c <Timer_voidSetCompareMatchValueT1A>
    3cc2:	04 c0       	rjmp	.+8      	; 0x3ccc <SERVO_u16SendAngle+0x60>
	}
	else
	{
		Timer_voidSetCompareMatchValueT1A(500);
    3cc4:	84 ef       	ldi	r24, 0xF4	; 244
    3cc6:	91 e0       	ldi	r25, 0x01	; 1
    3cc8:	0e 94 3e 19 	call	0x327c	; 0x327c <Timer_voidSetCompareMatchValueT1A>
	}
}
    3ccc:	0f 90       	pop	r0
    3cce:	0f 90       	pop	r0
    3cd0:	0f 90       	pop	r0
    3cd2:	0f 90       	pop	r0
    3cd4:	cf 91       	pop	r28
    3cd6:	df 91       	pop	r29
    3cd8:	08 95       	ret

00003cda <LCD_u8Display_Number>:
#include<util/delay.h>
#include"LCD_interface.h"
#include"LCD_private.h"
#include"LCD_config.h"
void LCD_u8Display_Number(u64 Copy_Number)
{
    3cda:	af 92       	push	r10
    3cdc:	bf 92       	push	r11
    3cde:	cf 92       	push	r12
    3ce0:	df 92       	push	r13
    3ce2:	ef 92       	push	r14
    3ce4:	ff 92       	push	r15
    3ce6:	0f 93       	push	r16
    3ce8:	1f 93       	push	r17
    3cea:	df 93       	push	r29
    3cec:	cf 93       	push	r28
    3cee:	cd b7       	in	r28, 0x3d	; 61
    3cf0:	de b7       	in	r29, 0x3e	; 62
    3cf2:	c6 56       	subi	r28, 0x66	; 102
    3cf4:	d0 40       	sbci	r29, 0x00	; 0
    3cf6:	0f b6       	in	r0, 0x3f	; 63
    3cf8:	f8 94       	cli
    3cfa:	de bf       	out	0x3e, r29	; 62
    3cfc:	0f be       	out	0x3f, r0	; 63
    3cfe:	cd bf       	out	0x3d, r28	; 61
    3d00:	29 87       	std	Y+9, r18	; 0x09
    3d02:	3a 87       	std	Y+10, r19	; 0x0a
    3d04:	4b 87       	std	Y+11, r20	; 0x0b
    3d06:	5c 87       	std	Y+12, r21	; 0x0c
    3d08:	6d 87       	std	Y+13, r22	; 0x0d
    3d0a:	7e 87       	std	Y+14, r23	; 0x0e
    3d0c:	8f 87       	std	Y+15, r24	; 0x0f
    3d0e:	98 8b       	std	Y+16, r25	; 0x10


	u64 local_Reversed_variable=1;
    3d10:	81 e0       	ldi	r24, 0x01	; 1
    3d12:	89 83       	std	Y+1, r24	; 0x01
    3d14:	1a 82       	std	Y+2, r1	; 0x02
    3d16:	1b 82       	std	Y+3, r1	; 0x03
    3d18:	1c 82       	std	Y+4, r1	; 0x04
    3d1a:	1d 82       	std	Y+5, r1	; 0x05
    3d1c:	1e 82       	std	Y+6, r1	; 0x06
    3d1e:	1f 82       	std	Y+7, r1	; 0x07
    3d20:	18 86       	std	Y+8, r1	; 0x08
	if(Copy_Number==0)
    3d22:	89 85       	ldd	r24, Y+9	; 0x09
    3d24:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d26:	89 2b       	or	r24, r25
    3d28:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d2a:	89 2b       	or	r24, r25
    3d2c:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d2e:	89 2b       	or	r24, r25
    3d30:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d32:	89 2b       	or	r24, r25
    3d34:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d36:	89 2b       	or	r24, r25
    3d38:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d3a:	89 2b       	or	r24, r25
    3d3c:	98 89       	ldd	r25, Y+16	; 0x10
    3d3e:	89 2b       	or	r24, r25
    3d40:	88 23       	and	r24, r24
    3d42:	09 f0       	breq	.+2      	; 0x3d46 <LCD_u8Display_Number+0x6c>
    3d44:	62 c3       	rjmp	.+1732   	; 0x440a <LCD_u8Display_Number+0x730>
	{
		LCD_voidSendData('0');
    3d46:	80 e3       	ldi	r24, 0x30	; 48
    3d48:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <LCD_voidSendData>
    3d4c:	ef c3       	rjmp	.+2014   	; 0x452c <LCD_u8Display_Number+0x852>
	{

		while( Copy_Number!=0)
		{

			local_Reversed_variable=(local_Reversed_variable*10)+(Copy_Number%10);
    3d4e:	29 81       	ldd	r18, Y+1	; 0x01
    3d50:	3a 81       	ldd	r19, Y+2	; 0x02
    3d52:	4b 81       	ldd	r20, Y+3	; 0x03
    3d54:	5c 81       	ldd	r21, Y+4	; 0x04
    3d56:	6d 81       	ldd	r22, Y+5	; 0x05
    3d58:	7e 81       	ldd	r23, Y+6	; 0x06
    3d5a:	8f 81       	ldd	r24, Y+7	; 0x07
    3d5c:	98 85       	ldd	r25, Y+8	; 0x08
    3d5e:	a2 2e       	mov	r10, r18
    3d60:	b3 2e       	mov	r11, r19
    3d62:	c4 2e       	mov	r12, r20
    3d64:	d5 2e       	mov	r13, r21
    3d66:	e6 2e       	mov	r14, r22
    3d68:	f7 2e       	mov	r15, r23
    3d6a:	08 2f       	mov	r16, r24
    3d6c:	19 2f       	mov	r17, r25
    3d6e:	2a 2d       	mov	r18, r10
    3d70:	3b 2d       	mov	r19, r11
    3d72:	4c 2d       	mov	r20, r12
    3d74:	5d 2d       	mov	r21, r13
    3d76:	6e 2d       	mov	r22, r14
    3d78:	7f 2d       	mov	r23, r15
    3d7a:	80 2f       	mov	r24, r16
    3d7c:	91 2f       	mov	r25, r17
    3d7e:	01 e0       	ldi	r16, 0x01	; 1
    3d80:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    3d84:	29 a3       	std	Y+33, r18	; 0x21
    3d86:	3a a3       	std	Y+34, r19	; 0x22
    3d88:	4b a3       	std	Y+35, r20	; 0x23
    3d8a:	5c a3       	std	Y+36, r21	; 0x24
    3d8c:	6d a3       	std	Y+37, r22	; 0x25
    3d8e:	7e a3       	std	Y+38, r23	; 0x26
    3d90:	8f a3       	std	Y+39, r24	; 0x27
    3d92:	98 a7       	std	Y+40, r25	; 0x28
    3d94:	29 a1       	ldd	r18, Y+33	; 0x21
    3d96:	3a a1       	ldd	r19, Y+34	; 0x22
    3d98:	4b a1       	ldd	r20, Y+35	; 0x23
    3d9a:	5c a1       	ldd	r21, Y+36	; 0x24
    3d9c:	6d a1       	ldd	r22, Y+37	; 0x25
    3d9e:	7e a1       	ldd	r23, Y+38	; 0x26
    3da0:	8f a1       	ldd	r24, Y+39	; 0x27
    3da2:	98 a5       	ldd	r25, Y+40	; 0x28
    3da4:	02 e0       	ldi	r16, 0x02	; 2
    3da6:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    3daa:	29 a7       	std	Y+41, r18	; 0x29
    3dac:	3a a7       	std	Y+42, r19	; 0x2a
    3dae:	4b a7       	std	Y+43, r20	; 0x2b
    3db0:	5c a7       	std	Y+44, r21	; 0x2c
    3db2:	6d a7       	std	Y+45, r22	; 0x2d
    3db4:	7e a7       	std	Y+46, r23	; 0x2e
    3db6:	8f a7       	std	Y+47, r24	; 0x2f
    3db8:	98 ab       	std	Y+48, r25	; 0x30
    3dba:	89 a1       	ldd	r24, Y+33	; 0x21
    3dbc:	99 a5       	ldd	r25, Y+41	; 0x29
    3dbe:	89 0f       	add	r24, r25
    3dc0:	89 ab       	std	Y+49, r24	; 0x31
    3dc2:	81 e0       	ldi	r24, 0x01	; 1
    3dc4:	89 af       	std	Y+57, r24	; 0x39
    3dc6:	99 a9       	ldd	r25, Y+49	; 0x31
    3dc8:	89 a1       	ldd	r24, Y+33	; 0x21
    3dca:	98 17       	cp	r25, r24
    3dcc:	08 f0       	brcs	.+2      	; 0x3dd0 <LCD_u8Display_Number+0xf6>
    3dce:	19 ae       	std	Y+57, r1	; 0x39
    3dd0:	9a a1       	ldd	r25, Y+34	; 0x22
    3dd2:	8a a5       	ldd	r24, Y+42	; 0x2a
    3dd4:	98 0f       	add	r25, r24
    3dd6:	9a ab       	std	Y+50, r25	; 0x32
    3dd8:	91 e0       	ldi	r25, 0x01	; 1
    3dda:	9a af       	std	Y+58, r25	; 0x3a
    3ddc:	8a a9       	ldd	r24, Y+50	; 0x32
    3dde:	9a a1       	ldd	r25, Y+34	; 0x22
    3de0:	89 17       	cp	r24, r25
    3de2:	08 f0       	brcs	.+2      	; 0x3de6 <LCD_u8Display_Number+0x10c>
    3de4:	1a ae       	std	Y+58, r1	; 0x3a
    3de6:	89 ad       	ldd	r24, Y+57	; 0x39
    3de8:	9a a9       	ldd	r25, Y+50	; 0x32
    3dea:	89 0f       	add	r24, r25
    3dec:	8b af       	std	Y+59, r24	; 0x3b
    3dee:	81 e0       	ldi	r24, 0x01	; 1
    3df0:	8c af       	std	Y+60, r24	; 0x3c
    3df2:	9b ad       	ldd	r25, Y+59	; 0x3b
    3df4:	8a a9       	ldd	r24, Y+50	; 0x32
    3df6:	98 17       	cp	r25, r24
    3df8:	08 f0       	brcs	.+2      	; 0x3dfc <LCD_u8Display_Number+0x122>
    3dfa:	1c ae       	std	Y+60, r1	; 0x3c
    3dfc:	9a ad       	ldd	r25, Y+58	; 0x3a
    3dfe:	8c ad       	ldd	r24, Y+60	; 0x3c
    3e00:	98 2b       	or	r25, r24
    3e02:	9a af       	std	Y+58, r25	; 0x3a
    3e04:	9b ad       	ldd	r25, Y+59	; 0x3b
    3e06:	9a ab       	std	Y+50, r25	; 0x32
    3e08:	8b a1       	ldd	r24, Y+35	; 0x23
    3e0a:	9b a5       	ldd	r25, Y+43	; 0x2b
    3e0c:	89 0f       	add	r24, r25
    3e0e:	8b ab       	std	Y+51, r24	; 0x33
    3e10:	81 e0       	ldi	r24, 0x01	; 1
    3e12:	8d af       	std	Y+61, r24	; 0x3d
    3e14:	9b a9       	ldd	r25, Y+51	; 0x33
    3e16:	8b a1       	ldd	r24, Y+35	; 0x23
    3e18:	98 17       	cp	r25, r24
    3e1a:	08 f0       	brcs	.+2      	; 0x3e1e <LCD_u8Display_Number+0x144>
    3e1c:	1d ae       	std	Y+61, r1	; 0x3d
    3e1e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3e20:	8b a9       	ldd	r24, Y+51	; 0x33
    3e22:	98 0f       	add	r25, r24
    3e24:	9e af       	std	Y+62, r25	; 0x3e
    3e26:	91 e0       	ldi	r25, 0x01	; 1
    3e28:	9f af       	std	Y+63, r25	; 0x3f
    3e2a:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e2c:	9b a9       	ldd	r25, Y+51	; 0x33
    3e2e:	89 17       	cp	r24, r25
    3e30:	08 f0       	brcs	.+2      	; 0x3e34 <LCD_u8Display_Number+0x15a>
    3e32:	1f ae       	std	Y+63, r1	; 0x3f
    3e34:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e36:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e38:	89 2b       	or	r24, r25
    3e3a:	8d af       	std	Y+61, r24	; 0x3d
    3e3c:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e3e:	8b ab       	std	Y+51, r24	; 0x33
    3e40:	9c a1       	ldd	r25, Y+36	; 0x24
    3e42:	8c a5       	ldd	r24, Y+44	; 0x2c
    3e44:	98 0f       	add	r25, r24
    3e46:	9c ab       	std	Y+52, r25	; 0x34
    3e48:	91 e0       	ldi	r25, 0x01	; 1
    3e4a:	21 96       	adiw	r28, 0x01	; 1
    3e4c:	9f af       	std	Y+63, r25	; 0x3f
    3e4e:	21 97       	sbiw	r28, 0x01	; 1
    3e50:	8c a9       	ldd	r24, Y+52	; 0x34
    3e52:	9c a1       	ldd	r25, Y+36	; 0x24
    3e54:	89 17       	cp	r24, r25
    3e56:	18 f0       	brcs	.+6      	; 0x3e5e <LCD_u8Display_Number+0x184>
    3e58:	21 96       	adiw	r28, 0x01	; 1
    3e5a:	1f ae       	std	Y+63, r1	; 0x3f
    3e5c:	21 97       	sbiw	r28, 0x01	; 1
    3e5e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e60:	9c a9       	ldd	r25, Y+52	; 0x34
    3e62:	89 0f       	add	r24, r25
    3e64:	22 96       	adiw	r28, 0x02	; 2
    3e66:	8f af       	std	Y+63, r24	; 0x3f
    3e68:	22 97       	sbiw	r28, 0x02	; 2
    3e6a:	81 e0       	ldi	r24, 0x01	; 1
    3e6c:	23 96       	adiw	r28, 0x03	; 3
    3e6e:	8f af       	std	Y+63, r24	; 0x3f
    3e70:	23 97       	sbiw	r28, 0x03	; 3
    3e72:	22 96       	adiw	r28, 0x02	; 2
    3e74:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e76:	22 97       	sbiw	r28, 0x02	; 2
    3e78:	8c a9       	ldd	r24, Y+52	; 0x34
    3e7a:	98 17       	cp	r25, r24
    3e7c:	18 f0       	brcs	.+6      	; 0x3e84 <LCD_u8Display_Number+0x1aa>
    3e7e:	23 96       	adiw	r28, 0x03	; 3
    3e80:	1f ae       	std	Y+63, r1	; 0x3f
    3e82:	23 97       	sbiw	r28, 0x03	; 3
    3e84:	21 96       	adiw	r28, 0x01	; 1
    3e86:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e88:	21 97       	sbiw	r28, 0x01	; 1
    3e8a:	23 96       	adiw	r28, 0x03	; 3
    3e8c:	8f ad       	ldd	r24, Y+63	; 0x3f
    3e8e:	23 97       	sbiw	r28, 0x03	; 3
    3e90:	98 2b       	or	r25, r24
    3e92:	21 96       	adiw	r28, 0x01	; 1
    3e94:	9f af       	std	Y+63, r25	; 0x3f
    3e96:	21 97       	sbiw	r28, 0x01	; 1
    3e98:	22 96       	adiw	r28, 0x02	; 2
    3e9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e9c:	22 97       	sbiw	r28, 0x02	; 2
    3e9e:	9c ab       	std	Y+52, r25	; 0x34
    3ea0:	8d a1       	ldd	r24, Y+37	; 0x25
    3ea2:	9d a5       	ldd	r25, Y+45	; 0x2d
    3ea4:	89 0f       	add	r24, r25
    3ea6:	8d ab       	std	Y+53, r24	; 0x35
    3ea8:	81 e0       	ldi	r24, 0x01	; 1
    3eaa:	24 96       	adiw	r28, 0x04	; 4
    3eac:	8f af       	std	Y+63, r24	; 0x3f
    3eae:	24 97       	sbiw	r28, 0x04	; 4
    3eb0:	9d a9       	ldd	r25, Y+53	; 0x35
    3eb2:	8d a1       	ldd	r24, Y+37	; 0x25
    3eb4:	98 17       	cp	r25, r24
    3eb6:	18 f0       	brcs	.+6      	; 0x3ebe <LCD_u8Display_Number+0x1e4>
    3eb8:	24 96       	adiw	r28, 0x04	; 4
    3eba:	1f ae       	std	Y+63, r1	; 0x3f
    3ebc:	24 97       	sbiw	r28, 0x04	; 4
    3ebe:	21 96       	adiw	r28, 0x01	; 1
    3ec0:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ec2:	21 97       	sbiw	r28, 0x01	; 1
    3ec4:	8d a9       	ldd	r24, Y+53	; 0x35
    3ec6:	98 0f       	add	r25, r24
    3ec8:	25 96       	adiw	r28, 0x05	; 5
    3eca:	9f af       	std	Y+63, r25	; 0x3f
    3ecc:	25 97       	sbiw	r28, 0x05	; 5
    3ece:	91 e0       	ldi	r25, 0x01	; 1
    3ed0:	26 96       	adiw	r28, 0x06	; 6
    3ed2:	9f af       	std	Y+63, r25	; 0x3f
    3ed4:	26 97       	sbiw	r28, 0x06	; 6
    3ed6:	25 96       	adiw	r28, 0x05	; 5
    3ed8:	8f ad       	ldd	r24, Y+63	; 0x3f
    3eda:	25 97       	sbiw	r28, 0x05	; 5
    3edc:	9d a9       	ldd	r25, Y+53	; 0x35
    3ede:	89 17       	cp	r24, r25
    3ee0:	18 f0       	brcs	.+6      	; 0x3ee8 <LCD_u8Display_Number+0x20e>
    3ee2:	26 96       	adiw	r28, 0x06	; 6
    3ee4:	1f ae       	std	Y+63, r1	; 0x3f
    3ee6:	26 97       	sbiw	r28, 0x06	; 6
    3ee8:	24 96       	adiw	r28, 0x04	; 4
    3eea:	8f ad       	ldd	r24, Y+63	; 0x3f
    3eec:	24 97       	sbiw	r28, 0x04	; 4
    3eee:	26 96       	adiw	r28, 0x06	; 6
    3ef0:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ef2:	26 97       	sbiw	r28, 0x06	; 6
    3ef4:	89 2b       	or	r24, r25
    3ef6:	24 96       	adiw	r28, 0x04	; 4
    3ef8:	8f af       	std	Y+63, r24	; 0x3f
    3efa:	24 97       	sbiw	r28, 0x04	; 4
    3efc:	25 96       	adiw	r28, 0x05	; 5
    3efe:	8f ad       	ldd	r24, Y+63	; 0x3f
    3f00:	25 97       	sbiw	r28, 0x05	; 5
    3f02:	8d ab       	std	Y+53, r24	; 0x35
    3f04:	9e a1       	ldd	r25, Y+38	; 0x26
    3f06:	8e a5       	ldd	r24, Y+46	; 0x2e
    3f08:	98 0f       	add	r25, r24
    3f0a:	9e ab       	std	Y+54, r25	; 0x36
    3f0c:	91 e0       	ldi	r25, 0x01	; 1
    3f0e:	27 96       	adiw	r28, 0x07	; 7
    3f10:	9f af       	std	Y+63, r25	; 0x3f
    3f12:	27 97       	sbiw	r28, 0x07	; 7
    3f14:	8e a9       	ldd	r24, Y+54	; 0x36
    3f16:	9e a1       	ldd	r25, Y+38	; 0x26
    3f18:	89 17       	cp	r24, r25
    3f1a:	18 f0       	brcs	.+6      	; 0x3f22 <LCD_u8Display_Number+0x248>
    3f1c:	27 96       	adiw	r28, 0x07	; 7
    3f1e:	1f ae       	std	Y+63, r1	; 0x3f
    3f20:	27 97       	sbiw	r28, 0x07	; 7
    3f22:	24 96       	adiw	r28, 0x04	; 4
    3f24:	8f ad       	ldd	r24, Y+63	; 0x3f
    3f26:	24 97       	sbiw	r28, 0x04	; 4
    3f28:	9e a9       	ldd	r25, Y+54	; 0x36
    3f2a:	89 0f       	add	r24, r25
    3f2c:	28 96       	adiw	r28, 0x08	; 8
    3f2e:	8f af       	std	Y+63, r24	; 0x3f
    3f30:	28 97       	sbiw	r28, 0x08	; 8
    3f32:	81 e0       	ldi	r24, 0x01	; 1
    3f34:	29 96       	adiw	r28, 0x09	; 9
    3f36:	8f af       	std	Y+63, r24	; 0x3f
    3f38:	29 97       	sbiw	r28, 0x09	; 9
    3f3a:	28 96       	adiw	r28, 0x08	; 8
    3f3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f3e:	28 97       	sbiw	r28, 0x08	; 8
    3f40:	8e a9       	ldd	r24, Y+54	; 0x36
    3f42:	98 17       	cp	r25, r24
    3f44:	18 f0       	brcs	.+6      	; 0x3f4c <LCD_u8Display_Number+0x272>
    3f46:	29 96       	adiw	r28, 0x09	; 9
    3f48:	1f ae       	std	Y+63, r1	; 0x3f
    3f4a:	29 97       	sbiw	r28, 0x09	; 9
    3f4c:	27 96       	adiw	r28, 0x07	; 7
    3f4e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f50:	27 97       	sbiw	r28, 0x07	; 7
    3f52:	29 96       	adiw	r28, 0x09	; 9
    3f54:	8f ad       	ldd	r24, Y+63	; 0x3f
    3f56:	29 97       	sbiw	r28, 0x09	; 9
    3f58:	98 2b       	or	r25, r24
    3f5a:	27 96       	adiw	r28, 0x07	; 7
    3f5c:	9f af       	std	Y+63, r25	; 0x3f
    3f5e:	27 97       	sbiw	r28, 0x07	; 7
    3f60:	28 96       	adiw	r28, 0x08	; 8
    3f62:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f64:	28 97       	sbiw	r28, 0x08	; 8
    3f66:	9e ab       	std	Y+54, r25	; 0x36
    3f68:	8f a1       	ldd	r24, Y+39	; 0x27
    3f6a:	9f a5       	ldd	r25, Y+47	; 0x2f
    3f6c:	89 0f       	add	r24, r25
    3f6e:	8f ab       	std	Y+55, r24	; 0x37
    3f70:	81 e0       	ldi	r24, 0x01	; 1
    3f72:	2a 96       	adiw	r28, 0x0a	; 10
    3f74:	8f af       	std	Y+63, r24	; 0x3f
    3f76:	2a 97       	sbiw	r28, 0x0a	; 10
    3f78:	9f a9       	ldd	r25, Y+55	; 0x37
    3f7a:	8f a1       	ldd	r24, Y+39	; 0x27
    3f7c:	98 17       	cp	r25, r24
    3f7e:	18 f0       	brcs	.+6      	; 0x3f86 <LCD_u8Display_Number+0x2ac>
    3f80:	2a 96       	adiw	r28, 0x0a	; 10
    3f82:	1f ae       	std	Y+63, r1	; 0x3f
    3f84:	2a 97       	sbiw	r28, 0x0a	; 10
    3f86:	27 96       	adiw	r28, 0x07	; 7
    3f88:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f8a:	27 97       	sbiw	r28, 0x07	; 7
    3f8c:	8f a9       	ldd	r24, Y+55	; 0x37
    3f8e:	98 0f       	add	r25, r24
    3f90:	2b 96       	adiw	r28, 0x0b	; 11
    3f92:	9f af       	std	Y+63, r25	; 0x3f
    3f94:	2b 97       	sbiw	r28, 0x0b	; 11
    3f96:	91 e0       	ldi	r25, 0x01	; 1
    3f98:	2c 96       	adiw	r28, 0x0c	; 12
    3f9a:	9f af       	std	Y+63, r25	; 0x3f
    3f9c:	2c 97       	sbiw	r28, 0x0c	; 12
    3f9e:	2b 96       	adiw	r28, 0x0b	; 11
    3fa0:	8f ad       	ldd	r24, Y+63	; 0x3f
    3fa2:	2b 97       	sbiw	r28, 0x0b	; 11
    3fa4:	9f a9       	ldd	r25, Y+55	; 0x37
    3fa6:	89 17       	cp	r24, r25
    3fa8:	18 f0       	brcs	.+6      	; 0x3fb0 <LCD_u8Display_Number+0x2d6>
    3faa:	2c 96       	adiw	r28, 0x0c	; 12
    3fac:	1f ae       	std	Y+63, r1	; 0x3f
    3fae:	2c 97       	sbiw	r28, 0x0c	; 12
    3fb0:	2a 96       	adiw	r28, 0x0a	; 10
    3fb2:	8f ad       	ldd	r24, Y+63	; 0x3f
    3fb4:	2a 97       	sbiw	r28, 0x0a	; 10
    3fb6:	2c 96       	adiw	r28, 0x0c	; 12
    3fb8:	9f ad       	ldd	r25, Y+63	; 0x3f
    3fba:	2c 97       	sbiw	r28, 0x0c	; 12
    3fbc:	89 2b       	or	r24, r25
    3fbe:	2a 96       	adiw	r28, 0x0a	; 10
    3fc0:	8f af       	std	Y+63, r24	; 0x3f
    3fc2:	2a 97       	sbiw	r28, 0x0a	; 10
    3fc4:	2b 96       	adiw	r28, 0x0b	; 11
    3fc6:	8f ad       	ldd	r24, Y+63	; 0x3f
    3fc8:	2b 97       	sbiw	r28, 0x0b	; 11
    3fca:	8f ab       	std	Y+55, r24	; 0x37
    3fcc:	98 a5       	ldd	r25, Y+40	; 0x28
    3fce:	88 a9       	ldd	r24, Y+48	; 0x30
    3fd0:	98 0f       	add	r25, r24
    3fd2:	98 af       	std	Y+56, r25	; 0x38
    3fd4:	2a 96       	adiw	r28, 0x0a	; 10
    3fd6:	8f ad       	ldd	r24, Y+63	; 0x3f
    3fd8:	2a 97       	sbiw	r28, 0x0a	; 10
    3fda:	98 ad       	ldd	r25, Y+56	; 0x38
    3fdc:	89 0f       	add	r24, r25
    3fde:	88 af       	std	Y+56, r24	; 0x38
    3fe0:	89 a9       	ldd	r24, Y+49	; 0x31
    3fe2:	89 8f       	std	Y+25, r24	; 0x19
    3fe4:	9a a9       	ldd	r25, Y+50	; 0x32
    3fe6:	9a 8f       	std	Y+26, r25	; 0x1a
    3fe8:	8b a9       	ldd	r24, Y+51	; 0x33
    3fea:	8b 8f       	std	Y+27, r24	; 0x1b
    3fec:	9c a9       	ldd	r25, Y+52	; 0x34
    3fee:	9c 8f       	std	Y+28, r25	; 0x1c
    3ff0:	8d a9       	ldd	r24, Y+53	; 0x35
    3ff2:	8d 8f       	std	Y+29, r24	; 0x1d
    3ff4:	9e a9       	ldd	r25, Y+54	; 0x36
    3ff6:	9e 8f       	std	Y+30, r25	; 0x1e
    3ff8:	8f a9       	ldd	r24, Y+55	; 0x37
    3ffa:	8f 8f       	std	Y+31, r24	; 0x1f
    3ffc:	98 ad       	ldd	r25, Y+56	; 0x38
    3ffe:	98 a3       	std	Y+32, r25	; 0x20
    4000:	a9 84       	ldd	r10, Y+9	; 0x09
    4002:	ba 84       	ldd	r11, Y+10	; 0x0a
    4004:	cb 84       	ldd	r12, Y+11	; 0x0b
    4006:	dc 84       	ldd	r13, Y+12	; 0x0c
    4008:	ed 84       	ldd	r14, Y+13	; 0x0d
    400a:	fe 84       	ldd	r15, Y+14	; 0x0e
    400c:	0f 85       	ldd	r16, Y+15	; 0x0f
    400e:	18 89       	ldd	r17, Y+16	; 0x10
    4010:	2a 2d       	mov	r18, r10
    4012:	3b 2d       	mov	r19, r11
    4014:	4c 2d       	mov	r20, r12
    4016:	5d 2d       	mov	r21, r13
    4018:	6e 2d       	mov	r22, r14
    401a:	7f 2d       	mov	r23, r15
    401c:	80 2f       	mov	r24, r16
    401e:	91 2f       	mov	r25, r17
    4020:	0f 2e       	mov	r0, r31
    4022:	fa e0       	ldi	r31, 0x0A	; 10
    4024:	af 2e       	mov	r10, r31
    4026:	f0 2d       	mov	r31, r0
    4028:	bb 24       	eor	r11, r11
    402a:	cc 24       	eor	r12, r12
    402c:	dd 24       	eor	r13, r13
    402e:	ee 24       	eor	r14, r14
    4030:	ff 24       	eor	r15, r15
    4032:	00 e0       	ldi	r16, 0x00	; 0
    4034:	10 e0       	ldi	r17, 0x00	; 0
    4036:	0e 94 69 07 	call	0xed2	; 0xed2 <__umoddi3>
    403a:	a2 2e       	mov	r10, r18
    403c:	b3 2e       	mov	r11, r19
    403e:	c4 2e       	mov	r12, r20
    4040:	d5 2e       	mov	r13, r21
    4042:	e6 2e       	mov	r14, r22
    4044:	f7 2e       	mov	r15, r23
    4046:	08 2f       	mov	r16, r24
    4048:	19 2f       	mov	r17, r25
    404a:	a9 8a       	std	Y+17, r10	; 0x11
    404c:	ba 8a       	std	Y+18, r11	; 0x12
    404e:	cb 8a       	std	Y+19, r12	; 0x13
    4050:	dc 8a       	std	Y+20, r13	; 0x14
    4052:	ed 8a       	std	Y+21, r14	; 0x15
    4054:	fe 8a       	std	Y+22, r15	; 0x16
    4056:	0f 8b       	std	Y+23, r16	; 0x17
    4058:	18 8f       	std	Y+24, r17	; 0x18
    405a:	89 8d       	ldd	r24, Y+25	; 0x19
    405c:	99 89       	ldd	r25, Y+17	; 0x11
    405e:	89 0f       	add	r24, r25
    4060:	2d 96       	adiw	r28, 0x0d	; 13
    4062:	8f af       	std	Y+63, r24	; 0x3f
    4064:	2d 97       	sbiw	r28, 0x0d	; 13
    4066:	81 e0       	ldi	r24, 0x01	; 1
    4068:	65 96       	adiw	r28, 0x15	; 21
    406a:	8f af       	std	Y+63, r24	; 0x3f
    406c:	65 97       	sbiw	r28, 0x15	; 21
    406e:	2d 96       	adiw	r28, 0x0d	; 13
    4070:	9f ad       	ldd	r25, Y+63	; 0x3f
    4072:	2d 97       	sbiw	r28, 0x0d	; 13
    4074:	89 8d       	ldd	r24, Y+25	; 0x19
    4076:	98 17       	cp	r25, r24
    4078:	18 f0       	brcs	.+6      	; 0x4080 <LCD_u8Display_Number+0x3a6>
    407a:	65 96       	adiw	r28, 0x15	; 21
    407c:	1f ae       	std	Y+63, r1	; 0x3f
    407e:	65 97       	sbiw	r28, 0x15	; 21
    4080:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4082:	8a 89       	ldd	r24, Y+18	; 0x12
    4084:	98 0f       	add	r25, r24
    4086:	2e 96       	adiw	r28, 0x0e	; 14
    4088:	9f af       	std	Y+63, r25	; 0x3f
    408a:	2e 97       	sbiw	r28, 0x0e	; 14
    408c:	91 e0       	ldi	r25, 0x01	; 1
    408e:	66 96       	adiw	r28, 0x16	; 22
    4090:	9f af       	std	Y+63, r25	; 0x3f
    4092:	66 97       	sbiw	r28, 0x16	; 22
    4094:	2e 96       	adiw	r28, 0x0e	; 14
    4096:	8f ad       	ldd	r24, Y+63	; 0x3f
    4098:	2e 97       	sbiw	r28, 0x0e	; 14
    409a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    409c:	89 17       	cp	r24, r25
    409e:	18 f0       	brcs	.+6      	; 0x40a6 <LCD_u8Display_Number+0x3cc>
    40a0:	66 96       	adiw	r28, 0x16	; 22
    40a2:	1f ae       	std	Y+63, r1	; 0x3f
    40a4:	66 97       	sbiw	r28, 0x16	; 22
    40a6:	65 96       	adiw	r28, 0x15	; 21
    40a8:	8f ad       	ldd	r24, Y+63	; 0x3f
    40aa:	65 97       	sbiw	r28, 0x15	; 21
    40ac:	2e 96       	adiw	r28, 0x0e	; 14
    40ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    40b0:	2e 97       	sbiw	r28, 0x0e	; 14
    40b2:	89 0f       	add	r24, r25
    40b4:	67 96       	adiw	r28, 0x17	; 23
    40b6:	8f af       	std	Y+63, r24	; 0x3f
    40b8:	67 97       	sbiw	r28, 0x17	; 23
    40ba:	81 e0       	ldi	r24, 0x01	; 1
    40bc:	68 96       	adiw	r28, 0x18	; 24
    40be:	8f af       	std	Y+63, r24	; 0x3f
    40c0:	68 97       	sbiw	r28, 0x18	; 24
    40c2:	67 96       	adiw	r28, 0x17	; 23
    40c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    40c6:	67 97       	sbiw	r28, 0x17	; 23
    40c8:	2e 96       	adiw	r28, 0x0e	; 14
    40ca:	8f ad       	ldd	r24, Y+63	; 0x3f
    40cc:	2e 97       	sbiw	r28, 0x0e	; 14
    40ce:	98 17       	cp	r25, r24
    40d0:	18 f0       	brcs	.+6      	; 0x40d8 <LCD_u8Display_Number+0x3fe>
    40d2:	68 96       	adiw	r28, 0x18	; 24
    40d4:	1f ae       	std	Y+63, r1	; 0x3f
    40d6:	68 97       	sbiw	r28, 0x18	; 24
    40d8:	66 96       	adiw	r28, 0x16	; 22
    40da:	9f ad       	ldd	r25, Y+63	; 0x3f
    40dc:	66 97       	sbiw	r28, 0x16	; 22
    40de:	68 96       	adiw	r28, 0x18	; 24
    40e0:	8f ad       	ldd	r24, Y+63	; 0x3f
    40e2:	68 97       	sbiw	r28, 0x18	; 24
    40e4:	98 2b       	or	r25, r24
    40e6:	66 96       	adiw	r28, 0x16	; 22
    40e8:	9f af       	std	Y+63, r25	; 0x3f
    40ea:	66 97       	sbiw	r28, 0x16	; 22
    40ec:	67 96       	adiw	r28, 0x17	; 23
    40ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    40f0:	67 97       	sbiw	r28, 0x17	; 23
    40f2:	2e 96       	adiw	r28, 0x0e	; 14
    40f4:	9f af       	std	Y+63, r25	; 0x3f
    40f6:	2e 97       	sbiw	r28, 0x0e	; 14
    40f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40fa:	9b 89       	ldd	r25, Y+19	; 0x13
    40fc:	89 0f       	add	r24, r25
    40fe:	2f 96       	adiw	r28, 0x0f	; 15
    4100:	8f af       	std	Y+63, r24	; 0x3f
    4102:	2f 97       	sbiw	r28, 0x0f	; 15
    4104:	81 e0       	ldi	r24, 0x01	; 1
    4106:	69 96       	adiw	r28, 0x19	; 25
    4108:	8f af       	std	Y+63, r24	; 0x3f
    410a:	69 97       	sbiw	r28, 0x19	; 25
    410c:	2f 96       	adiw	r28, 0x0f	; 15
    410e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4110:	2f 97       	sbiw	r28, 0x0f	; 15
    4112:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4114:	98 17       	cp	r25, r24
    4116:	18 f0       	brcs	.+6      	; 0x411e <LCD_u8Display_Number+0x444>
    4118:	69 96       	adiw	r28, 0x19	; 25
    411a:	1f ae       	std	Y+63, r1	; 0x3f
    411c:	69 97       	sbiw	r28, 0x19	; 25
    411e:	66 96       	adiw	r28, 0x16	; 22
    4120:	9f ad       	ldd	r25, Y+63	; 0x3f
    4122:	66 97       	sbiw	r28, 0x16	; 22
    4124:	2f 96       	adiw	r28, 0x0f	; 15
    4126:	8f ad       	ldd	r24, Y+63	; 0x3f
    4128:	2f 97       	sbiw	r28, 0x0f	; 15
    412a:	98 0f       	add	r25, r24
    412c:	6a 96       	adiw	r28, 0x1a	; 26
    412e:	9f af       	std	Y+63, r25	; 0x3f
    4130:	6a 97       	sbiw	r28, 0x1a	; 26
    4132:	91 e0       	ldi	r25, 0x01	; 1
    4134:	6b 96       	adiw	r28, 0x1b	; 27
    4136:	9f af       	std	Y+63, r25	; 0x3f
    4138:	6b 97       	sbiw	r28, 0x1b	; 27
    413a:	6a 96       	adiw	r28, 0x1a	; 26
    413c:	8f ad       	ldd	r24, Y+63	; 0x3f
    413e:	6a 97       	sbiw	r28, 0x1a	; 26
    4140:	2f 96       	adiw	r28, 0x0f	; 15
    4142:	9f ad       	ldd	r25, Y+63	; 0x3f
    4144:	2f 97       	sbiw	r28, 0x0f	; 15
    4146:	89 17       	cp	r24, r25
    4148:	18 f0       	brcs	.+6      	; 0x4150 <LCD_u8Display_Number+0x476>
    414a:	6b 96       	adiw	r28, 0x1b	; 27
    414c:	1f ae       	std	Y+63, r1	; 0x3f
    414e:	6b 97       	sbiw	r28, 0x1b	; 27
    4150:	69 96       	adiw	r28, 0x19	; 25
    4152:	8f ad       	ldd	r24, Y+63	; 0x3f
    4154:	69 97       	sbiw	r28, 0x19	; 25
    4156:	6b 96       	adiw	r28, 0x1b	; 27
    4158:	9f ad       	ldd	r25, Y+63	; 0x3f
    415a:	6b 97       	sbiw	r28, 0x1b	; 27
    415c:	89 2b       	or	r24, r25
    415e:	69 96       	adiw	r28, 0x19	; 25
    4160:	8f af       	std	Y+63, r24	; 0x3f
    4162:	69 97       	sbiw	r28, 0x19	; 25
    4164:	6a 96       	adiw	r28, 0x1a	; 26
    4166:	8f ad       	ldd	r24, Y+63	; 0x3f
    4168:	6a 97       	sbiw	r28, 0x1a	; 26
    416a:	2f 96       	adiw	r28, 0x0f	; 15
    416c:	8f af       	std	Y+63, r24	; 0x3f
    416e:	2f 97       	sbiw	r28, 0x0f	; 15
    4170:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4172:	8c 89       	ldd	r24, Y+20	; 0x14
    4174:	98 0f       	add	r25, r24
    4176:	60 96       	adiw	r28, 0x10	; 16
    4178:	9f af       	std	Y+63, r25	; 0x3f
    417a:	60 97       	sbiw	r28, 0x10	; 16
    417c:	91 e0       	ldi	r25, 0x01	; 1
    417e:	6c 96       	adiw	r28, 0x1c	; 28
    4180:	9f af       	std	Y+63, r25	; 0x3f
    4182:	6c 97       	sbiw	r28, 0x1c	; 28
    4184:	60 96       	adiw	r28, 0x10	; 16
    4186:	8f ad       	ldd	r24, Y+63	; 0x3f
    4188:	60 97       	sbiw	r28, 0x10	; 16
    418a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    418c:	89 17       	cp	r24, r25
    418e:	18 f0       	brcs	.+6      	; 0x4196 <LCD_u8Display_Number+0x4bc>
    4190:	6c 96       	adiw	r28, 0x1c	; 28
    4192:	1f ae       	std	Y+63, r1	; 0x3f
    4194:	6c 97       	sbiw	r28, 0x1c	; 28
    4196:	69 96       	adiw	r28, 0x19	; 25
    4198:	8f ad       	ldd	r24, Y+63	; 0x3f
    419a:	69 97       	sbiw	r28, 0x19	; 25
    419c:	60 96       	adiw	r28, 0x10	; 16
    419e:	9f ad       	ldd	r25, Y+63	; 0x3f
    41a0:	60 97       	sbiw	r28, 0x10	; 16
    41a2:	89 0f       	add	r24, r25
    41a4:	6d 96       	adiw	r28, 0x1d	; 29
    41a6:	8f af       	std	Y+63, r24	; 0x3f
    41a8:	6d 97       	sbiw	r28, 0x1d	; 29
    41aa:	81 e0       	ldi	r24, 0x01	; 1
    41ac:	6e 96       	adiw	r28, 0x1e	; 30
    41ae:	8f af       	std	Y+63, r24	; 0x3f
    41b0:	6e 97       	sbiw	r28, 0x1e	; 30
    41b2:	6d 96       	adiw	r28, 0x1d	; 29
    41b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    41b6:	6d 97       	sbiw	r28, 0x1d	; 29
    41b8:	60 96       	adiw	r28, 0x10	; 16
    41ba:	8f ad       	ldd	r24, Y+63	; 0x3f
    41bc:	60 97       	sbiw	r28, 0x10	; 16
    41be:	98 17       	cp	r25, r24
    41c0:	18 f0       	brcs	.+6      	; 0x41c8 <LCD_u8Display_Number+0x4ee>
    41c2:	6e 96       	adiw	r28, 0x1e	; 30
    41c4:	1f ae       	std	Y+63, r1	; 0x3f
    41c6:	6e 97       	sbiw	r28, 0x1e	; 30
    41c8:	6c 96       	adiw	r28, 0x1c	; 28
    41ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    41cc:	6c 97       	sbiw	r28, 0x1c	; 28
    41ce:	6e 96       	adiw	r28, 0x1e	; 30
    41d0:	8f ad       	ldd	r24, Y+63	; 0x3f
    41d2:	6e 97       	sbiw	r28, 0x1e	; 30
    41d4:	98 2b       	or	r25, r24
    41d6:	6c 96       	adiw	r28, 0x1c	; 28
    41d8:	9f af       	std	Y+63, r25	; 0x3f
    41da:	6c 97       	sbiw	r28, 0x1c	; 28
    41dc:	6d 96       	adiw	r28, 0x1d	; 29
    41de:	9f ad       	ldd	r25, Y+63	; 0x3f
    41e0:	6d 97       	sbiw	r28, 0x1d	; 29
    41e2:	60 96       	adiw	r28, 0x10	; 16
    41e4:	9f af       	std	Y+63, r25	; 0x3f
    41e6:	60 97       	sbiw	r28, 0x10	; 16
    41e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    41ea:	9d 89       	ldd	r25, Y+21	; 0x15
    41ec:	89 0f       	add	r24, r25
    41ee:	61 96       	adiw	r28, 0x11	; 17
    41f0:	8f af       	std	Y+63, r24	; 0x3f
    41f2:	61 97       	sbiw	r28, 0x11	; 17
    41f4:	81 e0       	ldi	r24, 0x01	; 1
    41f6:	6f 96       	adiw	r28, 0x1f	; 31
    41f8:	8f af       	std	Y+63, r24	; 0x3f
    41fa:	6f 97       	sbiw	r28, 0x1f	; 31
    41fc:	61 96       	adiw	r28, 0x11	; 17
    41fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    4200:	61 97       	sbiw	r28, 0x11	; 17
    4202:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4204:	98 17       	cp	r25, r24
    4206:	18 f0       	brcs	.+6      	; 0x420e <LCD_u8Display_Number+0x534>
    4208:	6f 96       	adiw	r28, 0x1f	; 31
    420a:	1f ae       	std	Y+63, r1	; 0x3f
    420c:	6f 97       	sbiw	r28, 0x1f	; 31
    420e:	6c 96       	adiw	r28, 0x1c	; 28
    4210:	9f ad       	ldd	r25, Y+63	; 0x3f
    4212:	6c 97       	sbiw	r28, 0x1c	; 28
    4214:	61 96       	adiw	r28, 0x11	; 17
    4216:	8f ad       	ldd	r24, Y+63	; 0x3f
    4218:	61 97       	sbiw	r28, 0x11	; 17
    421a:	98 0f       	add	r25, r24
    421c:	a0 96       	adiw	r28, 0x20	; 32
    421e:	9f af       	std	Y+63, r25	; 0x3f
    4220:	a0 97       	sbiw	r28, 0x20	; 32
    4222:	91 e0       	ldi	r25, 0x01	; 1
    4224:	a1 96       	adiw	r28, 0x21	; 33
    4226:	9f af       	std	Y+63, r25	; 0x3f
    4228:	a1 97       	sbiw	r28, 0x21	; 33
    422a:	a0 96       	adiw	r28, 0x20	; 32
    422c:	8f ad       	ldd	r24, Y+63	; 0x3f
    422e:	a0 97       	sbiw	r28, 0x20	; 32
    4230:	61 96       	adiw	r28, 0x11	; 17
    4232:	9f ad       	ldd	r25, Y+63	; 0x3f
    4234:	61 97       	sbiw	r28, 0x11	; 17
    4236:	89 17       	cp	r24, r25
    4238:	18 f0       	brcs	.+6      	; 0x4240 <LCD_u8Display_Number+0x566>
    423a:	a1 96       	adiw	r28, 0x21	; 33
    423c:	1f ae       	std	Y+63, r1	; 0x3f
    423e:	a1 97       	sbiw	r28, 0x21	; 33
    4240:	6f 96       	adiw	r28, 0x1f	; 31
    4242:	8f ad       	ldd	r24, Y+63	; 0x3f
    4244:	6f 97       	sbiw	r28, 0x1f	; 31
    4246:	a1 96       	adiw	r28, 0x21	; 33
    4248:	9f ad       	ldd	r25, Y+63	; 0x3f
    424a:	a1 97       	sbiw	r28, 0x21	; 33
    424c:	89 2b       	or	r24, r25
    424e:	6f 96       	adiw	r28, 0x1f	; 31
    4250:	8f af       	std	Y+63, r24	; 0x3f
    4252:	6f 97       	sbiw	r28, 0x1f	; 31
    4254:	a0 96       	adiw	r28, 0x20	; 32
    4256:	8f ad       	ldd	r24, Y+63	; 0x3f
    4258:	a0 97       	sbiw	r28, 0x20	; 32
    425a:	61 96       	adiw	r28, 0x11	; 17
    425c:	8f af       	std	Y+63, r24	; 0x3f
    425e:	61 97       	sbiw	r28, 0x11	; 17
    4260:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4262:	8e 89       	ldd	r24, Y+22	; 0x16
    4264:	98 0f       	add	r25, r24
    4266:	62 96       	adiw	r28, 0x12	; 18
    4268:	9f af       	std	Y+63, r25	; 0x3f
    426a:	62 97       	sbiw	r28, 0x12	; 18
    426c:	91 e0       	ldi	r25, 0x01	; 1
    426e:	a2 96       	adiw	r28, 0x22	; 34
    4270:	9f af       	std	Y+63, r25	; 0x3f
    4272:	a2 97       	sbiw	r28, 0x22	; 34
    4274:	62 96       	adiw	r28, 0x12	; 18
    4276:	8f ad       	ldd	r24, Y+63	; 0x3f
    4278:	62 97       	sbiw	r28, 0x12	; 18
    427a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    427c:	89 17       	cp	r24, r25
    427e:	18 f0       	brcs	.+6      	; 0x4286 <LCD_u8Display_Number+0x5ac>
    4280:	a2 96       	adiw	r28, 0x22	; 34
    4282:	1f ae       	std	Y+63, r1	; 0x3f
    4284:	a2 97       	sbiw	r28, 0x22	; 34
    4286:	6f 96       	adiw	r28, 0x1f	; 31
    4288:	8f ad       	ldd	r24, Y+63	; 0x3f
    428a:	6f 97       	sbiw	r28, 0x1f	; 31
    428c:	62 96       	adiw	r28, 0x12	; 18
    428e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4290:	62 97       	sbiw	r28, 0x12	; 18
    4292:	89 0f       	add	r24, r25
    4294:	a3 96       	adiw	r28, 0x23	; 35
    4296:	8f af       	std	Y+63, r24	; 0x3f
    4298:	a3 97       	sbiw	r28, 0x23	; 35
    429a:	81 e0       	ldi	r24, 0x01	; 1
    429c:	a4 96       	adiw	r28, 0x24	; 36
    429e:	8f af       	std	Y+63, r24	; 0x3f
    42a0:	a4 97       	sbiw	r28, 0x24	; 36
    42a2:	a3 96       	adiw	r28, 0x23	; 35
    42a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    42a6:	a3 97       	sbiw	r28, 0x23	; 35
    42a8:	62 96       	adiw	r28, 0x12	; 18
    42aa:	8f ad       	ldd	r24, Y+63	; 0x3f
    42ac:	62 97       	sbiw	r28, 0x12	; 18
    42ae:	98 17       	cp	r25, r24
    42b0:	18 f0       	brcs	.+6      	; 0x42b8 <LCD_u8Display_Number+0x5de>
    42b2:	a4 96       	adiw	r28, 0x24	; 36
    42b4:	1f ae       	std	Y+63, r1	; 0x3f
    42b6:	a4 97       	sbiw	r28, 0x24	; 36
    42b8:	a2 96       	adiw	r28, 0x22	; 34
    42ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    42bc:	a2 97       	sbiw	r28, 0x22	; 34
    42be:	a4 96       	adiw	r28, 0x24	; 36
    42c0:	8f ad       	ldd	r24, Y+63	; 0x3f
    42c2:	a4 97       	sbiw	r28, 0x24	; 36
    42c4:	98 2b       	or	r25, r24
    42c6:	a2 96       	adiw	r28, 0x22	; 34
    42c8:	9f af       	std	Y+63, r25	; 0x3f
    42ca:	a2 97       	sbiw	r28, 0x22	; 34
    42cc:	a3 96       	adiw	r28, 0x23	; 35
    42ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    42d0:	a3 97       	sbiw	r28, 0x23	; 35
    42d2:	62 96       	adiw	r28, 0x12	; 18
    42d4:	9f af       	std	Y+63, r25	; 0x3f
    42d6:	62 97       	sbiw	r28, 0x12	; 18
    42d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    42da:	9f 89       	ldd	r25, Y+23	; 0x17
    42dc:	89 0f       	add	r24, r25
    42de:	63 96       	adiw	r28, 0x13	; 19
    42e0:	8f af       	std	Y+63, r24	; 0x3f
    42e2:	63 97       	sbiw	r28, 0x13	; 19
    42e4:	81 e0       	ldi	r24, 0x01	; 1
    42e6:	a5 96       	adiw	r28, 0x25	; 37
    42e8:	8f af       	std	Y+63, r24	; 0x3f
    42ea:	a5 97       	sbiw	r28, 0x25	; 37
    42ec:	63 96       	adiw	r28, 0x13	; 19
    42ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    42f0:	63 97       	sbiw	r28, 0x13	; 19
    42f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    42f4:	98 17       	cp	r25, r24
    42f6:	18 f0       	brcs	.+6      	; 0x42fe <LCD_u8Display_Number+0x624>
    42f8:	a5 96       	adiw	r28, 0x25	; 37
    42fa:	1f ae       	std	Y+63, r1	; 0x3f
    42fc:	a5 97       	sbiw	r28, 0x25	; 37
    42fe:	a2 96       	adiw	r28, 0x22	; 34
    4300:	9f ad       	ldd	r25, Y+63	; 0x3f
    4302:	a2 97       	sbiw	r28, 0x22	; 34
    4304:	63 96       	adiw	r28, 0x13	; 19
    4306:	8f ad       	ldd	r24, Y+63	; 0x3f
    4308:	63 97       	sbiw	r28, 0x13	; 19
    430a:	98 0f       	add	r25, r24
    430c:	a6 96       	adiw	r28, 0x26	; 38
    430e:	9f af       	std	Y+63, r25	; 0x3f
    4310:	a6 97       	sbiw	r28, 0x26	; 38
    4312:	91 e0       	ldi	r25, 0x01	; 1
    4314:	a7 96       	adiw	r28, 0x27	; 39
    4316:	9f af       	std	Y+63, r25	; 0x3f
    4318:	a7 97       	sbiw	r28, 0x27	; 39
    431a:	a6 96       	adiw	r28, 0x26	; 38
    431c:	8f ad       	ldd	r24, Y+63	; 0x3f
    431e:	a6 97       	sbiw	r28, 0x26	; 38
    4320:	63 96       	adiw	r28, 0x13	; 19
    4322:	9f ad       	ldd	r25, Y+63	; 0x3f
    4324:	63 97       	sbiw	r28, 0x13	; 19
    4326:	89 17       	cp	r24, r25
    4328:	18 f0       	brcs	.+6      	; 0x4330 <LCD_u8Display_Number+0x656>
    432a:	a7 96       	adiw	r28, 0x27	; 39
    432c:	1f ae       	std	Y+63, r1	; 0x3f
    432e:	a7 97       	sbiw	r28, 0x27	; 39
    4330:	a5 96       	adiw	r28, 0x25	; 37
    4332:	8f ad       	ldd	r24, Y+63	; 0x3f
    4334:	a5 97       	sbiw	r28, 0x25	; 37
    4336:	a7 96       	adiw	r28, 0x27	; 39
    4338:	9f ad       	ldd	r25, Y+63	; 0x3f
    433a:	a7 97       	sbiw	r28, 0x27	; 39
    433c:	89 2b       	or	r24, r25
    433e:	a5 96       	adiw	r28, 0x25	; 37
    4340:	8f af       	std	Y+63, r24	; 0x3f
    4342:	a5 97       	sbiw	r28, 0x25	; 37
    4344:	a6 96       	adiw	r28, 0x26	; 38
    4346:	8f ad       	ldd	r24, Y+63	; 0x3f
    4348:	a6 97       	sbiw	r28, 0x26	; 38
    434a:	63 96       	adiw	r28, 0x13	; 19
    434c:	8f af       	std	Y+63, r24	; 0x3f
    434e:	63 97       	sbiw	r28, 0x13	; 19
    4350:	98 a1       	ldd	r25, Y+32	; 0x20
    4352:	88 8d       	ldd	r24, Y+24	; 0x18
    4354:	98 0f       	add	r25, r24
    4356:	64 96       	adiw	r28, 0x14	; 20
    4358:	9f af       	std	Y+63, r25	; 0x3f
    435a:	64 97       	sbiw	r28, 0x14	; 20
    435c:	a5 96       	adiw	r28, 0x25	; 37
    435e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4360:	a5 97       	sbiw	r28, 0x25	; 37
    4362:	64 96       	adiw	r28, 0x14	; 20
    4364:	9f ad       	ldd	r25, Y+63	; 0x3f
    4366:	64 97       	sbiw	r28, 0x14	; 20
    4368:	89 0f       	add	r24, r25
    436a:	64 96       	adiw	r28, 0x14	; 20
    436c:	8f af       	std	Y+63, r24	; 0x3f
    436e:	64 97       	sbiw	r28, 0x14	; 20
    4370:	2d 96       	adiw	r28, 0x0d	; 13
    4372:	8f ad       	ldd	r24, Y+63	; 0x3f
    4374:	2d 97       	sbiw	r28, 0x0d	; 13
    4376:	89 83       	std	Y+1, r24	; 0x01
    4378:	2e 96       	adiw	r28, 0x0e	; 14
    437a:	9f ad       	ldd	r25, Y+63	; 0x3f
    437c:	2e 97       	sbiw	r28, 0x0e	; 14
    437e:	9a 83       	std	Y+2, r25	; 0x02
    4380:	2f 96       	adiw	r28, 0x0f	; 15
    4382:	8f ad       	ldd	r24, Y+63	; 0x3f
    4384:	2f 97       	sbiw	r28, 0x0f	; 15
    4386:	8b 83       	std	Y+3, r24	; 0x03
    4388:	60 96       	adiw	r28, 0x10	; 16
    438a:	9f ad       	ldd	r25, Y+63	; 0x3f
    438c:	60 97       	sbiw	r28, 0x10	; 16
    438e:	9c 83       	std	Y+4, r25	; 0x04
    4390:	61 96       	adiw	r28, 0x11	; 17
    4392:	8f ad       	ldd	r24, Y+63	; 0x3f
    4394:	61 97       	sbiw	r28, 0x11	; 17
    4396:	8d 83       	std	Y+5, r24	; 0x05
    4398:	62 96       	adiw	r28, 0x12	; 18
    439a:	9f ad       	ldd	r25, Y+63	; 0x3f
    439c:	62 97       	sbiw	r28, 0x12	; 18
    439e:	9e 83       	std	Y+6, r25	; 0x06
    43a0:	63 96       	adiw	r28, 0x13	; 19
    43a2:	8f ad       	ldd	r24, Y+63	; 0x3f
    43a4:	63 97       	sbiw	r28, 0x13	; 19
    43a6:	8f 83       	std	Y+7, r24	; 0x07
    43a8:	64 96       	adiw	r28, 0x14	; 20
    43aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    43ac:	64 97       	sbiw	r28, 0x14	; 20
    43ae:	98 87       	std	Y+8, r25	; 0x08
		Copy_Number = Copy_Number/10;
    43b0:	a9 84       	ldd	r10, Y+9	; 0x09
    43b2:	ba 84       	ldd	r11, Y+10	; 0x0a
    43b4:	cb 84       	ldd	r12, Y+11	; 0x0b
    43b6:	dc 84       	ldd	r13, Y+12	; 0x0c
    43b8:	ed 84       	ldd	r14, Y+13	; 0x0d
    43ba:	fe 84       	ldd	r15, Y+14	; 0x0e
    43bc:	0f 85       	ldd	r16, Y+15	; 0x0f
    43be:	18 89       	ldd	r17, Y+16	; 0x10
    43c0:	2a 2d       	mov	r18, r10
    43c2:	3b 2d       	mov	r19, r11
    43c4:	4c 2d       	mov	r20, r12
    43c6:	5d 2d       	mov	r21, r13
    43c8:	6e 2d       	mov	r22, r14
    43ca:	7f 2d       	mov	r23, r15
    43cc:	80 2f       	mov	r24, r16
    43ce:	91 2f       	mov	r25, r17
    43d0:	0f 2e       	mov	r0, r31
    43d2:	fa e0       	ldi	r31, 0x0A	; 10
    43d4:	af 2e       	mov	r10, r31
    43d6:	f0 2d       	mov	r31, r0
    43d8:	bb 24       	eor	r11, r11
    43da:	cc 24       	eor	r12, r12
    43dc:	dd 24       	eor	r13, r13
    43de:	ee 24       	eor	r14, r14
    43e0:	ff 24       	eor	r15, r15
    43e2:	00 e0       	ldi	r16, 0x00	; 0
    43e4:	10 e0       	ldi	r17, 0x00	; 0
    43e6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__udivdi3>
    43ea:	a2 2e       	mov	r10, r18
    43ec:	b3 2e       	mov	r11, r19
    43ee:	c4 2e       	mov	r12, r20
    43f0:	d5 2e       	mov	r13, r21
    43f2:	e6 2e       	mov	r14, r22
    43f4:	f7 2e       	mov	r15, r23
    43f6:	08 2f       	mov	r16, r24
    43f8:	19 2f       	mov	r17, r25
    43fa:	a9 86       	std	Y+9, r10	; 0x09
    43fc:	ba 86       	std	Y+10, r11	; 0x0a
    43fe:	cb 86       	std	Y+11, r12	; 0x0b
    4400:	dc 86       	std	Y+12, r13	; 0x0c
    4402:	ed 86       	std	Y+13, r14	; 0x0d
    4404:	fe 86       	std	Y+14, r15	; 0x0e
    4406:	0f 87       	std	Y+15, r16	; 0x0f
    4408:	18 8b       	std	Y+16, r17	; 0x10
		LCD_voidSendData('0');
	}
	else
	{

		while( Copy_Number!=0)
    440a:	89 85       	ldd	r24, Y+9	; 0x09
    440c:	9a 85       	ldd	r25, Y+10	; 0x0a
    440e:	89 2b       	or	r24, r25
    4410:	9b 85       	ldd	r25, Y+11	; 0x0b
    4412:	89 2b       	or	r24, r25
    4414:	9c 85       	ldd	r25, Y+12	; 0x0c
    4416:	89 2b       	or	r24, r25
    4418:	9d 85       	ldd	r25, Y+13	; 0x0d
    441a:	89 2b       	or	r24, r25
    441c:	9e 85       	ldd	r25, Y+14	; 0x0e
    441e:	89 2b       	or	r24, r25
    4420:	9f 85       	ldd	r25, Y+15	; 0x0f
    4422:	89 2b       	or	r24, r25
    4424:	98 89       	ldd	r25, Y+16	; 0x10
    4426:	89 2b       	or	r24, r25
    4428:	88 23       	and	r24, r24
    442a:	09 f0       	breq	.+2      	; 0x442e <LCD_u8Display_Number+0x754>
    442c:	90 cc       	rjmp	.-1760   	; 0x3d4e <LCD_u8Display_Number+0x74>
    442e:	5e c0       	rjmp	.+188    	; 0x44ec <LCD_u8Display_Number+0x812>
		Copy_Number = Copy_Number/10;

	     }
		while(local_Reversed_variable!=1)
		{
			LCD_voidSendData( (local_Reversed_variable % 10)+ 48);
    4430:	a9 80       	ldd	r10, Y+1	; 0x01
    4432:	ba 80       	ldd	r11, Y+2	; 0x02
    4434:	cb 80       	ldd	r12, Y+3	; 0x03
    4436:	dc 80       	ldd	r13, Y+4	; 0x04
    4438:	ed 80       	ldd	r14, Y+5	; 0x05
    443a:	fe 80       	ldd	r15, Y+6	; 0x06
    443c:	0f 81       	ldd	r16, Y+7	; 0x07
    443e:	18 85       	ldd	r17, Y+8	; 0x08
    4440:	2a 2d       	mov	r18, r10
    4442:	3b 2d       	mov	r19, r11
    4444:	4c 2d       	mov	r20, r12
    4446:	5d 2d       	mov	r21, r13
    4448:	6e 2d       	mov	r22, r14
    444a:	7f 2d       	mov	r23, r15
    444c:	80 2f       	mov	r24, r16
    444e:	91 2f       	mov	r25, r17
    4450:	0f 2e       	mov	r0, r31
    4452:	fa e0       	ldi	r31, 0x0A	; 10
    4454:	af 2e       	mov	r10, r31
    4456:	f0 2d       	mov	r31, r0
    4458:	bb 24       	eor	r11, r11
    445a:	cc 24       	eor	r12, r12
    445c:	dd 24       	eor	r13, r13
    445e:	ee 24       	eor	r14, r14
    4460:	ff 24       	eor	r15, r15
    4462:	00 e0       	ldi	r16, 0x00	; 0
    4464:	10 e0       	ldi	r17, 0x00	; 0
    4466:	0e 94 69 07 	call	0xed2	; 0xed2 <__umoddi3>
    446a:	a2 2e       	mov	r10, r18
    446c:	b3 2e       	mov	r11, r19
    446e:	c4 2e       	mov	r12, r20
    4470:	d5 2e       	mov	r13, r21
    4472:	e6 2e       	mov	r14, r22
    4474:	f7 2e       	mov	r15, r23
    4476:	08 2f       	mov	r16, r24
    4478:	19 2f       	mov	r17, r25
    447a:	2a 2d       	mov	r18, r10
    447c:	3b 2d       	mov	r19, r11
    447e:	4c 2d       	mov	r20, r12
    4480:	5d 2d       	mov	r21, r13
    4482:	6e 2d       	mov	r22, r14
    4484:	7f 2d       	mov	r23, r15
    4486:	80 2f       	mov	r24, r16
    4488:	91 2f       	mov	r25, r17
    448a:	82 2f       	mov	r24, r18
    448c:	80 5d       	subi	r24, 0xD0	; 208
    448e:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <LCD_voidSendData>
			local_Reversed_variable=local_Reversed_variable/10;
    4492:	a9 80       	ldd	r10, Y+1	; 0x01
    4494:	ba 80       	ldd	r11, Y+2	; 0x02
    4496:	cb 80       	ldd	r12, Y+3	; 0x03
    4498:	dc 80       	ldd	r13, Y+4	; 0x04
    449a:	ed 80       	ldd	r14, Y+5	; 0x05
    449c:	fe 80       	ldd	r15, Y+6	; 0x06
    449e:	0f 81       	ldd	r16, Y+7	; 0x07
    44a0:	18 85       	ldd	r17, Y+8	; 0x08
    44a2:	2a 2d       	mov	r18, r10
    44a4:	3b 2d       	mov	r19, r11
    44a6:	4c 2d       	mov	r20, r12
    44a8:	5d 2d       	mov	r21, r13
    44aa:	6e 2d       	mov	r22, r14
    44ac:	7f 2d       	mov	r23, r15
    44ae:	80 2f       	mov	r24, r16
    44b0:	91 2f       	mov	r25, r17
    44b2:	0f 2e       	mov	r0, r31
    44b4:	fa e0       	ldi	r31, 0x0A	; 10
    44b6:	af 2e       	mov	r10, r31
    44b8:	f0 2d       	mov	r31, r0
    44ba:	bb 24       	eor	r11, r11
    44bc:	cc 24       	eor	r12, r12
    44be:	dd 24       	eor	r13, r13
    44c0:	ee 24       	eor	r14, r14
    44c2:	ff 24       	eor	r15, r15
    44c4:	00 e0       	ldi	r16, 0x00	; 0
    44c6:	10 e0       	ldi	r17, 0x00	; 0
    44c8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__udivdi3>
    44cc:	a2 2e       	mov	r10, r18
    44ce:	b3 2e       	mov	r11, r19
    44d0:	c4 2e       	mov	r12, r20
    44d2:	d5 2e       	mov	r13, r21
    44d4:	e6 2e       	mov	r14, r22
    44d6:	f7 2e       	mov	r15, r23
    44d8:	08 2f       	mov	r16, r24
    44da:	19 2f       	mov	r17, r25
    44dc:	a9 82       	std	Y+1, r10	; 0x01
    44de:	ba 82       	std	Y+2, r11	; 0x02
    44e0:	cb 82       	std	Y+3, r12	; 0x03
    44e2:	dc 82       	std	Y+4, r13	; 0x04
    44e4:	ed 82       	std	Y+5, r14	; 0x05
    44e6:	fe 82       	std	Y+6, r15	; 0x06
    44e8:	0f 83       	std	Y+7, r16	; 0x07
    44ea:	18 87       	std	Y+8, r17	; 0x08

			local_Reversed_variable=(local_Reversed_variable*10)+(Copy_Number%10);
		Copy_Number = Copy_Number/10;

	     }
		while(local_Reversed_variable!=1)
    44ec:	89 81       	ldd	r24, Y+1	; 0x01
    44ee:	81 30       	cpi	r24, 0x01	; 1
    44f0:	09 f0       	breq	.+2      	; 0x44f4 <LCD_u8Display_Number+0x81a>
    44f2:	9e cf       	rjmp	.-196    	; 0x4430 <LCD_u8Display_Number+0x756>
    44f4:	8a 81       	ldd	r24, Y+2	; 0x02
    44f6:	88 23       	and	r24, r24
    44f8:	09 f0       	breq	.+2      	; 0x44fc <LCD_u8Display_Number+0x822>
    44fa:	9a cf       	rjmp	.-204    	; 0x4430 <LCD_u8Display_Number+0x756>
    44fc:	8b 81       	ldd	r24, Y+3	; 0x03
    44fe:	88 23       	and	r24, r24
    4500:	09 f0       	breq	.+2      	; 0x4504 <LCD_u8Display_Number+0x82a>
    4502:	96 cf       	rjmp	.-212    	; 0x4430 <LCD_u8Display_Number+0x756>
    4504:	8c 81       	ldd	r24, Y+4	; 0x04
    4506:	88 23       	and	r24, r24
    4508:	09 f0       	breq	.+2      	; 0x450c <LCD_u8Display_Number+0x832>
    450a:	92 cf       	rjmp	.-220    	; 0x4430 <LCD_u8Display_Number+0x756>
    450c:	8d 81       	ldd	r24, Y+5	; 0x05
    450e:	88 23       	and	r24, r24
    4510:	09 f0       	breq	.+2      	; 0x4514 <LCD_u8Display_Number+0x83a>
    4512:	8e cf       	rjmp	.-228    	; 0x4430 <LCD_u8Display_Number+0x756>
    4514:	8e 81       	ldd	r24, Y+6	; 0x06
    4516:	88 23       	and	r24, r24
    4518:	09 f0       	breq	.+2      	; 0x451c <LCD_u8Display_Number+0x842>
    451a:	8a cf       	rjmp	.-236    	; 0x4430 <LCD_u8Display_Number+0x756>
    451c:	8f 81       	ldd	r24, Y+7	; 0x07
    451e:	88 23       	and	r24, r24
    4520:	09 f0       	breq	.+2      	; 0x4524 <LCD_u8Display_Number+0x84a>
    4522:	86 cf       	rjmp	.-244    	; 0x4430 <LCD_u8Display_Number+0x756>
    4524:	88 85       	ldd	r24, Y+8	; 0x08
    4526:	88 23       	and	r24, r24
    4528:	09 f0       	breq	.+2      	; 0x452c <LCD_u8Display_Number+0x852>
    452a:	82 cf       	rjmp	.-252    	; 0x4430 <LCD_u8Display_Number+0x756>

	}



}
    452c:	ca 59       	subi	r28, 0x9A	; 154
    452e:	df 4f       	sbci	r29, 0xFF	; 255
    4530:	0f b6       	in	r0, 0x3f	; 63
    4532:	f8 94       	cli
    4534:	de bf       	out	0x3e, r29	; 62
    4536:	0f be       	out	0x3f, r0	; 63
    4538:	cd bf       	out	0x3d, r28	; 61
    453a:	cf 91       	pop	r28
    453c:	df 91       	pop	r29
    453e:	1f 91       	pop	r17
    4540:	0f 91       	pop	r16
    4542:	ff 90       	pop	r15
    4544:	ef 90       	pop	r14
    4546:	df 90       	pop	r13
    4548:	cf 90       	pop	r12
    454a:	bf 90       	pop	r11
    454c:	af 90       	pop	r10
    454e:	08 95       	ret

00004550 <LCD_voidShiftRight>:
void LCD_voidShiftRight(void)
{
    4550:	df 93       	push	r29
    4552:	cf 93       	push	r28
    4554:	cd b7       	in	r28, 0x3d	; 61
    4556:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCommand(0b00011100);
    4558:	8c e1       	ldi	r24, 0x1C	; 28
    455a:	0e 94 d6 24 	call	0x49ac	; 0x49ac <LCD_voidSendCommand>
}
    455e:	cf 91       	pop	r28
    4560:	df 91       	pop	r29
    4562:	08 95       	ret

00004564 <LCD_voidShiftLeft>:
void LCD_voidShiftLeft(void)
{
    4564:	df 93       	push	r29
    4566:	cf 93       	push	r28
    4568:	cd b7       	in	r28, 0x3d	; 61
    456a:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCommand(0b00011000);
    456c:	88 e1       	ldi	r24, 0x18	; 24
    456e:	0e 94 d6 24 	call	0x49ac	; 0x49ac <LCD_voidSendCommand>
}
    4572:	cf 91       	pop	r28
    4574:	df 91       	pop	r29
    4576:	08 95       	ret

00004578 <LCD_voidSendString>:
void LCD_voidSendString (u8 *copy_pu8string)
{
    4578:	df 93       	push	r29
    457a:	cf 93       	push	r28
    457c:	00 d0       	rcall	.+0      	; 0x457e <LCD_voidSendString+0x6>
    457e:	0f 92       	push	r0
    4580:	cd b7       	in	r28, 0x3d	; 61
    4582:	de b7       	in	r29, 0x3e	; 62
    4584:	9b 83       	std	Y+3, r25	; 0x03
    4586:	8a 83       	std	Y+2, r24	; 0x02
u8 local_iterator =0;
    4588:	19 82       	std	Y+1, r1	; 0x01
    458a:	0e c0       	rjmp	.+28     	; 0x45a8 <LCD_voidSendString+0x30>
  while(copy_pu8string[local_iterator]!= '\0')
    {
	  LCD_voidSendData(copy_pu8string[local_iterator]);
    458c:	89 81       	ldd	r24, Y+1	; 0x01
    458e:	28 2f       	mov	r18, r24
    4590:	30 e0       	ldi	r19, 0x00	; 0
    4592:	8a 81       	ldd	r24, Y+2	; 0x02
    4594:	9b 81       	ldd	r25, Y+3	; 0x03
    4596:	fc 01       	movw	r30, r24
    4598:	e2 0f       	add	r30, r18
    459a:	f3 1f       	adc	r31, r19
    459c:	80 81       	ld	r24, Z
    459e:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <LCD_voidSendData>
	  local_iterator++;
    45a2:	89 81       	ldd	r24, Y+1	; 0x01
    45a4:	8f 5f       	subi	r24, 0xFF	; 255
    45a6:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(0b00011000);
}
void LCD_voidSendString (u8 *copy_pu8string)
{
u8 local_iterator =0;
  while(copy_pu8string[local_iterator]!= '\0')
    45a8:	89 81       	ldd	r24, Y+1	; 0x01
    45aa:	28 2f       	mov	r18, r24
    45ac:	30 e0       	ldi	r19, 0x00	; 0
    45ae:	8a 81       	ldd	r24, Y+2	; 0x02
    45b0:	9b 81       	ldd	r25, Y+3	; 0x03
    45b2:	fc 01       	movw	r30, r24
    45b4:	e2 0f       	add	r30, r18
    45b6:	f3 1f       	adc	r31, r19
    45b8:	80 81       	ld	r24, Z
    45ba:	88 23       	and	r24, r24
    45bc:	39 f7       	brne	.-50     	; 0x458c <LCD_voidSendString+0x14>
    {
	  LCD_voidSendData(copy_pu8string[local_iterator]);
	  local_iterator++;
	}

}
    45be:	0f 90       	pop	r0
    45c0:	0f 90       	pop	r0
    45c2:	0f 90       	pop	r0
    45c4:	cf 91       	pop	r28
    45c6:	df 91       	pop	r29
    45c8:	08 95       	ret

000045ca <LCD_voidSendEXTRAChar>:

void LCD_voidSendEXTRAChar(u8 copy_u8PatternLocation, u8 *p_u8ExtraChar,u8 copy_u8_row, u8 copy_u8_coulmn)
{
    45ca:	df 93       	push	r29
    45cc:	cf 93       	push	r28
    45ce:	cd b7       	in	r28, 0x3d	; 61
    45d0:	de b7       	in	r29, 0x3e	; 62
    45d2:	27 97       	sbiw	r28, 0x07	; 7
    45d4:	0f b6       	in	r0, 0x3f	; 63
    45d6:	f8 94       	cli
    45d8:	de bf       	out	0x3e, r29	; 62
    45da:	0f be       	out	0x3f, r0	; 63
    45dc:	cd bf       	out	0x3d, r28	; 61
    45de:	8b 83       	std	Y+3, r24	; 0x03
    45e0:	7d 83       	std	Y+5, r23	; 0x05
    45e2:	6c 83       	std	Y+4, r22	; 0x04
    45e4:	4e 83       	std	Y+6, r20	; 0x06
    45e6:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Address =0 ;
    45e8:	1a 82       	std	Y+2, r1	; 0x02
	Local_u8Address = copy_u8PatternLocation*8;
    45ea:	8b 81       	ldd	r24, Y+3	; 0x03
    45ec:	88 2f       	mov	r24, r24
    45ee:	90 e0       	ldi	r25, 0x00	; 0
    45f0:	88 0f       	add	r24, r24
    45f2:	99 1f       	adc	r25, r25
    45f4:	88 0f       	add	r24, r24
    45f6:	99 1f       	adc	r25, r25
    45f8:	88 0f       	add	r24, r24
    45fa:	99 1f       	adc	r25, r25
    45fc:	8a 83       	std	Y+2, r24	; 0x02
	//Go toCGRAM
	LCD_voidSendCommand(64+Local_u8Address );
    45fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4600:	80 5c       	subi	r24, 0xC0	; 192
    4602:	0e 94 d6 24 	call	0x49ac	; 0x49ac <LCD_voidSendCommand>

	//GENERATE CHARACHTER INSIDE CGRAM
	for(u8 i =0; i<8; i++)
    4606:	19 82       	std	Y+1, r1	; 0x01
    4608:	0e c0       	rjmp	.+28     	; 0x4626 <LCD_voidSendEXTRAChar+0x5c>
	{
		LCD_voidSendData(p_u8ExtraChar[i]);
    460a:	89 81       	ldd	r24, Y+1	; 0x01
    460c:	28 2f       	mov	r18, r24
    460e:	30 e0       	ldi	r19, 0x00	; 0
    4610:	8c 81       	ldd	r24, Y+4	; 0x04
    4612:	9d 81       	ldd	r25, Y+5	; 0x05
    4614:	fc 01       	movw	r30, r24
    4616:	e2 0f       	add	r30, r18
    4618:	f3 1f       	adc	r31, r19
    461a:	80 81       	ld	r24, Z
    461c:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <LCD_voidSendData>
	Local_u8Address = copy_u8PatternLocation*8;
	//Go toCGRAM
	LCD_voidSendCommand(64+Local_u8Address );

	//GENERATE CHARACHTER INSIDE CGRAM
	for(u8 i =0; i<8; i++)
    4620:	89 81       	ldd	r24, Y+1	; 0x01
    4622:	8f 5f       	subi	r24, 0xFF	; 255
    4624:	89 83       	std	Y+1, r24	; 0x01
    4626:	89 81       	ldd	r24, Y+1	; 0x01
    4628:	88 30       	cpi	r24, 0x08	; 8
    462a:	78 f3       	brcs	.-34     	; 0x460a <LCD_voidSendEXTRAChar+0x40>
	{
		LCD_voidSendData(p_u8ExtraChar[i]);
	}

	//BACK TO DDRAM
	LCD_voidSetposition(copy_u8_row, copy_u8_coulmn);
    462c:	8e 81       	ldd	r24, Y+6	; 0x06
    462e:	6f 81       	ldd	r22, Y+7	; 0x07
    4630:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>


	//DRAW CHAR ON DISPLAY
	LCD_voidSendData(copy_u8PatternLocation);
    4634:	8b 81       	ldd	r24, Y+3	; 0x03
    4636:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <LCD_voidSendData>

}
    463a:	27 96       	adiw	r28, 0x07	; 7
    463c:	0f b6       	in	r0, 0x3f	; 63
    463e:	f8 94       	cli
    4640:	de bf       	out	0x3e, r29	; 62
    4642:	0f be       	out	0x3f, r0	; 63
    4644:	cd bf       	out	0x3d, r28	; 61
    4646:	cf 91       	pop	r28
    4648:	df 91       	pop	r29
    464a:	08 95       	ret

0000464c <LCD_voidSetposition>:
void LCD_voidSetposition(u8 copy_u8Row, u8 copy_u8Col)
{
    464c:	df 93       	push	r29
    464e:	cf 93       	push	r28
    4650:	00 d0       	rcall	.+0      	; 0x4652 <LCD_voidSetposition+0x6>
    4652:	00 d0       	rcall	.+0      	; 0x4654 <LCD_voidSetposition+0x8>
    4654:	cd b7       	in	r28, 0x3d	; 61
    4656:	de b7       	in	r29, 0x3e	; 62
    4658:	89 83       	std	Y+1, r24	; 0x01
    465a:	6a 83       	std	Y+2, r22	; 0x02

	switch(copy_u8Row)
    465c:	89 81       	ldd	r24, Y+1	; 0x01
    465e:	28 2f       	mov	r18, r24
    4660:	30 e0       	ldi	r19, 0x00	; 0
    4662:	3c 83       	std	Y+4, r19	; 0x04
    4664:	2b 83       	std	Y+3, r18	; 0x03
    4666:	8b 81       	ldd	r24, Y+3	; 0x03
    4668:	9c 81       	ldd	r25, Y+4	; 0x04
    466a:	81 30       	cpi	r24, 0x01	; 1
    466c:	91 05       	cpc	r25, r1
    466e:	31 f0       	breq	.+12     	; 0x467c <LCD_voidSetposition+0x30>
    4670:	2b 81       	ldd	r18, Y+3	; 0x03
    4672:	3c 81       	ldd	r19, Y+4	; 0x04
    4674:	22 30       	cpi	r18, 0x02	; 2
    4676:	31 05       	cpc	r19, r1
    4678:	31 f0       	breq	.+12     	; 0x4686 <LCD_voidSetposition+0x3a>
    467a:	09 c0       	rjmp	.+18     	; 0x468e <LCD_voidSetposition+0x42>
	{
	case 1:
	LCD_voidSendCommand(0x80+ (copy_u8Col-1 ) );
    467c:	8a 81       	ldd	r24, Y+2	; 0x02
    467e:	81 58       	subi	r24, 0x81	; 129
    4680:	0e 94 d6 24 	call	0x49ac	; 0x49ac <LCD_voidSendCommand>
    4684:	04 c0       	rjmp	.+8      	; 0x468e <LCD_voidSetposition+0x42>
		break;

	case 2:
		LCD_voidSendCommand(0x80+64+ (copy_u8Col-1) );
    4686:	8a 81       	ldd	r24, Y+2	; 0x02
    4688:	81 54       	subi	r24, 0x41	; 65
    468a:	0e 94 d6 24 	call	0x49ac	; 0x49ac <LCD_voidSendCommand>

	default:
		break;

	}
}
    468e:	0f 90       	pop	r0
    4690:	0f 90       	pop	r0
    4692:	0f 90       	pop	r0
    4694:	0f 90       	pop	r0
    4696:	cf 91       	pop	r28
    4698:	df 91       	pop	r29
    469a:	08 95       	ret

0000469c <LCD_voidInit>:
void LCD_voidInit(void)
{
    469c:	df 93       	push	r29
    469e:	cf 93       	push	r28
    46a0:	cd b7       	in	r28, 0x3d	; 61
    46a2:	de b7       	in	r29, 0x3e	; 62
    46a4:	aa 97       	sbiw	r28, 0x2a	; 42
    46a6:	0f b6       	in	r0, 0x3f	; 63
    46a8:	f8 94       	cli
    46aa:	de bf       	out	0x3e, r29	; 62
    46ac:	0f be       	out	0x3f, r0	; 63
    46ae:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPortDirection(LCD_DATA_PORT,DIO_OUTPUT);
    46b0:	82 e0       	ldi	r24, 0x02	; 2
    46b2:	61 e0       	ldi	r22, 0x01	; 1
    46b4:	0e 94 09 1c 	call	0x3812	; 0x3812 <DIO_voidSetPortDirection>

	DIO_voidSetPinDirection(LCD_CTR_PORT,LCD_EN_PIN,DIO_OUTPUT);
    46b8:	80 e0       	ldi	r24, 0x00	; 0
    46ba:	62 e0       	ldi	r22, 0x02	; 2
    46bc:	41 e0       	ldi	r20, 0x01	; 1
    46be:	0e 94 7e 19 	call	0x32fc	; 0x32fc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CTR_PORT,LCD_RS_PIN,DIO_OUTPUT);
    46c2:	80 e0       	ldi	r24, 0x00	; 0
    46c4:	60 e0       	ldi	r22, 0x00	; 0
    46c6:	41 e0       	ldi	r20, 0x01	; 1
    46c8:	0e 94 7e 19 	call	0x32fc	; 0x32fc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CTR_PORT,LCD_RW_PIN,DIO_OUTPUT);
    46cc:	80 e0       	ldi	r24, 0x00	; 0
    46ce:	61 e0       	ldi	r22, 0x01	; 1
    46d0:	41 e0       	ldi	r20, 0x01	; 1
    46d2:	0e 94 7e 19 	call	0x32fc	; 0x32fc <DIO_voidSetPinDirection>
    46d6:	80 e0       	ldi	r24, 0x00	; 0
    46d8:	90 e0       	ldi	r25, 0x00	; 0
    46da:	a8 e4       	ldi	r26, 0x48	; 72
    46dc:	b2 e4       	ldi	r27, 0x42	; 66
    46de:	8f a3       	std	Y+39, r24	; 0x27
    46e0:	98 a7       	std	Y+40, r25	; 0x28
    46e2:	a9 a7       	std	Y+41, r26	; 0x29
    46e4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46e6:	6f a1       	ldd	r22, Y+39	; 0x27
    46e8:	78 a5       	ldd	r23, Y+40	; 0x28
    46ea:	89 a5       	ldd	r24, Y+41	; 0x29
    46ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    46ee:	20 e0       	ldi	r18, 0x00	; 0
    46f0:	30 e0       	ldi	r19, 0x00	; 0
    46f2:	4a ef       	ldi	r20, 0xFA	; 250
    46f4:	54 e4       	ldi	r21, 0x44	; 68
    46f6:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    46fa:	dc 01       	movw	r26, r24
    46fc:	cb 01       	movw	r24, r22
    46fe:	8b a3       	std	Y+35, r24	; 0x23
    4700:	9c a3       	std	Y+36, r25	; 0x24
    4702:	ad a3       	std	Y+37, r26	; 0x25
    4704:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4706:	6b a1       	ldd	r22, Y+35	; 0x23
    4708:	7c a1       	ldd	r23, Y+36	; 0x24
    470a:	8d a1       	ldd	r24, Y+37	; 0x25
    470c:	9e a1       	ldd	r25, Y+38	; 0x26
    470e:	20 e0       	ldi	r18, 0x00	; 0
    4710:	30 e0       	ldi	r19, 0x00	; 0
    4712:	40 e8       	ldi	r20, 0x80	; 128
    4714:	5f e3       	ldi	r21, 0x3F	; 63
    4716:	0e 94 89 11 	call	0x2312	; 0x2312 <__ltsf2>
    471a:	88 23       	and	r24, r24
    471c:	2c f4       	brge	.+10     	; 0x4728 <LCD_voidInit+0x8c>
		__ticks = 1;
    471e:	81 e0       	ldi	r24, 0x01	; 1
    4720:	90 e0       	ldi	r25, 0x00	; 0
    4722:	9a a3       	std	Y+34, r25	; 0x22
    4724:	89 a3       	std	Y+33, r24	; 0x21
    4726:	3f c0       	rjmp	.+126    	; 0x47a6 <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    4728:	6b a1       	ldd	r22, Y+35	; 0x23
    472a:	7c a1       	ldd	r23, Y+36	; 0x24
    472c:	8d a1       	ldd	r24, Y+37	; 0x25
    472e:	9e a1       	ldd	r25, Y+38	; 0x26
    4730:	20 e0       	ldi	r18, 0x00	; 0
    4732:	3f ef       	ldi	r19, 0xFF	; 255
    4734:	4f e7       	ldi	r20, 0x7F	; 127
    4736:	57 e4       	ldi	r21, 0x47	; 71
    4738:	0e 94 29 11 	call	0x2252	; 0x2252 <__gtsf2>
    473c:	18 16       	cp	r1, r24
    473e:	4c f5       	brge	.+82     	; 0x4792 <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4740:	6f a1       	ldd	r22, Y+39	; 0x27
    4742:	78 a5       	ldd	r23, Y+40	; 0x28
    4744:	89 a5       	ldd	r24, Y+41	; 0x29
    4746:	9a a5       	ldd	r25, Y+42	; 0x2a
    4748:	20 e0       	ldi	r18, 0x00	; 0
    474a:	30 e0       	ldi	r19, 0x00	; 0
    474c:	40 e2       	ldi	r20, 0x20	; 32
    474e:	51 e4       	ldi	r21, 0x41	; 65
    4750:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4754:	dc 01       	movw	r26, r24
    4756:	cb 01       	movw	r24, r22
    4758:	bc 01       	movw	r22, r24
    475a:	cd 01       	movw	r24, r26
    475c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4760:	dc 01       	movw	r26, r24
    4762:	cb 01       	movw	r24, r22
    4764:	9a a3       	std	Y+34, r25	; 0x22
    4766:	89 a3       	std	Y+33, r24	; 0x21
    4768:	0f c0       	rjmp	.+30     	; 0x4788 <LCD_voidInit+0xec>
    476a:	88 ec       	ldi	r24, 0xC8	; 200
    476c:	90 e0       	ldi	r25, 0x00	; 0
    476e:	98 a3       	std	Y+32, r25	; 0x20
    4770:	8f 8f       	std	Y+31, r24	; 0x1f
    4772:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4774:	98 a1       	ldd	r25, Y+32	; 0x20
    4776:	01 97       	sbiw	r24, 0x01	; 1
    4778:	f1 f7       	brne	.-4      	; 0x4776 <LCD_voidInit+0xda>
    477a:	98 a3       	std	Y+32, r25	; 0x20
    477c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    477e:	89 a1       	ldd	r24, Y+33	; 0x21
    4780:	9a a1       	ldd	r25, Y+34	; 0x22
    4782:	01 97       	sbiw	r24, 0x01	; 1
    4784:	9a a3       	std	Y+34, r25	; 0x22
    4786:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4788:	89 a1       	ldd	r24, Y+33	; 0x21
    478a:	9a a1       	ldd	r25, Y+34	; 0x22
    478c:	00 97       	sbiw	r24, 0x00	; 0
    478e:	69 f7       	brne	.-38     	; 0x476a <LCD_voidInit+0xce>
    4790:	14 c0       	rjmp	.+40     	; 0x47ba <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4792:	6b a1       	ldd	r22, Y+35	; 0x23
    4794:	7c a1       	ldd	r23, Y+36	; 0x24
    4796:	8d a1       	ldd	r24, Y+37	; 0x25
    4798:	9e a1       	ldd	r25, Y+38	; 0x26
    479a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    479e:	dc 01       	movw	r26, r24
    47a0:	cb 01       	movw	r24, r22
    47a2:	9a a3       	std	Y+34, r25	; 0x22
    47a4:	89 a3       	std	Y+33, r24	; 0x21
    47a6:	89 a1       	ldd	r24, Y+33	; 0x21
    47a8:	9a a1       	ldd	r25, Y+34	; 0x22
    47aa:	9e 8f       	std	Y+30, r25	; 0x1e
    47ac:	8d 8f       	std	Y+29, r24	; 0x1d
    47ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    47b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    47b2:	01 97       	sbiw	r24, 0x01	; 1
    47b4:	f1 f7       	brne	.-4      	; 0x47b2 <LCD_voidInit+0x116>
    47b6:	9e 8f       	std	Y+30, r25	; 0x1e
    47b8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);

	// FUNCTION SET
	LCD_voidSendCommand(0b00111000);
    47ba:	88 e3       	ldi	r24, 0x38	; 56
    47bc:	0e 94 d6 24 	call	0x49ac	; 0x49ac <LCD_voidSendCommand>
    47c0:	80 e0       	ldi	r24, 0x00	; 0
    47c2:	90 e0       	ldi	r25, 0x00	; 0
    47c4:	a8 e4       	ldi	r26, 0x48	; 72
    47c6:	b2 e4       	ldi	r27, 0x42	; 66
    47c8:	89 8f       	std	Y+25, r24	; 0x19
    47ca:	9a 8f       	std	Y+26, r25	; 0x1a
    47cc:	ab 8f       	std	Y+27, r26	; 0x1b
    47ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47d0:	69 8d       	ldd	r22, Y+25	; 0x19
    47d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    47d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47d8:	20 e0       	ldi	r18, 0x00	; 0
    47da:	30 e0       	ldi	r19, 0x00	; 0
    47dc:	4a ef       	ldi	r20, 0xFA	; 250
    47de:	54 e4       	ldi	r21, 0x44	; 68
    47e0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    47e4:	dc 01       	movw	r26, r24
    47e6:	cb 01       	movw	r24, r22
    47e8:	8d 8b       	std	Y+21, r24	; 0x15
    47ea:	9e 8b       	std	Y+22, r25	; 0x16
    47ec:	af 8b       	std	Y+23, r26	; 0x17
    47ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    47f0:	6d 89       	ldd	r22, Y+21	; 0x15
    47f2:	7e 89       	ldd	r23, Y+22	; 0x16
    47f4:	8f 89       	ldd	r24, Y+23	; 0x17
    47f6:	98 8d       	ldd	r25, Y+24	; 0x18
    47f8:	20 e0       	ldi	r18, 0x00	; 0
    47fa:	30 e0       	ldi	r19, 0x00	; 0
    47fc:	40 e8       	ldi	r20, 0x80	; 128
    47fe:	5f e3       	ldi	r21, 0x3F	; 63
    4800:	0e 94 89 11 	call	0x2312	; 0x2312 <__ltsf2>
    4804:	88 23       	and	r24, r24
    4806:	2c f4       	brge	.+10     	; 0x4812 <LCD_voidInit+0x176>
		__ticks = 1;
    4808:	81 e0       	ldi	r24, 0x01	; 1
    480a:	90 e0       	ldi	r25, 0x00	; 0
    480c:	9c 8b       	std	Y+20, r25	; 0x14
    480e:	8b 8b       	std	Y+19, r24	; 0x13
    4810:	3f c0       	rjmp	.+126    	; 0x4890 <LCD_voidInit+0x1f4>
	else if (__tmp > 65535)
    4812:	6d 89       	ldd	r22, Y+21	; 0x15
    4814:	7e 89       	ldd	r23, Y+22	; 0x16
    4816:	8f 89       	ldd	r24, Y+23	; 0x17
    4818:	98 8d       	ldd	r25, Y+24	; 0x18
    481a:	20 e0       	ldi	r18, 0x00	; 0
    481c:	3f ef       	ldi	r19, 0xFF	; 255
    481e:	4f e7       	ldi	r20, 0x7F	; 127
    4820:	57 e4       	ldi	r21, 0x47	; 71
    4822:	0e 94 29 11 	call	0x2252	; 0x2252 <__gtsf2>
    4826:	18 16       	cp	r1, r24
    4828:	4c f5       	brge	.+82     	; 0x487c <LCD_voidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    482a:	69 8d       	ldd	r22, Y+25	; 0x19
    482c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    482e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4830:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4832:	20 e0       	ldi	r18, 0x00	; 0
    4834:	30 e0       	ldi	r19, 0x00	; 0
    4836:	40 e2       	ldi	r20, 0x20	; 32
    4838:	51 e4       	ldi	r21, 0x41	; 65
    483a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    483e:	dc 01       	movw	r26, r24
    4840:	cb 01       	movw	r24, r22
    4842:	bc 01       	movw	r22, r24
    4844:	cd 01       	movw	r24, r26
    4846:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    484a:	dc 01       	movw	r26, r24
    484c:	cb 01       	movw	r24, r22
    484e:	9c 8b       	std	Y+20, r25	; 0x14
    4850:	8b 8b       	std	Y+19, r24	; 0x13
    4852:	0f c0       	rjmp	.+30     	; 0x4872 <LCD_voidInit+0x1d6>
    4854:	88 ec       	ldi	r24, 0xC8	; 200
    4856:	90 e0       	ldi	r25, 0x00	; 0
    4858:	9a 8b       	std	Y+18, r25	; 0x12
    485a:	89 8b       	std	Y+17, r24	; 0x11
    485c:	89 89       	ldd	r24, Y+17	; 0x11
    485e:	9a 89       	ldd	r25, Y+18	; 0x12
    4860:	01 97       	sbiw	r24, 0x01	; 1
    4862:	f1 f7       	brne	.-4      	; 0x4860 <LCD_voidInit+0x1c4>
    4864:	9a 8b       	std	Y+18, r25	; 0x12
    4866:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4868:	8b 89       	ldd	r24, Y+19	; 0x13
    486a:	9c 89       	ldd	r25, Y+20	; 0x14
    486c:	01 97       	sbiw	r24, 0x01	; 1
    486e:	9c 8b       	std	Y+20, r25	; 0x14
    4870:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4872:	8b 89       	ldd	r24, Y+19	; 0x13
    4874:	9c 89       	ldd	r25, Y+20	; 0x14
    4876:	00 97       	sbiw	r24, 0x00	; 0
    4878:	69 f7       	brne	.-38     	; 0x4854 <LCD_voidInit+0x1b8>
    487a:	14 c0       	rjmp	.+40     	; 0x48a4 <LCD_voidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    487c:	6d 89       	ldd	r22, Y+21	; 0x15
    487e:	7e 89       	ldd	r23, Y+22	; 0x16
    4880:	8f 89       	ldd	r24, Y+23	; 0x17
    4882:	98 8d       	ldd	r25, Y+24	; 0x18
    4884:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4888:	dc 01       	movw	r26, r24
    488a:	cb 01       	movw	r24, r22
    488c:	9c 8b       	std	Y+20, r25	; 0x14
    488e:	8b 8b       	std	Y+19, r24	; 0x13
    4890:	8b 89       	ldd	r24, Y+19	; 0x13
    4892:	9c 89       	ldd	r25, Y+20	; 0x14
    4894:	98 8b       	std	Y+16, r25	; 0x10
    4896:	8f 87       	std	Y+15, r24	; 0x0f
    4898:	8f 85       	ldd	r24, Y+15	; 0x0f
    489a:	98 89       	ldd	r25, Y+16	; 0x10
    489c:	01 97       	sbiw	r24, 0x01	; 1
    489e:	f1 f7       	brne	.-4      	; 0x489c <LCD_voidInit+0x200>
    48a0:	98 8b       	std	Y+16, r25	; 0x10
    48a2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	//display/on/off
	LCD_voidSendCommand(0b00001100);
    48a4:	8c e0       	ldi	r24, 0x0C	; 12
    48a6:	0e 94 d6 24 	call	0x49ac	; 0x49ac <LCD_voidSendCommand>

	//display clr
	LCD_voidSendCommand(0x01);
    48aa:	81 e0       	ldi	r24, 0x01	; 1
    48ac:	0e 94 d6 24 	call	0x49ac	; 0x49ac <LCD_voidSendCommand>
    48b0:	80 e0       	ldi	r24, 0x00	; 0
    48b2:	90 e0       	ldi	r25, 0x00	; 0
    48b4:	a0 e0       	ldi	r26, 0x00	; 0
    48b6:	b0 e4       	ldi	r27, 0x40	; 64
    48b8:	8b 87       	std	Y+11, r24	; 0x0b
    48ba:	9c 87       	std	Y+12, r25	; 0x0c
    48bc:	ad 87       	std	Y+13, r26	; 0x0d
    48be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    48c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    48c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    48c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    48c8:	20 e0       	ldi	r18, 0x00	; 0
    48ca:	30 e0       	ldi	r19, 0x00	; 0
    48cc:	4a ef       	ldi	r20, 0xFA	; 250
    48ce:	54 e4       	ldi	r21, 0x44	; 68
    48d0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    48d4:	dc 01       	movw	r26, r24
    48d6:	cb 01       	movw	r24, r22
    48d8:	8f 83       	std	Y+7, r24	; 0x07
    48da:	98 87       	std	Y+8, r25	; 0x08
    48dc:	a9 87       	std	Y+9, r26	; 0x09
    48de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    48e0:	6f 81       	ldd	r22, Y+7	; 0x07
    48e2:	78 85       	ldd	r23, Y+8	; 0x08
    48e4:	89 85       	ldd	r24, Y+9	; 0x09
    48e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    48e8:	20 e0       	ldi	r18, 0x00	; 0
    48ea:	30 e0       	ldi	r19, 0x00	; 0
    48ec:	40 e8       	ldi	r20, 0x80	; 128
    48ee:	5f e3       	ldi	r21, 0x3F	; 63
    48f0:	0e 94 89 11 	call	0x2312	; 0x2312 <__ltsf2>
    48f4:	88 23       	and	r24, r24
    48f6:	2c f4       	brge	.+10     	; 0x4902 <LCD_voidInit+0x266>
		__ticks = 1;
    48f8:	81 e0       	ldi	r24, 0x01	; 1
    48fa:	90 e0       	ldi	r25, 0x00	; 0
    48fc:	9e 83       	std	Y+6, r25	; 0x06
    48fe:	8d 83       	std	Y+5, r24	; 0x05
    4900:	3f c0       	rjmp	.+126    	; 0x4980 <LCD_voidInit+0x2e4>
	else if (__tmp > 65535)
    4902:	6f 81       	ldd	r22, Y+7	; 0x07
    4904:	78 85       	ldd	r23, Y+8	; 0x08
    4906:	89 85       	ldd	r24, Y+9	; 0x09
    4908:	9a 85       	ldd	r25, Y+10	; 0x0a
    490a:	20 e0       	ldi	r18, 0x00	; 0
    490c:	3f ef       	ldi	r19, 0xFF	; 255
    490e:	4f e7       	ldi	r20, 0x7F	; 127
    4910:	57 e4       	ldi	r21, 0x47	; 71
    4912:	0e 94 29 11 	call	0x2252	; 0x2252 <__gtsf2>
    4916:	18 16       	cp	r1, r24
    4918:	4c f5       	brge	.+82     	; 0x496c <LCD_voidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    491a:	6b 85       	ldd	r22, Y+11	; 0x0b
    491c:	7c 85       	ldd	r23, Y+12	; 0x0c
    491e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4920:	9e 85       	ldd	r25, Y+14	; 0x0e
    4922:	20 e0       	ldi	r18, 0x00	; 0
    4924:	30 e0       	ldi	r19, 0x00	; 0
    4926:	40 e2       	ldi	r20, 0x20	; 32
    4928:	51 e4       	ldi	r21, 0x41	; 65
    492a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    492e:	dc 01       	movw	r26, r24
    4930:	cb 01       	movw	r24, r22
    4932:	bc 01       	movw	r22, r24
    4934:	cd 01       	movw	r24, r26
    4936:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    493a:	dc 01       	movw	r26, r24
    493c:	cb 01       	movw	r24, r22
    493e:	9e 83       	std	Y+6, r25	; 0x06
    4940:	8d 83       	std	Y+5, r24	; 0x05
    4942:	0f c0       	rjmp	.+30     	; 0x4962 <LCD_voidInit+0x2c6>
    4944:	88 ec       	ldi	r24, 0xC8	; 200
    4946:	90 e0       	ldi	r25, 0x00	; 0
    4948:	9c 83       	std	Y+4, r25	; 0x04
    494a:	8b 83       	std	Y+3, r24	; 0x03
    494c:	8b 81       	ldd	r24, Y+3	; 0x03
    494e:	9c 81       	ldd	r25, Y+4	; 0x04
    4950:	01 97       	sbiw	r24, 0x01	; 1
    4952:	f1 f7       	brne	.-4      	; 0x4950 <LCD_voidInit+0x2b4>
    4954:	9c 83       	std	Y+4, r25	; 0x04
    4956:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4958:	8d 81       	ldd	r24, Y+5	; 0x05
    495a:	9e 81       	ldd	r25, Y+6	; 0x06
    495c:	01 97       	sbiw	r24, 0x01	; 1
    495e:	9e 83       	std	Y+6, r25	; 0x06
    4960:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4962:	8d 81       	ldd	r24, Y+5	; 0x05
    4964:	9e 81       	ldd	r25, Y+6	; 0x06
    4966:	00 97       	sbiw	r24, 0x00	; 0
    4968:	69 f7       	brne	.-38     	; 0x4944 <LCD_voidInit+0x2a8>
    496a:	14 c0       	rjmp	.+40     	; 0x4994 <LCD_voidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    496c:	6f 81       	ldd	r22, Y+7	; 0x07
    496e:	78 85       	ldd	r23, Y+8	; 0x08
    4970:	89 85       	ldd	r24, Y+9	; 0x09
    4972:	9a 85       	ldd	r25, Y+10	; 0x0a
    4974:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4978:	dc 01       	movw	r26, r24
    497a:	cb 01       	movw	r24, r22
    497c:	9e 83       	std	Y+6, r25	; 0x06
    497e:	8d 83       	std	Y+5, r24	; 0x05
    4980:	8d 81       	ldd	r24, Y+5	; 0x05
    4982:	9e 81       	ldd	r25, Y+6	; 0x06
    4984:	9a 83       	std	Y+2, r25	; 0x02
    4986:	89 83       	std	Y+1, r24	; 0x01
    4988:	89 81       	ldd	r24, Y+1	; 0x01
    498a:	9a 81       	ldd	r25, Y+2	; 0x02
    498c:	01 97       	sbiw	r24, 0x01	; 1
    498e:	f1 f7       	brne	.-4      	; 0x498c <LCD_voidInit+0x2f0>
    4990:	9a 83       	std	Y+2, r25	; 0x02
    4992:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	// entry modeset
	LCD_voidSendCommand(0b00000110);
    4994:	86 e0       	ldi	r24, 0x06	; 6
    4996:	0e 94 d6 24 	call	0x49ac	; 0x49ac <LCD_voidSendCommand>

}
    499a:	aa 96       	adiw	r28, 0x2a	; 42
    499c:	0f b6       	in	r0, 0x3f	; 63
    499e:	f8 94       	cli
    49a0:	de bf       	out	0x3e, r29	; 62
    49a2:	0f be       	out	0x3f, r0	; 63
    49a4:	cd bf       	out	0x3d, r28	; 61
    49a6:	cf 91       	pop	r28
    49a8:	df 91       	pop	r29
    49aa:	08 95       	ret

000049ac <LCD_voidSendCommand>:
void LCD_voidSendCommand(u8 copy_u8command)
{
    49ac:	df 93       	push	r29
    49ae:	cf 93       	push	r28
    49b0:	cd b7       	in	r28, 0x3d	; 61
    49b2:	de b7       	in	r29, 0x3e	; 62
    49b4:	e1 97       	sbiw	r28, 0x31	; 49
    49b6:	0f b6       	in	r0, 0x3f	; 63
    49b8:	f8 94       	cli
    49ba:	de bf       	out	0x3e, r29	; 62
    49bc:	0f be       	out	0x3f, r0	; 63
    49be:	cd bf       	out	0x3d, r28	; 61
    49c0:	89 ab       	std	Y+49, r24	; 0x31
     *     ENABLE SEQUENCE
     */



	DIO_voidSetPinValue (LCD_CTR_PORT,LCD_RS_PIN,DIO_LOW);
    49c2:	80 e0       	ldi	r24, 0x00	; 0
    49c4:	60 e0       	ldi	r22, 0x00	; 0
    49c6:	40 e0       	ldi	r20, 0x00	; 0
    49c8:	0e 94 86 1a 	call	0x350c	; 0x350c <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_CTR_PORT,LCD_RW_PIN,DIO_LOW);
    49cc:	80 e0       	ldi	r24, 0x00	; 0
    49ce:	61 e0       	ldi	r22, 0x01	; 1
    49d0:	40 e0       	ldi	r20, 0x00	; 0
    49d2:	0e 94 86 1a 	call	0x350c	; 0x350c <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DATA_PORT, copy_u8command);
    49d6:	82 e0       	ldi	r24, 0x02	; 2
    49d8:	69 a9       	ldd	r22, Y+49	; 0x31
    49da:	0e 94 8e 1c 	call	0x391c	; 0x391c <DIO_voidSetPortValue>


	DIO_voidSetPinValue(LCD_CTR_PORT,LCD_EN_PIN,DIO_HIGH);
    49de:	80 e0       	ldi	r24, 0x00	; 0
    49e0:	62 e0       	ldi	r22, 0x02	; 2
    49e2:	41 e0       	ldi	r20, 0x01	; 1
    49e4:	0e 94 86 1a 	call	0x350c	; 0x350c <DIO_voidSetPinValue>
    49e8:	80 e0       	ldi	r24, 0x00	; 0
    49ea:	90 e0       	ldi	r25, 0x00	; 0
    49ec:	a0 e8       	ldi	r26, 0x80	; 128
    49ee:	bf e3       	ldi	r27, 0x3F	; 63
    49f0:	8d a7       	std	Y+45, r24	; 0x2d
    49f2:	9e a7       	std	Y+46, r25	; 0x2e
    49f4:	af a7       	std	Y+47, r26	; 0x2f
    49f6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    49f8:	6d a5       	ldd	r22, Y+45	; 0x2d
    49fa:	7e a5       	ldd	r23, Y+46	; 0x2e
    49fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    49fe:	98 a9       	ldd	r25, Y+48	; 0x30
    4a00:	2b ea       	ldi	r18, 0xAB	; 171
    4a02:	3a ea       	ldi	r19, 0xAA	; 170
    4a04:	4a e2       	ldi	r20, 0x2A	; 42
    4a06:	50 e4       	ldi	r21, 0x40	; 64
    4a08:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4a0c:	dc 01       	movw	r26, r24
    4a0e:	cb 01       	movw	r24, r22
    4a10:	89 a7       	std	Y+41, r24	; 0x29
    4a12:	9a a7       	std	Y+42, r25	; 0x2a
    4a14:	ab a7       	std	Y+43, r26	; 0x2b
    4a16:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    4a18:	69 a5       	ldd	r22, Y+41	; 0x29
    4a1a:	7a a5       	ldd	r23, Y+42	; 0x2a
    4a1c:	8b a5       	ldd	r24, Y+43	; 0x2b
    4a1e:	9c a5       	ldd	r25, Y+44	; 0x2c
    4a20:	20 e0       	ldi	r18, 0x00	; 0
    4a22:	30 e0       	ldi	r19, 0x00	; 0
    4a24:	40 e8       	ldi	r20, 0x80	; 128
    4a26:	5f e3       	ldi	r21, 0x3F	; 63
    4a28:	0e 94 89 11 	call	0x2312	; 0x2312 <__ltsf2>
    4a2c:	88 23       	and	r24, r24
    4a2e:	1c f4       	brge	.+6      	; 0x4a36 <LCD_voidSendCommand+0x8a>
		__ticks = 1;
    4a30:	81 e0       	ldi	r24, 0x01	; 1
    4a32:	88 a7       	std	Y+40, r24	; 0x28
    4a34:	91 c0       	rjmp	.+290    	; 0x4b58 <LCD_voidSendCommand+0x1ac>
	else if (__tmp > 255)
    4a36:	69 a5       	ldd	r22, Y+41	; 0x29
    4a38:	7a a5       	ldd	r23, Y+42	; 0x2a
    4a3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    4a3c:	9c a5       	ldd	r25, Y+44	; 0x2c
    4a3e:	20 e0       	ldi	r18, 0x00	; 0
    4a40:	30 e0       	ldi	r19, 0x00	; 0
    4a42:	4f e7       	ldi	r20, 0x7F	; 127
    4a44:	53 e4       	ldi	r21, 0x43	; 67
    4a46:	0e 94 29 11 	call	0x2252	; 0x2252 <__gtsf2>
    4a4a:	18 16       	cp	r1, r24
    4a4c:	0c f0       	brlt	.+2      	; 0x4a50 <LCD_voidSendCommand+0xa4>
    4a4e:	7b c0       	rjmp	.+246    	; 0x4b46 <LCD_voidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    4a50:	6d a5       	ldd	r22, Y+45	; 0x2d
    4a52:	7e a5       	ldd	r23, Y+46	; 0x2e
    4a54:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a56:	98 a9       	ldd	r25, Y+48	; 0x30
    4a58:	20 e0       	ldi	r18, 0x00	; 0
    4a5a:	30 e0       	ldi	r19, 0x00	; 0
    4a5c:	4a e7       	ldi	r20, 0x7A	; 122
    4a5e:	54 e4       	ldi	r21, 0x44	; 68
    4a60:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__divsf3>
    4a64:	dc 01       	movw	r26, r24
    4a66:	cb 01       	movw	r24, r22
    4a68:	8c a3       	std	Y+36, r24	; 0x24
    4a6a:	9d a3       	std	Y+37, r25	; 0x25
    4a6c:	ae a3       	std	Y+38, r26	; 0x26
    4a6e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a70:	6c a1       	ldd	r22, Y+36	; 0x24
    4a72:	7d a1       	ldd	r23, Y+37	; 0x25
    4a74:	8e a1       	ldd	r24, Y+38	; 0x26
    4a76:	9f a1       	ldd	r25, Y+39	; 0x27
    4a78:	20 e0       	ldi	r18, 0x00	; 0
    4a7a:	30 e0       	ldi	r19, 0x00	; 0
    4a7c:	4a ef       	ldi	r20, 0xFA	; 250
    4a7e:	54 e4       	ldi	r21, 0x44	; 68
    4a80:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4a84:	dc 01       	movw	r26, r24
    4a86:	cb 01       	movw	r24, r22
    4a88:	88 a3       	std	Y+32, r24	; 0x20
    4a8a:	99 a3       	std	Y+33, r25	; 0x21
    4a8c:	aa a3       	std	Y+34, r26	; 0x22
    4a8e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    4a90:	68 a1       	ldd	r22, Y+32	; 0x20
    4a92:	79 a1       	ldd	r23, Y+33	; 0x21
    4a94:	8a a1       	ldd	r24, Y+34	; 0x22
    4a96:	9b a1       	ldd	r25, Y+35	; 0x23
    4a98:	20 e0       	ldi	r18, 0x00	; 0
    4a9a:	30 e0       	ldi	r19, 0x00	; 0
    4a9c:	40 e8       	ldi	r20, 0x80	; 128
    4a9e:	5f e3       	ldi	r21, 0x3F	; 63
    4aa0:	0e 94 89 11 	call	0x2312	; 0x2312 <__ltsf2>
    4aa4:	88 23       	and	r24, r24
    4aa6:	2c f4       	brge	.+10     	; 0x4ab2 <LCD_voidSendCommand+0x106>
		__ticks = 1;
    4aa8:	81 e0       	ldi	r24, 0x01	; 1
    4aaa:	90 e0       	ldi	r25, 0x00	; 0
    4aac:	9f 8f       	std	Y+31, r25	; 0x1f
    4aae:	8e 8f       	std	Y+30, r24	; 0x1e
    4ab0:	3f c0       	rjmp	.+126    	; 0x4b30 <LCD_voidSendCommand+0x184>
	else if (__tmp > 65535)
    4ab2:	68 a1       	ldd	r22, Y+32	; 0x20
    4ab4:	79 a1       	ldd	r23, Y+33	; 0x21
    4ab6:	8a a1       	ldd	r24, Y+34	; 0x22
    4ab8:	9b a1       	ldd	r25, Y+35	; 0x23
    4aba:	20 e0       	ldi	r18, 0x00	; 0
    4abc:	3f ef       	ldi	r19, 0xFF	; 255
    4abe:	4f e7       	ldi	r20, 0x7F	; 127
    4ac0:	57 e4       	ldi	r21, 0x47	; 71
    4ac2:	0e 94 29 11 	call	0x2252	; 0x2252 <__gtsf2>
    4ac6:	18 16       	cp	r1, r24
    4ac8:	4c f5       	brge	.+82     	; 0x4b1c <LCD_voidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aca:	6c a1       	ldd	r22, Y+36	; 0x24
    4acc:	7d a1       	ldd	r23, Y+37	; 0x25
    4ace:	8e a1       	ldd	r24, Y+38	; 0x26
    4ad0:	9f a1       	ldd	r25, Y+39	; 0x27
    4ad2:	20 e0       	ldi	r18, 0x00	; 0
    4ad4:	30 e0       	ldi	r19, 0x00	; 0
    4ad6:	40 e2       	ldi	r20, 0x20	; 32
    4ad8:	51 e4       	ldi	r21, 0x41	; 65
    4ada:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4ade:	dc 01       	movw	r26, r24
    4ae0:	cb 01       	movw	r24, r22
    4ae2:	bc 01       	movw	r22, r24
    4ae4:	cd 01       	movw	r24, r26
    4ae6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4aea:	dc 01       	movw	r26, r24
    4aec:	cb 01       	movw	r24, r22
    4aee:	9f 8f       	std	Y+31, r25	; 0x1f
    4af0:	8e 8f       	std	Y+30, r24	; 0x1e
    4af2:	0f c0       	rjmp	.+30     	; 0x4b12 <LCD_voidSendCommand+0x166>
    4af4:	88 ec       	ldi	r24, 0xC8	; 200
    4af6:	90 e0       	ldi	r25, 0x00	; 0
    4af8:	9d 8f       	std	Y+29, r25	; 0x1d
    4afa:	8c 8f       	std	Y+28, r24	; 0x1c
    4afc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4afe:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4b00:	01 97       	sbiw	r24, 0x01	; 1
    4b02:	f1 f7       	brne	.-4      	; 0x4b00 <LCD_voidSendCommand+0x154>
    4b04:	9d 8f       	std	Y+29, r25	; 0x1d
    4b06:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b08:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4b0a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4b0c:	01 97       	sbiw	r24, 0x01	; 1
    4b0e:	9f 8f       	std	Y+31, r25	; 0x1f
    4b10:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b12:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4b14:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4b16:	00 97       	sbiw	r24, 0x00	; 0
    4b18:	69 f7       	brne	.-38     	; 0x4af4 <LCD_voidSendCommand+0x148>
    4b1a:	24 c0       	rjmp	.+72     	; 0x4b64 <LCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b1c:	68 a1       	ldd	r22, Y+32	; 0x20
    4b1e:	79 a1       	ldd	r23, Y+33	; 0x21
    4b20:	8a a1       	ldd	r24, Y+34	; 0x22
    4b22:	9b a1       	ldd	r25, Y+35	; 0x23
    4b24:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4b28:	dc 01       	movw	r26, r24
    4b2a:	cb 01       	movw	r24, r22
    4b2c:	9f 8f       	std	Y+31, r25	; 0x1f
    4b2e:	8e 8f       	std	Y+30, r24	; 0x1e
    4b30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4b32:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4b34:	9b 8f       	std	Y+27, r25	; 0x1b
    4b36:	8a 8f       	std	Y+26, r24	; 0x1a
    4b38:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4b3a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4b3c:	01 97       	sbiw	r24, 0x01	; 1
    4b3e:	f1 f7       	brne	.-4      	; 0x4b3c <LCD_voidSendCommand+0x190>
    4b40:	9b 8f       	std	Y+27, r25	; 0x1b
    4b42:	8a 8f       	std	Y+26, r24	; 0x1a
    4b44:	0f c0       	rjmp	.+30     	; 0x4b64 <LCD_voidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4b46:	69 a5       	ldd	r22, Y+41	; 0x29
    4b48:	7a a5       	ldd	r23, Y+42	; 0x2a
    4b4a:	8b a5       	ldd	r24, Y+43	; 0x2b
    4b4c:	9c a5       	ldd	r25, Y+44	; 0x2c
    4b4e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4b52:	dc 01       	movw	r26, r24
    4b54:	cb 01       	movw	r24, r22
    4b56:	88 a7       	std	Y+40, r24	; 0x28
    4b58:	88 a5       	ldd	r24, Y+40	; 0x28
    4b5a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4b5c:	89 8d       	ldd	r24, Y+25	; 0x19
    4b5e:	8a 95       	dec	r24
    4b60:	f1 f7       	brne	.-4      	; 0x4b5e <LCD_voidSendCommand+0x1b2>
    4b62:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CTR_PORT,LCD_EN_PIN,DIO_LOW);
    4b64:	80 e0       	ldi	r24, 0x00	; 0
    4b66:	62 e0       	ldi	r22, 0x02	; 2
    4b68:	40 e0       	ldi	r20, 0x00	; 0
    4b6a:	0e 94 86 1a 	call	0x350c	; 0x350c <DIO_voidSetPinValue>
    4b6e:	80 e0       	ldi	r24, 0x00	; 0
    4b70:	90 e0       	ldi	r25, 0x00	; 0
    4b72:	a0 e8       	ldi	r26, 0x80	; 128
    4b74:	bf e3       	ldi	r27, 0x3F	; 63
    4b76:	8d 8b       	std	Y+21, r24	; 0x15
    4b78:	9e 8b       	std	Y+22, r25	; 0x16
    4b7a:	af 8b       	std	Y+23, r26	; 0x17
    4b7c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4b7e:	6d 89       	ldd	r22, Y+21	; 0x15
    4b80:	7e 89       	ldd	r23, Y+22	; 0x16
    4b82:	8f 89       	ldd	r24, Y+23	; 0x17
    4b84:	98 8d       	ldd	r25, Y+24	; 0x18
    4b86:	2b ea       	ldi	r18, 0xAB	; 171
    4b88:	3a ea       	ldi	r19, 0xAA	; 170
    4b8a:	4a e2       	ldi	r20, 0x2A	; 42
    4b8c:	50 e4       	ldi	r21, 0x40	; 64
    4b8e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4b92:	dc 01       	movw	r26, r24
    4b94:	cb 01       	movw	r24, r22
    4b96:	89 8b       	std	Y+17, r24	; 0x11
    4b98:	9a 8b       	std	Y+18, r25	; 0x12
    4b9a:	ab 8b       	std	Y+19, r26	; 0x13
    4b9c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4b9e:	69 89       	ldd	r22, Y+17	; 0x11
    4ba0:	7a 89       	ldd	r23, Y+18	; 0x12
    4ba2:	8b 89       	ldd	r24, Y+19	; 0x13
    4ba4:	9c 89       	ldd	r25, Y+20	; 0x14
    4ba6:	20 e0       	ldi	r18, 0x00	; 0
    4ba8:	30 e0       	ldi	r19, 0x00	; 0
    4baa:	40 e8       	ldi	r20, 0x80	; 128
    4bac:	5f e3       	ldi	r21, 0x3F	; 63
    4bae:	0e 94 89 11 	call	0x2312	; 0x2312 <__ltsf2>
    4bb2:	88 23       	and	r24, r24
    4bb4:	1c f4       	brge	.+6      	; 0x4bbc <LCD_voidSendCommand+0x210>
		__ticks = 1;
    4bb6:	81 e0       	ldi	r24, 0x01	; 1
    4bb8:	88 8b       	std	Y+16, r24	; 0x10
    4bba:	91 c0       	rjmp	.+290    	; 0x4cde <LCD_voidSendCommand+0x332>
	else if (__tmp > 255)
    4bbc:	69 89       	ldd	r22, Y+17	; 0x11
    4bbe:	7a 89       	ldd	r23, Y+18	; 0x12
    4bc0:	8b 89       	ldd	r24, Y+19	; 0x13
    4bc2:	9c 89       	ldd	r25, Y+20	; 0x14
    4bc4:	20 e0       	ldi	r18, 0x00	; 0
    4bc6:	30 e0       	ldi	r19, 0x00	; 0
    4bc8:	4f e7       	ldi	r20, 0x7F	; 127
    4bca:	53 e4       	ldi	r21, 0x43	; 67
    4bcc:	0e 94 29 11 	call	0x2252	; 0x2252 <__gtsf2>
    4bd0:	18 16       	cp	r1, r24
    4bd2:	0c f0       	brlt	.+2      	; 0x4bd6 <LCD_voidSendCommand+0x22a>
    4bd4:	7b c0       	rjmp	.+246    	; 0x4ccc <LCD_voidSendCommand+0x320>
	{
		_delay_ms(__us / 1000.0);
    4bd6:	6d 89       	ldd	r22, Y+21	; 0x15
    4bd8:	7e 89       	ldd	r23, Y+22	; 0x16
    4bda:	8f 89       	ldd	r24, Y+23	; 0x17
    4bdc:	98 8d       	ldd	r25, Y+24	; 0x18
    4bde:	20 e0       	ldi	r18, 0x00	; 0
    4be0:	30 e0       	ldi	r19, 0x00	; 0
    4be2:	4a e7       	ldi	r20, 0x7A	; 122
    4be4:	54 e4       	ldi	r21, 0x44	; 68
    4be6:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__divsf3>
    4bea:	dc 01       	movw	r26, r24
    4bec:	cb 01       	movw	r24, r22
    4bee:	8c 87       	std	Y+12, r24	; 0x0c
    4bf0:	9d 87       	std	Y+13, r25	; 0x0d
    4bf2:	ae 87       	std	Y+14, r26	; 0x0e
    4bf4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bf6:	6c 85       	ldd	r22, Y+12	; 0x0c
    4bf8:	7d 85       	ldd	r23, Y+13	; 0x0d
    4bfa:	8e 85       	ldd	r24, Y+14	; 0x0e
    4bfc:	9f 85       	ldd	r25, Y+15	; 0x0f
    4bfe:	20 e0       	ldi	r18, 0x00	; 0
    4c00:	30 e0       	ldi	r19, 0x00	; 0
    4c02:	4a ef       	ldi	r20, 0xFA	; 250
    4c04:	54 e4       	ldi	r21, 0x44	; 68
    4c06:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4c0a:	dc 01       	movw	r26, r24
    4c0c:	cb 01       	movw	r24, r22
    4c0e:	88 87       	std	Y+8, r24	; 0x08
    4c10:	99 87       	std	Y+9, r25	; 0x09
    4c12:	aa 87       	std	Y+10, r26	; 0x0a
    4c14:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4c16:	68 85       	ldd	r22, Y+8	; 0x08
    4c18:	79 85       	ldd	r23, Y+9	; 0x09
    4c1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c1c:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c1e:	20 e0       	ldi	r18, 0x00	; 0
    4c20:	30 e0       	ldi	r19, 0x00	; 0
    4c22:	40 e8       	ldi	r20, 0x80	; 128
    4c24:	5f e3       	ldi	r21, 0x3F	; 63
    4c26:	0e 94 89 11 	call	0x2312	; 0x2312 <__ltsf2>
    4c2a:	88 23       	and	r24, r24
    4c2c:	2c f4       	brge	.+10     	; 0x4c38 <LCD_voidSendCommand+0x28c>
		__ticks = 1;
    4c2e:	81 e0       	ldi	r24, 0x01	; 1
    4c30:	90 e0       	ldi	r25, 0x00	; 0
    4c32:	9f 83       	std	Y+7, r25	; 0x07
    4c34:	8e 83       	std	Y+6, r24	; 0x06
    4c36:	3f c0       	rjmp	.+126    	; 0x4cb6 <LCD_voidSendCommand+0x30a>
	else if (__tmp > 65535)
    4c38:	68 85       	ldd	r22, Y+8	; 0x08
    4c3a:	79 85       	ldd	r23, Y+9	; 0x09
    4c3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c40:	20 e0       	ldi	r18, 0x00	; 0
    4c42:	3f ef       	ldi	r19, 0xFF	; 255
    4c44:	4f e7       	ldi	r20, 0x7F	; 127
    4c46:	57 e4       	ldi	r21, 0x47	; 71
    4c48:	0e 94 29 11 	call	0x2252	; 0x2252 <__gtsf2>
    4c4c:	18 16       	cp	r1, r24
    4c4e:	4c f5       	brge	.+82     	; 0x4ca2 <LCD_voidSendCommand+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c50:	6c 85       	ldd	r22, Y+12	; 0x0c
    4c52:	7d 85       	ldd	r23, Y+13	; 0x0d
    4c54:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c56:	9f 85       	ldd	r25, Y+15	; 0x0f
    4c58:	20 e0       	ldi	r18, 0x00	; 0
    4c5a:	30 e0       	ldi	r19, 0x00	; 0
    4c5c:	40 e2       	ldi	r20, 0x20	; 32
    4c5e:	51 e4       	ldi	r21, 0x41	; 65
    4c60:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4c64:	dc 01       	movw	r26, r24
    4c66:	cb 01       	movw	r24, r22
    4c68:	bc 01       	movw	r22, r24
    4c6a:	cd 01       	movw	r24, r26
    4c6c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4c70:	dc 01       	movw	r26, r24
    4c72:	cb 01       	movw	r24, r22
    4c74:	9f 83       	std	Y+7, r25	; 0x07
    4c76:	8e 83       	std	Y+6, r24	; 0x06
    4c78:	0f c0       	rjmp	.+30     	; 0x4c98 <LCD_voidSendCommand+0x2ec>
    4c7a:	88 ec       	ldi	r24, 0xC8	; 200
    4c7c:	90 e0       	ldi	r25, 0x00	; 0
    4c7e:	9d 83       	std	Y+5, r25	; 0x05
    4c80:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4c82:	8c 81       	ldd	r24, Y+4	; 0x04
    4c84:	9d 81       	ldd	r25, Y+5	; 0x05
    4c86:	01 97       	sbiw	r24, 0x01	; 1
    4c88:	f1 f7       	brne	.-4      	; 0x4c86 <LCD_voidSendCommand+0x2da>
    4c8a:	9d 83       	std	Y+5, r25	; 0x05
    4c8c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c8e:	8e 81       	ldd	r24, Y+6	; 0x06
    4c90:	9f 81       	ldd	r25, Y+7	; 0x07
    4c92:	01 97       	sbiw	r24, 0x01	; 1
    4c94:	9f 83       	std	Y+7, r25	; 0x07
    4c96:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c98:	8e 81       	ldd	r24, Y+6	; 0x06
    4c9a:	9f 81       	ldd	r25, Y+7	; 0x07
    4c9c:	00 97       	sbiw	r24, 0x00	; 0
    4c9e:	69 f7       	brne	.-38     	; 0x4c7a <LCD_voidSendCommand+0x2ce>
    4ca0:	24 c0       	rjmp	.+72     	; 0x4cea <LCD_voidSendCommand+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ca2:	68 85       	ldd	r22, Y+8	; 0x08
    4ca4:	79 85       	ldd	r23, Y+9	; 0x09
    4ca6:	8a 85       	ldd	r24, Y+10	; 0x0a
    4ca8:	9b 85       	ldd	r25, Y+11	; 0x0b
    4caa:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4cae:	dc 01       	movw	r26, r24
    4cb0:	cb 01       	movw	r24, r22
    4cb2:	9f 83       	std	Y+7, r25	; 0x07
    4cb4:	8e 83       	std	Y+6, r24	; 0x06
    4cb6:	8e 81       	ldd	r24, Y+6	; 0x06
    4cb8:	9f 81       	ldd	r25, Y+7	; 0x07
    4cba:	9b 83       	std	Y+3, r25	; 0x03
    4cbc:	8a 83       	std	Y+2, r24	; 0x02
    4cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    4cc0:	9b 81       	ldd	r25, Y+3	; 0x03
    4cc2:	01 97       	sbiw	r24, 0x01	; 1
    4cc4:	f1 f7       	brne	.-4      	; 0x4cc2 <LCD_voidSendCommand+0x316>
    4cc6:	9b 83       	std	Y+3, r25	; 0x03
    4cc8:	8a 83       	std	Y+2, r24	; 0x02
    4cca:	0f c0       	rjmp	.+30     	; 0x4cea <LCD_voidSendCommand+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4ccc:	69 89       	ldd	r22, Y+17	; 0x11
    4cce:	7a 89       	ldd	r23, Y+18	; 0x12
    4cd0:	8b 89       	ldd	r24, Y+19	; 0x13
    4cd2:	9c 89       	ldd	r25, Y+20	; 0x14
    4cd4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4cd8:	dc 01       	movw	r26, r24
    4cda:	cb 01       	movw	r24, r22
    4cdc:	88 8b       	std	Y+16, r24	; 0x10
    4cde:	88 89       	ldd	r24, Y+16	; 0x10
    4ce0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4ce2:	89 81       	ldd	r24, Y+1	; 0x01
    4ce4:	8a 95       	dec	r24
    4ce6:	f1 f7       	brne	.-4      	; 0x4ce4 <LCD_voidSendCommand+0x338>
    4ce8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);

}
    4cea:	e1 96       	adiw	r28, 0x31	; 49
    4cec:	0f b6       	in	r0, 0x3f	; 63
    4cee:	f8 94       	cli
    4cf0:	de bf       	out	0x3e, r29	; 62
    4cf2:	0f be       	out	0x3f, r0	; 63
    4cf4:	cd bf       	out	0x3d, r28	; 61
    4cf6:	cf 91       	pop	r28
    4cf8:	df 91       	pop	r29
    4cfa:	08 95       	ret

00004cfc <LCD_voidSendData>:
void LCD_voidSendData(u8 copy_u8data)
{
    4cfc:	df 93       	push	r29
    4cfe:	cf 93       	push	r28
    4d00:	cd b7       	in	r28, 0x3d	; 61
    4d02:	de b7       	in	r29, 0x3e	; 62
    4d04:	e1 97       	sbiw	r28, 0x31	; 49
    4d06:	0f b6       	in	r0, 0x3f	; 63
    4d08:	f8 94       	cli
    4d0a:	de bf       	out	0x3e, r29	; 62
    4d0c:	0f be       	out	0x3f, r0	; 63
    4d0e:	cd bf       	out	0x3d, r28	; 61
    4d10:	89 ab       	std	Y+49, r24	; 0x31
	DIO_voidSetPinValue(LCD_CTR_PORT,LCD_RS_PIN,DIO_HIGH);
    4d12:	80 e0       	ldi	r24, 0x00	; 0
    4d14:	60 e0       	ldi	r22, 0x00	; 0
    4d16:	41 e0       	ldi	r20, 0x01	; 1
    4d18:	0e 94 86 1a 	call	0x350c	; 0x350c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CTR_PORT,LCD_RW_PIN,DIO_LOW);
    4d1c:	80 e0       	ldi	r24, 0x00	; 0
    4d1e:	61 e0       	ldi	r22, 0x01	; 1
    4d20:	40 e0       	ldi	r20, 0x00	; 0
    4d22:	0e 94 86 1a 	call	0x350c	; 0x350c <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DATA_PORT, copy_u8data);
    4d26:	82 e0       	ldi	r24, 0x02	; 2
    4d28:	69 a9       	ldd	r22, Y+49	; 0x31
    4d2a:	0e 94 8e 1c 	call	0x391c	; 0x391c <DIO_voidSetPortValue>


	DIO_voidSetPinValue(LCD_CTR_PORT,LCD_EN_PIN,DIO_HIGH);
    4d2e:	80 e0       	ldi	r24, 0x00	; 0
    4d30:	62 e0       	ldi	r22, 0x02	; 2
    4d32:	41 e0       	ldi	r20, 0x01	; 1
    4d34:	0e 94 86 1a 	call	0x350c	; 0x350c <DIO_voidSetPinValue>
    4d38:	80 e0       	ldi	r24, 0x00	; 0
    4d3a:	90 e0       	ldi	r25, 0x00	; 0
    4d3c:	a0 e8       	ldi	r26, 0x80	; 128
    4d3e:	bf e3       	ldi	r27, 0x3F	; 63
    4d40:	8d a7       	std	Y+45, r24	; 0x2d
    4d42:	9e a7       	std	Y+46, r25	; 0x2e
    4d44:	af a7       	std	Y+47, r26	; 0x2f
    4d46:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4d48:	6d a5       	ldd	r22, Y+45	; 0x2d
    4d4a:	7e a5       	ldd	r23, Y+46	; 0x2e
    4d4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d4e:	98 a9       	ldd	r25, Y+48	; 0x30
    4d50:	2b ea       	ldi	r18, 0xAB	; 171
    4d52:	3a ea       	ldi	r19, 0xAA	; 170
    4d54:	4a e2       	ldi	r20, 0x2A	; 42
    4d56:	50 e4       	ldi	r21, 0x40	; 64
    4d58:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4d5c:	dc 01       	movw	r26, r24
    4d5e:	cb 01       	movw	r24, r22
    4d60:	89 a7       	std	Y+41, r24	; 0x29
    4d62:	9a a7       	std	Y+42, r25	; 0x2a
    4d64:	ab a7       	std	Y+43, r26	; 0x2b
    4d66:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    4d68:	69 a5       	ldd	r22, Y+41	; 0x29
    4d6a:	7a a5       	ldd	r23, Y+42	; 0x2a
    4d6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    4d6e:	9c a5       	ldd	r25, Y+44	; 0x2c
    4d70:	20 e0       	ldi	r18, 0x00	; 0
    4d72:	30 e0       	ldi	r19, 0x00	; 0
    4d74:	40 e8       	ldi	r20, 0x80	; 128
    4d76:	5f e3       	ldi	r21, 0x3F	; 63
    4d78:	0e 94 89 11 	call	0x2312	; 0x2312 <__ltsf2>
    4d7c:	88 23       	and	r24, r24
    4d7e:	1c f4       	brge	.+6      	; 0x4d86 <LCD_voidSendData+0x8a>
		__ticks = 1;
    4d80:	81 e0       	ldi	r24, 0x01	; 1
    4d82:	88 a7       	std	Y+40, r24	; 0x28
    4d84:	91 c0       	rjmp	.+290    	; 0x4ea8 <LCD_voidSendData+0x1ac>
	else if (__tmp > 255)
    4d86:	69 a5       	ldd	r22, Y+41	; 0x29
    4d88:	7a a5       	ldd	r23, Y+42	; 0x2a
    4d8a:	8b a5       	ldd	r24, Y+43	; 0x2b
    4d8c:	9c a5       	ldd	r25, Y+44	; 0x2c
    4d8e:	20 e0       	ldi	r18, 0x00	; 0
    4d90:	30 e0       	ldi	r19, 0x00	; 0
    4d92:	4f e7       	ldi	r20, 0x7F	; 127
    4d94:	53 e4       	ldi	r21, 0x43	; 67
    4d96:	0e 94 29 11 	call	0x2252	; 0x2252 <__gtsf2>
    4d9a:	18 16       	cp	r1, r24
    4d9c:	0c f0       	brlt	.+2      	; 0x4da0 <LCD_voidSendData+0xa4>
    4d9e:	7b c0       	rjmp	.+246    	; 0x4e96 <LCD_voidSendData+0x19a>
	{
		_delay_ms(__us / 1000.0);
    4da0:	6d a5       	ldd	r22, Y+45	; 0x2d
    4da2:	7e a5       	ldd	r23, Y+46	; 0x2e
    4da4:	8f a5       	ldd	r24, Y+47	; 0x2f
    4da6:	98 a9       	ldd	r25, Y+48	; 0x30
    4da8:	20 e0       	ldi	r18, 0x00	; 0
    4daa:	30 e0       	ldi	r19, 0x00	; 0
    4dac:	4a e7       	ldi	r20, 0x7A	; 122
    4dae:	54 e4       	ldi	r21, 0x44	; 68
    4db0:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__divsf3>
    4db4:	dc 01       	movw	r26, r24
    4db6:	cb 01       	movw	r24, r22
    4db8:	8c a3       	std	Y+36, r24	; 0x24
    4dba:	9d a3       	std	Y+37, r25	; 0x25
    4dbc:	ae a3       	std	Y+38, r26	; 0x26
    4dbe:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dc0:	6c a1       	ldd	r22, Y+36	; 0x24
    4dc2:	7d a1       	ldd	r23, Y+37	; 0x25
    4dc4:	8e a1       	ldd	r24, Y+38	; 0x26
    4dc6:	9f a1       	ldd	r25, Y+39	; 0x27
    4dc8:	20 e0       	ldi	r18, 0x00	; 0
    4dca:	30 e0       	ldi	r19, 0x00	; 0
    4dcc:	4a ef       	ldi	r20, 0xFA	; 250
    4dce:	54 e4       	ldi	r21, 0x44	; 68
    4dd0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4dd4:	dc 01       	movw	r26, r24
    4dd6:	cb 01       	movw	r24, r22
    4dd8:	88 a3       	std	Y+32, r24	; 0x20
    4dda:	99 a3       	std	Y+33, r25	; 0x21
    4ddc:	aa a3       	std	Y+34, r26	; 0x22
    4dde:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    4de0:	68 a1       	ldd	r22, Y+32	; 0x20
    4de2:	79 a1       	ldd	r23, Y+33	; 0x21
    4de4:	8a a1       	ldd	r24, Y+34	; 0x22
    4de6:	9b a1       	ldd	r25, Y+35	; 0x23
    4de8:	20 e0       	ldi	r18, 0x00	; 0
    4dea:	30 e0       	ldi	r19, 0x00	; 0
    4dec:	40 e8       	ldi	r20, 0x80	; 128
    4dee:	5f e3       	ldi	r21, 0x3F	; 63
    4df0:	0e 94 89 11 	call	0x2312	; 0x2312 <__ltsf2>
    4df4:	88 23       	and	r24, r24
    4df6:	2c f4       	brge	.+10     	; 0x4e02 <LCD_voidSendData+0x106>
		__ticks = 1;
    4df8:	81 e0       	ldi	r24, 0x01	; 1
    4dfa:	90 e0       	ldi	r25, 0x00	; 0
    4dfc:	9f 8f       	std	Y+31, r25	; 0x1f
    4dfe:	8e 8f       	std	Y+30, r24	; 0x1e
    4e00:	3f c0       	rjmp	.+126    	; 0x4e80 <LCD_voidSendData+0x184>
	else if (__tmp > 65535)
    4e02:	68 a1       	ldd	r22, Y+32	; 0x20
    4e04:	79 a1       	ldd	r23, Y+33	; 0x21
    4e06:	8a a1       	ldd	r24, Y+34	; 0x22
    4e08:	9b a1       	ldd	r25, Y+35	; 0x23
    4e0a:	20 e0       	ldi	r18, 0x00	; 0
    4e0c:	3f ef       	ldi	r19, 0xFF	; 255
    4e0e:	4f e7       	ldi	r20, 0x7F	; 127
    4e10:	57 e4       	ldi	r21, 0x47	; 71
    4e12:	0e 94 29 11 	call	0x2252	; 0x2252 <__gtsf2>
    4e16:	18 16       	cp	r1, r24
    4e18:	4c f5       	brge	.+82     	; 0x4e6c <LCD_voidSendData+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e1a:	6c a1       	ldd	r22, Y+36	; 0x24
    4e1c:	7d a1       	ldd	r23, Y+37	; 0x25
    4e1e:	8e a1       	ldd	r24, Y+38	; 0x26
    4e20:	9f a1       	ldd	r25, Y+39	; 0x27
    4e22:	20 e0       	ldi	r18, 0x00	; 0
    4e24:	30 e0       	ldi	r19, 0x00	; 0
    4e26:	40 e2       	ldi	r20, 0x20	; 32
    4e28:	51 e4       	ldi	r21, 0x41	; 65
    4e2a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4e2e:	dc 01       	movw	r26, r24
    4e30:	cb 01       	movw	r24, r22
    4e32:	bc 01       	movw	r22, r24
    4e34:	cd 01       	movw	r24, r26
    4e36:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4e3a:	dc 01       	movw	r26, r24
    4e3c:	cb 01       	movw	r24, r22
    4e3e:	9f 8f       	std	Y+31, r25	; 0x1f
    4e40:	8e 8f       	std	Y+30, r24	; 0x1e
    4e42:	0f c0       	rjmp	.+30     	; 0x4e62 <LCD_voidSendData+0x166>
    4e44:	88 ec       	ldi	r24, 0xC8	; 200
    4e46:	90 e0       	ldi	r25, 0x00	; 0
    4e48:	9d 8f       	std	Y+29, r25	; 0x1d
    4e4a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4e4c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4e4e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4e50:	01 97       	sbiw	r24, 0x01	; 1
    4e52:	f1 f7       	brne	.-4      	; 0x4e50 <LCD_voidSendData+0x154>
    4e54:	9d 8f       	std	Y+29, r25	; 0x1d
    4e56:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e58:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4e5a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4e5c:	01 97       	sbiw	r24, 0x01	; 1
    4e5e:	9f 8f       	std	Y+31, r25	; 0x1f
    4e60:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e62:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4e64:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4e66:	00 97       	sbiw	r24, 0x00	; 0
    4e68:	69 f7       	brne	.-38     	; 0x4e44 <LCD_voidSendData+0x148>
    4e6a:	24 c0       	rjmp	.+72     	; 0x4eb4 <LCD_voidSendData+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e6c:	68 a1       	ldd	r22, Y+32	; 0x20
    4e6e:	79 a1       	ldd	r23, Y+33	; 0x21
    4e70:	8a a1       	ldd	r24, Y+34	; 0x22
    4e72:	9b a1       	ldd	r25, Y+35	; 0x23
    4e74:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4e78:	dc 01       	movw	r26, r24
    4e7a:	cb 01       	movw	r24, r22
    4e7c:	9f 8f       	std	Y+31, r25	; 0x1f
    4e7e:	8e 8f       	std	Y+30, r24	; 0x1e
    4e80:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4e82:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4e84:	9b 8f       	std	Y+27, r25	; 0x1b
    4e86:	8a 8f       	std	Y+26, r24	; 0x1a
    4e88:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4e8a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4e8c:	01 97       	sbiw	r24, 0x01	; 1
    4e8e:	f1 f7       	brne	.-4      	; 0x4e8c <LCD_voidSendData+0x190>
    4e90:	9b 8f       	std	Y+27, r25	; 0x1b
    4e92:	8a 8f       	std	Y+26, r24	; 0x1a
    4e94:	0f c0       	rjmp	.+30     	; 0x4eb4 <LCD_voidSendData+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4e96:	69 a5       	ldd	r22, Y+41	; 0x29
    4e98:	7a a5       	ldd	r23, Y+42	; 0x2a
    4e9a:	8b a5       	ldd	r24, Y+43	; 0x2b
    4e9c:	9c a5       	ldd	r25, Y+44	; 0x2c
    4e9e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4ea2:	dc 01       	movw	r26, r24
    4ea4:	cb 01       	movw	r24, r22
    4ea6:	88 a7       	std	Y+40, r24	; 0x28
    4ea8:	88 a5       	ldd	r24, Y+40	; 0x28
    4eaa:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4eac:	89 8d       	ldd	r24, Y+25	; 0x19
    4eae:	8a 95       	dec	r24
    4eb0:	f1 f7       	brne	.-4      	; 0x4eae <LCD_voidSendData+0x1b2>
    4eb2:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CTR_PORT,LCD_EN_PIN,DIO_LOW);
    4eb4:	80 e0       	ldi	r24, 0x00	; 0
    4eb6:	62 e0       	ldi	r22, 0x02	; 2
    4eb8:	40 e0       	ldi	r20, 0x00	; 0
    4eba:	0e 94 86 1a 	call	0x350c	; 0x350c <DIO_voidSetPinValue>
    4ebe:	80 e0       	ldi	r24, 0x00	; 0
    4ec0:	90 e0       	ldi	r25, 0x00	; 0
    4ec2:	a0 e8       	ldi	r26, 0x80	; 128
    4ec4:	bf e3       	ldi	r27, 0x3F	; 63
    4ec6:	8d 8b       	std	Y+21, r24	; 0x15
    4ec8:	9e 8b       	std	Y+22, r25	; 0x16
    4eca:	af 8b       	std	Y+23, r26	; 0x17
    4ecc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4ece:	6d 89       	ldd	r22, Y+21	; 0x15
    4ed0:	7e 89       	ldd	r23, Y+22	; 0x16
    4ed2:	8f 89       	ldd	r24, Y+23	; 0x17
    4ed4:	98 8d       	ldd	r25, Y+24	; 0x18
    4ed6:	2b ea       	ldi	r18, 0xAB	; 171
    4ed8:	3a ea       	ldi	r19, 0xAA	; 170
    4eda:	4a e2       	ldi	r20, 0x2A	; 42
    4edc:	50 e4       	ldi	r21, 0x40	; 64
    4ede:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4ee2:	dc 01       	movw	r26, r24
    4ee4:	cb 01       	movw	r24, r22
    4ee6:	89 8b       	std	Y+17, r24	; 0x11
    4ee8:	9a 8b       	std	Y+18, r25	; 0x12
    4eea:	ab 8b       	std	Y+19, r26	; 0x13
    4eec:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4eee:	69 89       	ldd	r22, Y+17	; 0x11
    4ef0:	7a 89       	ldd	r23, Y+18	; 0x12
    4ef2:	8b 89       	ldd	r24, Y+19	; 0x13
    4ef4:	9c 89       	ldd	r25, Y+20	; 0x14
    4ef6:	20 e0       	ldi	r18, 0x00	; 0
    4ef8:	30 e0       	ldi	r19, 0x00	; 0
    4efa:	40 e8       	ldi	r20, 0x80	; 128
    4efc:	5f e3       	ldi	r21, 0x3F	; 63
    4efe:	0e 94 89 11 	call	0x2312	; 0x2312 <__ltsf2>
    4f02:	88 23       	and	r24, r24
    4f04:	1c f4       	brge	.+6      	; 0x4f0c <LCD_voidSendData+0x210>
		__ticks = 1;
    4f06:	81 e0       	ldi	r24, 0x01	; 1
    4f08:	88 8b       	std	Y+16, r24	; 0x10
    4f0a:	91 c0       	rjmp	.+290    	; 0x502e <LCD_voidSendData+0x332>
	else if (__tmp > 255)
    4f0c:	69 89       	ldd	r22, Y+17	; 0x11
    4f0e:	7a 89       	ldd	r23, Y+18	; 0x12
    4f10:	8b 89       	ldd	r24, Y+19	; 0x13
    4f12:	9c 89       	ldd	r25, Y+20	; 0x14
    4f14:	20 e0       	ldi	r18, 0x00	; 0
    4f16:	30 e0       	ldi	r19, 0x00	; 0
    4f18:	4f e7       	ldi	r20, 0x7F	; 127
    4f1a:	53 e4       	ldi	r21, 0x43	; 67
    4f1c:	0e 94 29 11 	call	0x2252	; 0x2252 <__gtsf2>
    4f20:	18 16       	cp	r1, r24
    4f22:	0c f0       	brlt	.+2      	; 0x4f26 <LCD_voidSendData+0x22a>
    4f24:	7b c0       	rjmp	.+246    	; 0x501c <LCD_voidSendData+0x320>
	{
		_delay_ms(__us / 1000.0);
    4f26:	6d 89       	ldd	r22, Y+21	; 0x15
    4f28:	7e 89       	ldd	r23, Y+22	; 0x16
    4f2a:	8f 89       	ldd	r24, Y+23	; 0x17
    4f2c:	98 8d       	ldd	r25, Y+24	; 0x18
    4f2e:	20 e0       	ldi	r18, 0x00	; 0
    4f30:	30 e0       	ldi	r19, 0x00	; 0
    4f32:	4a e7       	ldi	r20, 0x7A	; 122
    4f34:	54 e4       	ldi	r21, 0x44	; 68
    4f36:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__divsf3>
    4f3a:	dc 01       	movw	r26, r24
    4f3c:	cb 01       	movw	r24, r22
    4f3e:	8c 87       	std	Y+12, r24	; 0x0c
    4f40:	9d 87       	std	Y+13, r25	; 0x0d
    4f42:	ae 87       	std	Y+14, r26	; 0x0e
    4f44:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f46:	6c 85       	ldd	r22, Y+12	; 0x0c
    4f48:	7d 85       	ldd	r23, Y+13	; 0x0d
    4f4a:	8e 85       	ldd	r24, Y+14	; 0x0e
    4f4c:	9f 85       	ldd	r25, Y+15	; 0x0f
    4f4e:	20 e0       	ldi	r18, 0x00	; 0
    4f50:	30 e0       	ldi	r19, 0x00	; 0
    4f52:	4a ef       	ldi	r20, 0xFA	; 250
    4f54:	54 e4       	ldi	r21, 0x44	; 68
    4f56:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4f5a:	dc 01       	movw	r26, r24
    4f5c:	cb 01       	movw	r24, r22
    4f5e:	88 87       	std	Y+8, r24	; 0x08
    4f60:	99 87       	std	Y+9, r25	; 0x09
    4f62:	aa 87       	std	Y+10, r26	; 0x0a
    4f64:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4f66:	68 85       	ldd	r22, Y+8	; 0x08
    4f68:	79 85       	ldd	r23, Y+9	; 0x09
    4f6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    4f6e:	20 e0       	ldi	r18, 0x00	; 0
    4f70:	30 e0       	ldi	r19, 0x00	; 0
    4f72:	40 e8       	ldi	r20, 0x80	; 128
    4f74:	5f e3       	ldi	r21, 0x3F	; 63
    4f76:	0e 94 89 11 	call	0x2312	; 0x2312 <__ltsf2>
    4f7a:	88 23       	and	r24, r24
    4f7c:	2c f4       	brge	.+10     	; 0x4f88 <LCD_voidSendData+0x28c>
		__ticks = 1;
    4f7e:	81 e0       	ldi	r24, 0x01	; 1
    4f80:	90 e0       	ldi	r25, 0x00	; 0
    4f82:	9f 83       	std	Y+7, r25	; 0x07
    4f84:	8e 83       	std	Y+6, r24	; 0x06
    4f86:	3f c0       	rjmp	.+126    	; 0x5006 <LCD_voidSendData+0x30a>
	else if (__tmp > 65535)
    4f88:	68 85       	ldd	r22, Y+8	; 0x08
    4f8a:	79 85       	ldd	r23, Y+9	; 0x09
    4f8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4f90:	20 e0       	ldi	r18, 0x00	; 0
    4f92:	3f ef       	ldi	r19, 0xFF	; 255
    4f94:	4f e7       	ldi	r20, 0x7F	; 127
    4f96:	57 e4       	ldi	r21, 0x47	; 71
    4f98:	0e 94 29 11 	call	0x2252	; 0x2252 <__gtsf2>
    4f9c:	18 16       	cp	r1, r24
    4f9e:	4c f5       	brge	.+82     	; 0x4ff2 <LCD_voidSendData+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fa0:	6c 85       	ldd	r22, Y+12	; 0x0c
    4fa2:	7d 85       	ldd	r23, Y+13	; 0x0d
    4fa4:	8e 85       	ldd	r24, Y+14	; 0x0e
    4fa6:	9f 85       	ldd	r25, Y+15	; 0x0f
    4fa8:	20 e0       	ldi	r18, 0x00	; 0
    4faa:	30 e0       	ldi	r19, 0x00	; 0
    4fac:	40 e2       	ldi	r20, 0x20	; 32
    4fae:	51 e4       	ldi	r21, 0x41	; 65
    4fb0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4fb4:	dc 01       	movw	r26, r24
    4fb6:	cb 01       	movw	r24, r22
    4fb8:	bc 01       	movw	r22, r24
    4fba:	cd 01       	movw	r24, r26
    4fbc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4fc0:	dc 01       	movw	r26, r24
    4fc2:	cb 01       	movw	r24, r22
    4fc4:	9f 83       	std	Y+7, r25	; 0x07
    4fc6:	8e 83       	std	Y+6, r24	; 0x06
    4fc8:	0f c0       	rjmp	.+30     	; 0x4fe8 <LCD_voidSendData+0x2ec>
    4fca:	88 ec       	ldi	r24, 0xC8	; 200
    4fcc:	90 e0       	ldi	r25, 0x00	; 0
    4fce:	9d 83       	std	Y+5, r25	; 0x05
    4fd0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4fd2:	8c 81       	ldd	r24, Y+4	; 0x04
    4fd4:	9d 81       	ldd	r25, Y+5	; 0x05
    4fd6:	01 97       	sbiw	r24, 0x01	; 1
    4fd8:	f1 f7       	brne	.-4      	; 0x4fd6 <LCD_voidSendData+0x2da>
    4fda:	9d 83       	std	Y+5, r25	; 0x05
    4fdc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fde:	8e 81       	ldd	r24, Y+6	; 0x06
    4fe0:	9f 81       	ldd	r25, Y+7	; 0x07
    4fe2:	01 97       	sbiw	r24, 0x01	; 1
    4fe4:	9f 83       	std	Y+7, r25	; 0x07
    4fe6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fe8:	8e 81       	ldd	r24, Y+6	; 0x06
    4fea:	9f 81       	ldd	r25, Y+7	; 0x07
    4fec:	00 97       	sbiw	r24, 0x00	; 0
    4fee:	69 f7       	brne	.-38     	; 0x4fca <LCD_voidSendData+0x2ce>
    4ff0:	24 c0       	rjmp	.+72     	; 0x503a <LCD_voidSendData+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ff2:	68 85       	ldd	r22, Y+8	; 0x08
    4ff4:	79 85       	ldd	r23, Y+9	; 0x09
    4ff6:	8a 85       	ldd	r24, Y+10	; 0x0a
    4ff8:	9b 85       	ldd	r25, Y+11	; 0x0b
    4ffa:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4ffe:	dc 01       	movw	r26, r24
    5000:	cb 01       	movw	r24, r22
    5002:	9f 83       	std	Y+7, r25	; 0x07
    5004:	8e 83       	std	Y+6, r24	; 0x06
    5006:	8e 81       	ldd	r24, Y+6	; 0x06
    5008:	9f 81       	ldd	r25, Y+7	; 0x07
    500a:	9b 83       	std	Y+3, r25	; 0x03
    500c:	8a 83       	std	Y+2, r24	; 0x02
    500e:	8a 81       	ldd	r24, Y+2	; 0x02
    5010:	9b 81       	ldd	r25, Y+3	; 0x03
    5012:	01 97       	sbiw	r24, 0x01	; 1
    5014:	f1 f7       	brne	.-4      	; 0x5012 <LCD_voidSendData+0x316>
    5016:	9b 83       	std	Y+3, r25	; 0x03
    5018:	8a 83       	std	Y+2, r24	; 0x02
    501a:	0f c0       	rjmp	.+30     	; 0x503a <LCD_voidSendData+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    501c:	69 89       	ldd	r22, Y+17	; 0x11
    501e:	7a 89       	ldd	r23, Y+18	; 0x12
    5020:	8b 89       	ldd	r24, Y+19	; 0x13
    5022:	9c 89       	ldd	r25, Y+20	; 0x14
    5024:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5028:	dc 01       	movw	r26, r24
    502a:	cb 01       	movw	r24, r22
    502c:	88 8b       	std	Y+16, r24	; 0x10
    502e:	88 89       	ldd	r24, Y+16	; 0x10
    5030:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5032:	89 81       	ldd	r24, Y+1	; 0x01
    5034:	8a 95       	dec	r24
    5036:	f1 f7       	brne	.-4      	; 0x5034 <LCD_voidSendData+0x338>
    5038:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    503a:	e1 96       	adiw	r28, 0x31	; 49
    503c:	0f b6       	in	r0, 0x3f	; 63
    503e:	f8 94       	cli
    5040:	de bf       	out	0x3e, r29	; 62
    5042:	0f be       	out	0x3f, r0	; 63
    5044:	cd bf       	out	0x3d, r28	; 61
    5046:	cf 91       	pop	r28
    5048:	df 91       	pop	r29
    504a:	08 95       	ret

0000504c <LCD_voidDisplay_CLR>:
void LCD_voidDisplay_CLR(void)
{
    504c:	df 93       	push	r29
    504e:	cf 93       	push	r28
    5050:	cd b7       	in	r28, 0x3d	; 61
    5052:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCommand(0x01);
    5054:	81 e0       	ldi	r24, 0x01	; 1
    5056:	0e 94 d6 24 	call	0x49ac	; 0x49ac <LCD_voidSendCommand>
}
    505a:	cf 91       	pop	r28
    505c:	df 91       	pop	r29
    505e:	08 95       	ret

00005060 <CheckAli_sPassWord_ErrorState>:
u8 Chcek_Counter =0 ;
u8 Correct_PASS_Flag = 0 ;


ERROR_STATE_t CheckAli_sPassWord_ErrorState(u8 *ptru8_to_password)
{
    5060:	df 93       	push	r29
    5062:	cf 93       	push	r28
    5064:	cd b7       	in	r28, 0x3d	; 61
    5066:	de b7       	in	r29, 0x3e	; 62
    5068:	60 97       	sbiw	r28, 0x10	; 16
    506a:	0f b6       	in	r0, 0x3f	; 63
    506c:	f8 94       	cli
    506e:	de bf       	out	0x3e, r29	; 62
    5070:	0f be       	out	0x3f, r0	; 63
    5072:	cd bf       	out	0x3d, r28	; 61
    5074:	98 8b       	std	Y+16, r25	; 0x10
    5076:	8f 87       	std	Y+15, r24	; 0x0f
	Chcek_Counter = 0 ;
    5078:	10 92 a2 02 	sts	0x02A2, r1
	Correct_PASS_Flag = 0 ;
    507c:	10 92 a3 02 	sts	0x02A3, r1
    5080:	1e c0       	rjmp	.+60     	; 0x50be <CheckAli_sPassWord_ErrorState+0x5e>
	while(Chcek_Counter <=3)
	{
		if(ALISPASS[Chcek_Counter] == ptru8_to_password[Chcek_Counter ])
    5082:	80 91 a2 02 	lds	r24, 0x02A2
    5086:	88 2f       	mov	r24, r24
    5088:	90 e0       	ldi	r25, 0x00	; 0
    508a:	fc 01       	movw	r30, r24
    508c:	eb 58       	subi	r30, 0x8B	; 139
    508e:	fd 4f       	sbci	r31, 0xFD	; 253
    5090:	40 81       	ld	r20, Z
    5092:	80 91 a2 02 	lds	r24, 0x02A2
    5096:	28 2f       	mov	r18, r24
    5098:	30 e0       	ldi	r19, 0x00	; 0
    509a:	8f 85       	ldd	r24, Y+15	; 0x0f
    509c:	98 89       	ldd	r25, Y+16	; 0x10
    509e:	fc 01       	movw	r30, r24
    50a0:	e2 0f       	add	r30, r18
    50a2:	f3 1f       	adc	r31, r19
    50a4:	80 81       	ld	r24, Z
    50a6:	48 17       	cp	r20, r24
    50a8:	29 f4       	brne	.+10     	; 0x50b4 <CheckAli_sPassWord_ErrorState+0x54>
		{
			Correct_PASS_Flag++;
    50aa:	80 91 a3 02 	lds	r24, 0x02A3
    50ae:	8f 5f       	subi	r24, 0xFF	; 255
    50b0:	80 93 a3 02 	sts	0x02A3, r24
		}
		Chcek_Counter++;
    50b4:	80 91 a2 02 	lds	r24, 0x02A2
    50b8:	8f 5f       	subi	r24, 0xFF	; 255
    50ba:	80 93 a2 02 	sts	0x02A2, r24

ERROR_STATE_t CheckAli_sPassWord_ErrorState(u8 *ptru8_to_password)
{
	Chcek_Counter = 0 ;
	Correct_PASS_Flag = 0 ;
	while(Chcek_Counter <=3)
    50be:	80 91 a2 02 	lds	r24, 0x02A2
    50c2:	84 30       	cpi	r24, 0x04	; 4
    50c4:	f0 f2       	brcs	.-68     	; 0x5082 <CheckAli_sPassWord_ErrorState+0x22>
			Correct_PASS_Flag++;
		}
		Chcek_Counter++;
	}

	if(Correct_PASS_Flag == 4 )
    50c6:	80 91 a3 02 	lds	r24, 0x02A3
    50ca:	84 30       	cpi	r24, 0x04	; 4
    50cc:	61 f4       	brne	.+24     	; 0x50e6 <CheckAli_sPassWord_ErrorState+0x86>
	{
		LCD_voidSetposition(2,1);
    50ce:	82 e0       	ldi	r24, 0x02	; 2
    50d0:	61 e0       	ldi	r22, 0x01	; 1
    50d2:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
		LCD_voidSendString((u8*)"Hello ALI");
    50d6:	80 e6       	ldi	r24, 0x60	; 96
    50d8:	90 e0       	ldi	r25, 0x00	; 0
    50da:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
		local_state = STD_TYPE_OK;
    50de:	81 e0       	ldi	r24, 0x01	; 1
    50e0:	80 93 a9 02 	sts	0x02A9, r24
    50e4:	86 c0       	rjmp	.+268    	; 0x51f2 <CheckAli_sPassWord_ErrorState+0x192>
	}
	else
	{
		LCD_voidSetposition(2,1);
    50e6:	82 e0       	ldi	r24, 0x02	; 2
    50e8:	61 e0       	ldi	r22, 0x01	; 1
    50ea:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
		LCD_voidSendString((u8*)"Wrong Pass");
    50ee:	8a e6       	ldi	r24, 0x6A	; 106
    50f0:	90 e0       	ldi	r25, 0x00	; 0
    50f2:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
    50f6:	80 e0       	ldi	r24, 0x00	; 0
    50f8:	90 e0       	ldi	r25, 0x00	; 0
    50fa:	aa ef       	ldi	r26, 0xFA	; 250
    50fc:	b3 e4       	ldi	r27, 0x43	; 67
    50fe:	8b 87       	std	Y+11, r24	; 0x0b
    5100:	9c 87       	std	Y+12, r25	; 0x0c
    5102:	ad 87       	std	Y+13, r26	; 0x0d
    5104:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5106:	6b 85       	ldd	r22, Y+11	; 0x0b
    5108:	7c 85       	ldd	r23, Y+12	; 0x0c
    510a:	8d 85       	ldd	r24, Y+13	; 0x0d
    510c:	9e 85       	ldd	r25, Y+14	; 0x0e
    510e:	20 e0       	ldi	r18, 0x00	; 0
    5110:	30 e0       	ldi	r19, 0x00	; 0
    5112:	4a ef       	ldi	r20, 0xFA	; 250
    5114:	54 e4       	ldi	r21, 0x44	; 68
    5116:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    511a:	dc 01       	movw	r26, r24
    511c:	cb 01       	movw	r24, r22
    511e:	8f 83       	std	Y+7, r24	; 0x07
    5120:	98 87       	std	Y+8, r25	; 0x08
    5122:	a9 87       	std	Y+9, r26	; 0x09
    5124:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5126:	6f 81       	ldd	r22, Y+7	; 0x07
    5128:	78 85       	ldd	r23, Y+8	; 0x08
    512a:	89 85       	ldd	r24, Y+9	; 0x09
    512c:	9a 85       	ldd	r25, Y+10	; 0x0a
    512e:	20 e0       	ldi	r18, 0x00	; 0
    5130:	30 e0       	ldi	r19, 0x00	; 0
    5132:	40 e8       	ldi	r20, 0x80	; 128
    5134:	5f e3       	ldi	r21, 0x3F	; 63
    5136:	0e 94 89 11 	call	0x2312	; 0x2312 <__ltsf2>
    513a:	88 23       	and	r24, r24
    513c:	2c f4       	brge	.+10     	; 0x5148 <CheckAli_sPassWord_ErrorState+0xe8>
		__ticks = 1;
    513e:	81 e0       	ldi	r24, 0x01	; 1
    5140:	90 e0       	ldi	r25, 0x00	; 0
    5142:	9e 83       	std	Y+6, r25	; 0x06
    5144:	8d 83       	std	Y+5, r24	; 0x05
    5146:	3f c0       	rjmp	.+126    	; 0x51c6 <CheckAli_sPassWord_ErrorState+0x166>
	else if (__tmp > 65535)
    5148:	6f 81       	ldd	r22, Y+7	; 0x07
    514a:	78 85       	ldd	r23, Y+8	; 0x08
    514c:	89 85       	ldd	r24, Y+9	; 0x09
    514e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5150:	20 e0       	ldi	r18, 0x00	; 0
    5152:	3f ef       	ldi	r19, 0xFF	; 255
    5154:	4f e7       	ldi	r20, 0x7F	; 127
    5156:	57 e4       	ldi	r21, 0x47	; 71
    5158:	0e 94 29 11 	call	0x2252	; 0x2252 <__gtsf2>
    515c:	18 16       	cp	r1, r24
    515e:	4c f5       	brge	.+82     	; 0x51b2 <CheckAli_sPassWord_ErrorState+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5160:	6b 85       	ldd	r22, Y+11	; 0x0b
    5162:	7c 85       	ldd	r23, Y+12	; 0x0c
    5164:	8d 85       	ldd	r24, Y+13	; 0x0d
    5166:	9e 85       	ldd	r25, Y+14	; 0x0e
    5168:	20 e0       	ldi	r18, 0x00	; 0
    516a:	30 e0       	ldi	r19, 0x00	; 0
    516c:	40 e2       	ldi	r20, 0x20	; 32
    516e:	51 e4       	ldi	r21, 0x41	; 65
    5170:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5174:	dc 01       	movw	r26, r24
    5176:	cb 01       	movw	r24, r22
    5178:	bc 01       	movw	r22, r24
    517a:	cd 01       	movw	r24, r26
    517c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5180:	dc 01       	movw	r26, r24
    5182:	cb 01       	movw	r24, r22
    5184:	9e 83       	std	Y+6, r25	; 0x06
    5186:	8d 83       	std	Y+5, r24	; 0x05
    5188:	0f c0       	rjmp	.+30     	; 0x51a8 <CheckAli_sPassWord_ErrorState+0x148>
    518a:	88 ec       	ldi	r24, 0xC8	; 200
    518c:	90 e0       	ldi	r25, 0x00	; 0
    518e:	9c 83       	std	Y+4, r25	; 0x04
    5190:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5192:	8b 81       	ldd	r24, Y+3	; 0x03
    5194:	9c 81       	ldd	r25, Y+4	; 0x04
    5196:	01 97       	sbiw	r24, 0x01	; 1
    5198:	f1 f7       	brne	.-4      	; 0x5196 <CheckAli_sPassWord_ErrorState+0x136>
    519a:	9c 83       	std	Y+4, r25	; 0x04
    519c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    519e:	8d 81       	ldd	r24, Y+5	; 0x05
    51a0:	9e 81       	ldd	r25, Y+6	; 0x06
    51a2:	01 97       	sbiw	r24, 0x01	; 1
    51a4:	9e 83       	std	Y+6, r25	; 0x06
    51a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51a8:	8d 81       	ldd	r24, Y+5	; 0x05
    51aa:	9e 81       	ldd	r25, Y+6	; 0x06
    51ac:	00 97       	sbiw	r24, 0x00	; 0
    51ae:	69 f7       	brne	.-38     	; 0x518a <CheckAli_sPassWord_ErrorState+0x12a>
    51b0:	14 c0       	rjmp	.+40     	; 0x51da <CheckAli_sPassWord_ErrorState+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51b2:	6f 81       	ldd	r22, Y+7	; 0x07
    51b4:	78 85       	ldd	r23, Y+8	; 0x08
    51b6:	89 85       	ldd	r24, Y+9	; 0x09
    51b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    51ba:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    51be:	dc 01       	movw	r26, r24
    51c0:	cb 01       	movw	r24, r22
    51c2:	9e 83       	std	Y+6, r25	; 0x06
    51c4:	8d 83       	std	Y+5, r24	; 0x05
    51c6:	8d 81       	ldd	r24, Y+5	; 0x05
    51c8:	9e 81       	ldd	r25, Y+6	; 0x06
    51ca:	9a 83       	std	Y+2, r25	; 0x02
    51cc:	89 83       	std	Y+1, r24	; 0x01
    51ce:	89 81       	ldd	r24, Y+1	; 0x01
    51d0:	9a 81       	ldd	r25, Y+2	; 0x02
    51d2:	01 97       	sbiw	r24, 0x01	; 1
    51d4:	f1 f7       	brne	.-4      	; 0x51d2 <CheckAli_sPassWord_ErrorState+0x172>
    51d6:	9a 83       	std	Y+2, r25	; 0x02
    51d8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		LCD_voidDisplay_CLR();
    51da:	0e 94 26 28 	call	0x504c	; 0x504c <LCD_voidDisplay_CLR>
		local_state = STD_TYPE_NOTOK;
    51de:	10 92 a9 02 	sts	0x02A9, r1
		LCD_voidSetposition(2,1);
    51e2:	82 e0       	ldi	r24, 0x02	; 2
    51e4:	61 e0       	ldi	r22, 0x01	; 1
    51e6:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
		LCD_voidSendString((u8*)"Try Again");
    51ea:	85 e7       	ldi	r24, 0x75	; 117
    51ec:	90 e0       	ldi	r25, 0x00	; 0
    51ee:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
	}
	return local_state ;
    51f2:	80 91 a9 02 	lds	r24, 0x02A9
}
    51f6:	60 96       	adiw	r28, 0x10	; 16
    51f8:	0f b6       	in	r0, 0x3f	; 63
    51fa:	f8 94       	cli
    51fc:	de bf       	out	0x3e, r29	; 62
    51fe:	0f be       	out	0x3f, r0	; 63
    5200:	cd bf       	out	0x3d, r28	; 61
    5202:	cf 91       	pop	r28
    5204:	df 91       	pop	r29
    5206:	08 95       	ret

00005208 <Ali_UserEntry>:



void Ali_UserEntry(void)
{
    5208:	0f 93       	push	r16
    520a:	1f 93       	push	r17
    520c:	df 93       	push	r29
    520e:	cf 93       	push	r28
    5210:	cd b7       	in	r28, 0x3d	; 61
    5212:	de b7       	in	r29, 0x3e	; 62
    5214:	2e 97       	sbiw	r28, 0x0e	; 14
    5216:	0f b6       	in	r0, 0x3f	; 63
    5218:	f8 94       	cli
    521a:	de bf       	out	0x3e, r29	; 62
    521c:	0f be       	out	0x3f, r0	; 63
    521e:	cd bf       	out	0x3d, r28	; 61
	static ERROR_STATE_t Local_Error_State =STD_TYPE_NOTOK ;
	LCD_voidDisplay_CLR();
    5220:	0e 94 26 28 	call	0x504c	; 0x504c <LCD_voidDisplay_CLR>
	LCD_voidSetposition(1,1);
    5224:	81 e0       	ldi	r24, 0x01	; 1
    5226:	61 e0       	ldi	r22, 0x01	; 1
    5228:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
	LCD_voidSendString((u8*)"Enter ALI's Pass");
    522c:	8f e7       	ldi	r24, 0x7F	; 127
    522e:	90 e0       	ldi	r25, 0x00	; 0
    5230:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
    5234:	24 c0       	rjmp	.+72     	; 0x527e <Ali_UserEntry+0x76>
	while(Attempts<3)
	{
		while(passcounter <=3 )
		{
			pass[passcounter] = UART_voidReceiveData_Sync();
    5236:	80 91 a1 02 	lds	r24, 0x02A1
    523a:	08 2f       	mov	r16, r24
    523c:	10 e0       	ldi	r17, 0x00	; 0
    523e:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <UART_voidReceiveData_Sync>
    5242:	f8 01       	movw	r30, r16
    5244:	e7 57       	subi	r30, 0x77	; 119
    5246:	fd 4f       	sbci	r31, 0xFD	; 253
    5248:	80 83       	st	Z, r24
			passcounter++;
    524a:	80 91 a1 02 	lds	r24, 0x02A1
    524e:	8f 5f       	subi	r24, 0xFF	; 255
    5250:	80 93 a1 02 	sts	0x02A1, r24
	LCD_voidDisplay_CLR();
	LCD_voidSetposition(1,1);
	LCD_voidSendString((u8*)"Enter ALI's Pass");
	while(Attempts<3)
	{
		while(passcounter <=3 )
    5254:	80 91 a1 02 	lds	r24, 0x02A1
    5258:	84 30       	cpi	r24, 0x04	; 4
    525a:	68 f3       	brcs	.-38     	; 0x5236 <Ali_UserEntry+0x2e>
		{
			pass[passcounter] = UART_voidReceiveData_Sync();
			passcounter++;
		}
		passcounter = 0;
    525c:	10 92 a1 02 	sts	0x02A1, r1
		Local_Error_State = CheckAli_sPassWord_ErrorState(pass);
    5260:	89 e8       	ldi	r24, 0x89	; 137
    5262:	92 e0       	ldi	r25, 0x02	; 2
    5264:	0e 94 30 28 	call	0x5060	; 0x5060 <CheckAli_sPassWord_ErrorState>
    5268:	80 93 a4 02 	sts	0x02A4, r24
		if(Local_Error_State == STD_TYPE_OK)
    526c:	80 91 a4 02 	lds	r24, 0x02A4
    5270:	81 30       	cpi	r24, 0x01	; 1
    5272:	49 f0       	breq	.+18     	; 0x5286 <Ali_UserEntry+0x7e>
		{
			break;
		}
		Attempts++;
    5274:	80 91 a0 02 	lds	r24, 0x02A0
    5278:	8f 5f       	subi	r24, 0xFF	; 255
    527a:	80 93 a0 02 	sts	0x02A0, r24
{
	static ERROR_STATE_t Local_Error_State =STD_TYPE_NOTOK ;
	LCD_voidDisplay_CLR();
	LCD_voidSetposition(1,1);
	LCD_voidSendString((u8*)"Enter ALI's Pass");
	while(Attempts<3)
    527e:	80 91 a0 02 	lds	r24, 0x02A0
    5282:	83 30       	cpi	r24, 0x03	; 3
    5284:	38 f3       	brcs	.-50     	; 0x5254 <Ali_UserEntry+0x4c>
		{
			break;
		}
		Attempts++;
	}
	if(Attempts == 3)
    5286:	80 91 a0 02 	lds	r24, 0x02A0
    528a:	83 30       	cpi	r24, 0x03	; 3
    528c:	71 f4       	brne	.+28     	; 0x52aa <Ali_UserEntry+0xa2>
	{
		LCD_voidSetposition(2,1);
    528e:	82 e0       	ldi	r24, 0x02	; 2
    5290:	61 e0       	ldi	r22, 0x01	; 1
    5292:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
		LCD_voidSendString((u8*)"No More Attempts");
    5296:	80 e9       	ldi	r24, 0x90	; 144
    5298:	90 e0       	ldi	r25, 0x00	; 0
    529a:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
		while(1)
		{
			DIO_voidSetPinValue(DIO_PORTA , DIO_PIN6 ,DIO_HIGH );//ALARM
    529e:	80 e0       	ldi	r24, 0x00	; 0
    52a0:	66 e0       	ldi	r22, 0x06	; 6
    52a2:	41 e0       	ldi	r20, 0x01	; 1
    52a4:	0e 94 86 1a 	call	0x350c	; 0x350c <DIO_voidSetPinValue>
    52a8:	fa cf       	rjmp	.-12     	; 0x529e <Ali_UserEntry+0x96>
		}
	}
	else
	{
		SERVO_u16SendAngle(90);
    52aa:	8a e5       	ldi	r24, 0x5A	; 90
    52ac:	90 e0       	ldi	r25, 0x00	; 0
    52ae:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <SERVO_u16SendAngle>
    52b2:	80 e0       	ldi	r24, 0x00	; 0
    52b4:	90 e8       	ldi	r25, 0x80	; 128
    52b6:	ab eb       	ldi	r26, 0xBB	; 187
    52b8:	b4 e4       	ldi	r27, 0x44	; 68
    52ba:	8b 87       	std	Y+11, r24	; 0x0b
    52bc:	9c 87       	std	Y+12, r25	; 0x0c
    52be:	ad 87       	std	Y+13, r26	; 0x0d
    52c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    52c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    52c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    52c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    52ca:	20 e0       	ldi	r18, 0x00	; 0
    52cc:	30 e0       	ldi	r19, 0x00	; 0
    52ce:	4a ef       	ldi	r20, 0xFA	; 250
    52d0:	54 e4       	ldi	r21, 0x44	; 68
    52d2:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    52d6:	dc 01       	movw	r26, r24
    52d8:	cb 01       	movw	r24, r22
    52da:	8f 83       	std	Y+7, r24	; 0x07
    52dc:	98 87       	std	Y+8, r25	; 0x08
    52de:	a9 87       	std	Y+9, r26	; 0x09
    52e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    52e2:	6f 81       	ldd	r22, Y+7	; 0x07
    52e4:	78 85       	ldd	r23, Y+8	; 0x08
    52e6:	89 85       	ldd	r24, Y+9	; 0x09
    52e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    52ea:	20 e0       	ldi	r18, 0x00	; 0
    52ec:	30 e0       	ldi	r19, 0x00	; 0
    52ee:	40 e8       	ldi	r20, 0x80	; 128
    52f0:	5f e3       	ldi	r21, 0x3F	; 63
    52f2:	0e 94 89 11 	call	0x2312	; 0x2312 <__ltsf2>
    52f6:	88 23       	and	r24, r24
    52f8:	2c f4       	brge	.+10     	; 0x5304 <Ali_UserEntry+0xfc>
		__ticks = 1;
    52fa:	81 e0       	ldi	r24, 0x01	; 1
    52fc:	90 e0       	ldi	r25, 0x00	; 0
    52fe:	9e 83       	std	Y+6, r25	; 0x06
    5300:	8d 83       	std	Y+5, r24	; 0x05
    5302:	3f c0       	rjmp	.+126    	; 0x5382 <Ali_UserEntry+0x17a>
	else if (__tmp > 65535)
    5304:	6f 81       	ldd	r22, Y+7	; 0x07
    5306:	78 85       	ldd	r23, Y+8	; 0x08
    5308:	89 85       	ldd	r24, Y+9	; 0x09
    530a:	9a 85       	ldd	r25, Y+10	; 0x0a
    530c:	20 e0       	ldi	r18, 0x00	; 0
    530e:	3f ef       	ldi	r19, 0xFF	; 255
    5310:	4f e7       	ldi	r20, 0x7F	; 127
    5312:	57 e4       	ldi	r21, 0x47	; 71
    5314:	0e 94 29 11 	call	0x2252	; 0x2252 <__gtsf2>
    5318:	18 16       	cp	r1, r24
    531a:	4c f5       	brge	.+82     	; 0x536e <Ali_UserEntry+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    531c:	6b 85       	ldd	r22, Y+11	; 0x0b
    531e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5320:	8d 85       	ldd	r24, Y+13	; 0x0d
    5322:	9e 85       	ldd	r25, Y+14	; 0x0e
    5324:	20 e0       	ldi	r18, 0x00	; 0
    5326:	30 e0       	ldi	r19, 0x00	; 0
    5328:	40 e2       	ldi	r20, 0x20	; 32
    532a:	51 e4       	ldi	r21, 0x41	; 65
    532c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5330:	dc 01       	movw	r26, r24
    5332:	cb 01       	movw	r24, r22
    5334:	bc 01       	movw	r22, r24
    5336:	cd 01       	movw	r24, r26
    5338:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    533c:	dc 01       	movw	r26, r24
    533e:	cb 01       	movw	r24, r22
    5340:	9e 83       	std	Y+6, r25	; 0x06
    5342:	8d 83       	std	Y+5, r24	; 0x05
    5344:	0f c0       	rjmp	.+30     	; 0x5364 <Ali_UserEntry+0x15c>
    5346:	88 ec       	ldi	r24, 0xC8	; 200
    5348:	90 e0       	ldi	r25, 0x00	; 0
    534a:	9c 83       	std	Y+4, r25	; 0x04
    534c:	8b 83       	std	Y+3, r24	; 0x03
    534e:	8b 81       	ldd	r24, Y+3	; 0x03
    5350:	9c 81       	ldd	r25, Y+4	; 0x04
    5352:	01 97       	sbiw	r24, 0x01	; 1
    5354:	f1 f7       	brne	.-4      	; 0x5352 <Ali_UserEntry+0x14a>
    5356:	9c 83       	std	Y+4, r25	; 0x04
    5358:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    535a:	8d 81       	ldd	r24, Y+5	; 0x05
    535c:	9e 81       	ldd	r25, Y+6	; 0x06
    535e:	01 97       	sbiw	r24, 0x01	; 1
    5360:	9e 83       	std	Y+6, r25	; 0x06
    5362:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5364:	8d 81       	ldd	r24, Y+5	; 0x05
    5366:	9e 81       	ldd	r25, Y+6	; 0x06
    5368:	00 97       	sbiw	r24, 0x00	; 0
    536a:	69 f7       	brne	.-38     	; 0x5346 <Ali_UserEntry+0x13e>
    536c:	14 c0       	rjmp	.+40     	; 0x5396 <Ali_UserEntry+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    536e:	6f 81       	ldd	r22, Y+7	; 0x07
    5370:	78 85       	ldd	r23, Y+8	; 0x08
    5372:	89 85       	ldd	r24, Y+9	; 0x09
    5374:	9a 85       	ldd	r25, Y+10	; 0x0a
    5376:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    537a:	dc 01       	movw	r26, r24
    537c:	cb 01       	movw	r24, r22
    537e:	9e 83       	std	Y+6, r25	; 0x06
    5380:	8d 83       	std	Y+5, r24	; 0x05
    5382:	8d 81       	ldd	r24, Y+5	; 0x05
    5384:	9e 81       	ldd	r25, Y+6	; 0x06
    5386:	9a 83       	std	Y+2, r25	; 0x02
    5388:	89 83       	std	Y+1, r24	; 0x01
    538a:	89 81       	ldd	r24, Y+1	; 0x01
    538c:	9a 81       	ldd	r25, Y+2	; 0x02
    538e:	01 97       	sbiw	r24, 0x01	; 1
    5390:	f1 f7       	brne	.-4      	; 0x538e <Ali_UserEntry+0x186>
    5392:	9a 83       	std	Y+2, r25	; 0x02
    5394:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1500);
		SERVO_u16SendAngle(0);
    5396:	80 e0       	ldi	r24, 0x00	; 0
    5398:	90 e0       	ldi	r25, 0x00	; 0
    539a:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <SERVO_u16SendAngle>
	}
}
    539e:	2e 96       	adiw	r28, 0x0e	; 14
    53a0:	0f b6       	in	r0, 0x3f	; 63
    53a2:	f8 94       	cli
    53a4:	de bf       	out	0x3e, r29	; 62
    53a6:	0f be       	out	0x3f, r0	; 63
    53a8:	cd bf       	out	0x3d, r28	; 61
    53aa:	cf 91       	pop	r28
    53ac:	df 91       	pop	r29
    53ae:	1f 91       	pop	r17
    53b0:	0f 91       	pop	r16
    53b2:	08 95       	ret

000053b4 <CheckAmr_sPassWord_ErrorState>:

ERROR_STATE_t CheckAmr_sPassWord_ErrorState(u8 *ptru8_to_password)
{
    53b4:	df 93       	push	r29
    53b6:	cf 93       	push	r28
    53b8:	cd b7       	in	r28, 0x3d	; 61
    53ba:	de b7       	in	r29, 0x3e	; 62
    53bc:	60 97       	sbiw	r28, 0x10	; 16
    53be:	0f b6       	in	r0, 0x3f	; 63
    53c0:	f8 94       	cli
    53c2:	de bf       	out	0x3e, r29	; 62
    53c4:	0f be       	out	0x3f, r0	; 63
    53c6:	cd bf       	out	0x3d, r28	; 61
    53c8:	98 8b       	std	Y+16, r25	; 0x10
    53ca:	8f 87       	std	Y+15, r24	; 0x0f
	Chcek_Counter = 0 ;
    53cc:	10 92 a2 02 	sts	0x02A2, r1
	Correct_PASS_Flag = 0 ;
    53d0:	10 92 a3 02 	sts	0x02A3, r1
    53d4:	1e c0       	rjmp	.+60     	; 0x5412 <CheckAmr_sPassWord_ErrorState+0x5e>
	while(Chcek_Counter <=3)
	{
		if(AMRSPASS[Chcek_Counter] == ptru8_to_password[Chcek_Counter ])
    53d6:	80 91 a2 02 	lds	r24, 0x02A2
    53da:	88 2f       	mov	r24, r24
    53dc:	90 e0       	ldi	r25, 0x00	; 0
    53de:	fc 01       	movw	r30, r24
    53e0:	e7 58       	subi	r30, 0x87	; 135
    53e2:	fd 4f       	sbci	r31, 0xFD	; 253
    53e4:	40 81       	ld	r20, Z
    53e6:	80 91 a2 02 	lds	r24, 0x02A2
    53ea:	28 2f       	mov	r18, r24
    53ec:	30 e0       	ldi	r19, 0x00	; 0
    53ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    53f0:	98 89       	ldd	r25, Y+16	; 0x10
    53f2:	fc 01       	movw	r30, r24
    53f4:	e2 0f       	add	r30, r18
    53f6:	f3 1f       	adc	r31, r19
    53f8:	80 81       	ld	r24, Z
    53fa:	48 17       	cp	r20, r24
    53fc:	29 f4       	brne	.+10     	; 0x5408 <CheckAmr_sPassWord_ErrorState+0x54>
		{
			Correct_PASS_Flag++;
    53fe:	80 91 a3 02 	lds	r24, 0x02A3
    5402:	8f 5f       	subi	r24, 0xFF	; 255
    5404:	80 93 a3 02 	sts	0x02A3, r24
		}
		Chcek_Counter++;
    5408:	80 91 a2 02 	lds	r24, 0x02A2
    540c:	8f 5f       	subi	r24, 0xFF	; 255
    540e:	80 93 a2 02 	sts	0x02A2, r24

ERROR_STATE_t CheckAmr_sPassWord_ErrorState(u8 *ptru8_to_password)
{
	Chcek_Counter = 0 ;
	Correct_PASS_Flag = 0 ;
	while(Chcek_Counter <=3)
    5412:	80 91 a2 02 	lds	r24, 0x02A2
    5416:	84 30       	cpi	r24, 0x04	; 4
    5418:	f0 f2       	brcs	.-68     	; 0x53d6 <CheckAmr_sPassWord_ErrorState+0x22>
			Correct_PASS_Flag++;
		}
		Chcek_Counter++;
	}

	if(Correct_PASS_Flag == 4 )
    541a:	80 91 a3 02 	lds	r24, 0x02A3
    541e:	84 30       	cpi	r24, 0x04	; 4
    5420:	61 f4       	brne	.+24     	; 0x543a <CheckAmr_sPassWord_ErrorState+0x86>
	{
		LCD_voidSetposition(2,1);
    5422:	82 e0       	ldi	r24, 0x02	; 2
    5424:	61 e0       	ldi	r22, 0x01	; 1
    5426:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
		LCD_voidSendString((u8*)"Hello AMR");
    542a:	81 ea       	ldi	r24, 0xA1	; 161
    542c:	90 e0       	ldi	r25, 0x00	; 0
    542e:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
		local_state = STD_TYPE_OK;
    5432:	81 e0       	ldi	r24, 0x01	; 1
    5434:	80 93 a9 02 	sts	0x02A9, r24
    5438:	86 c0       	rjmp	.+268    	; 0x5546 <CheckAmr_sPassWord_ErrorState+0x192>
	}
	else
	{
		LCD_voidSetposition(2,1);
    543a:	82 e0       	ldi	r24, 0x02	; 2
    543c:	61 e0       	ldi	r22, 0x01	; 1
    543e:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
		LCD_voidSendString((u8*)"Wrong Pass");
    5442:	8a e6       	ldi	r24, 0x6A	; 106
    5444:	90 e0       	ldi	r25, 0x00	; 0
    5446:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
    544a:	80 e0       	ldi	r24, 0x00	; 0
    544c:	90 e0       	ldi	r25, 0x00	; 0
    544e:	aa ef       	ldi	r26, 0xFA	; 250
    5450:	b3 e4       	ldi	r27, 0x43	; 67
    5452:	8b 87       	std	Y+11, r24	; 0x0b
    5454:	9c 87       	std	Y+12, r25	; 0x0c
    5456:	ad 87       	std	Y+13, r26	; 0x0d
    5458:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    545a:	6b 85       	ldd	r22, Y+11	; 0x0b
    545c:	7c 85       	ldd	r23, Y+12	; 0x0c
    545e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5460:	9e 85       	ldd	r25, Y+14	; 0x0e
    5462:	20 e0       	ldi	r18, 0x00	; 0
    5464:	30 e0       	ldi	r19, 0x00	; 0
    5466:	4a ef       	ldi	r20, 0xFA	; 250
    5468:	54 e4       	ldi	r21, 0x44	; 68
    546a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    546e:	dc 01       	movw	r26, r24
    5470:	cb 01       	movw	r24, r22
    5472:	8f 83       	std	Y+7, r24	; 0x07
    5474:	98 87       	std	Y+8, r25	; 0x08
    5476:	a9 87       	std	Y+9, r26	; 0x09
    5478:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    547a:	6f 81       	ldd	r22, Y+7	; 0x07
    547c:	78 85       	ldd	r23, Y+8	; 0x08
    547e:	89 85       	ldd	r24, Y+9	; 0x09
    5480:	9a 85       	ldd	r25, Y+10	; 0x0a
    5482:	20 e0       	ldi	r18, 0x00	; 0
    5484:	30 e0       	ldi	r19, 0x00	; 0
    5486:	40 e8       	ldi	r20, 0x80	; 128
    5488:	5f e3       	ldi	r21, 0x3F	; 63
    548a:	0e 94 89 11 	call	0x2312	; 0x2312 <__ltsf2>
    548e:	88 23       	and	r24, r24
    5490:	2c f4       	brge	.+10     	; 0x549c <CheckAmr_sPassWord_ErrorState+0xe8>
		__ticks = 1;
    5492:	81 e0       	ldi	r24, 0x01	; 1
    5494:	90 e0       	ldi	r25, 0x00	; 0
    5496:	9e 83       	std	Y+6, r25	; 0x06
    5498:	8d 83       	std	Y+5, r24	; 0x05
    549a:	3f c0       	rjmp	.+126    	; 0x551a <CheckAmr_sPassWord_ErrorState+0x166>
	else if (__tmp > 65535)
    549c:	6f 81       	ldd	r22, Y+7	; 0x07
    549e:	78 85       	ldd	r23, Y+8	; 0x08
    54a0:	89 85       	ldd	r24, Y+9	; 0x09
    54a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    54a4:	20 e0       	ldi	r18, 0x00	; 0
    54a6:	3f ef       	ldi	r19, 0xFF	; 255
    54a8:	4f e7       	ldi	r20, 0x7F	; 127
    54aa:	57 e4       	ldi	r21, 0x47	; 71
    54ac:	0e 94 29 11 	call	0x2252	; 0x2252 <__gtsf2>
    54b0:	18 16       	cp	r1, r24
    54b2:	4c f5       	brge	.+82     	; 0x5506 <CheckAmr_sPassWord_ErrorState+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    54b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    54b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    54ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    54bc:	20 e0       	ldi	r18, 0x00	; 0
    54be:	30 e0       	ldi	r19, 0x00	; 0
    54c0:	40 e2       	ldi	r20, 0x20	; 32
    54c2:	51 e4       	ldi	r21, 0x41	; 65
    54c4:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    54c8:	dc 01       	movw	r26, r24
    54ca:	cb 01       	movw	r24, r22
    54cc:	bc 01       	movw	r22, r24
    54ce:	cd 01       	movw	r24, r26
    54d0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    54d4:	dc 01       	movw	r26, r24
    54d6:	cb 01       	movw	r24, r22
    54d8:	9e 83       	std	Y+6, r25	; 0x06
    54da:	8d 83       	std	Y+5, r24	; 0x05
    54dc:	0f c0       	rjmp	.+30     	; 0x54fc <CheckAmr_sPassWord_ErrorState+0x148>
    54de:	88 ec       	ldi	r24, 0xC8	; 200
    54e0:	90 e0       	ldi	r25, 0x00	; 0
    54e2:	9c 83       	std	Y+4, r25	; 0x04
    54e4:	8b 83       	std	Y+3, r24	; 0x03
    54e6:	8b 81       	ldd	r24, Y+3	; 0x03
    54e8:	9c 81       	ldd	r25, Y+4	; 0x04
    54ea:	01 97       	sbiw	r24, 0x01	; 1
    54ec:	f1 f7       	brne	.-4      	; 0x54ea <CheckAmr_sPassWord_ErrorState+0x136>
    54ee:	9c 83       	std	Y+4, r25	; 0x04
    54f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54f2:	8d 81       	ldd	r24, Y+5	; 0x05
    54f4:	9e 81       	ldd	r25, Y+6	; 0x06
    54f6:	01 97       	sbiw	r24, 0x01	; 1
    54f8:	9e 83       	std	Y+6, r25	; 0x06
    54fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54fc:	8d 81       	ldd	r24, Y+5	; 0x05
    54fe:	9e 81       	ldd	r25, Y+6	; 0x06
    5500:	00 97       	sbiw	r24, 0x00	; 0
    5502:	69 f7       	brne	.-38     	; 0x54de <CheckAmr_sPassWord_ErrorState+0x12a>
    5504:	14 c0       	rjmp	.+40     	; 0x552e <CheckAmr_sPassWord_ErrorState+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5506:	6f 81       	ldd	r22, Y+7	; 0x07
    5508:	78 85       	ldd	r23, Y+8	; 0x08
    550a:	89 85       	ldd	r24, Y+9	; 0x09
    550c:	9a 85       	ldd	r25, Y+10	; 0x0a
    550e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5512:	dc 01       	movw	r26, r24
    5514:	cb 01       	movw	r24, r22
    5516:	9e 83       	std	Y+6, r25	; 0x06
    5518:	8d 83       	std	Y+5, r24	; 0x05
    551a:	8d 81       	ldd	r24, Y+5	; 0x05
    551c:	9e 81       	ldd	r25, Y+6	; 0x06
    551e:	9a 83       	std	Y+2, r25	; 0x02
    5520:	89 83       	std	Y+1, r24	; 0x01
    5522:	89 81       	ldd	r24, Y+1	; 0x01
    5524:	9a 81       	ldd	r25, Y+2	; 0x02
    5526:	01 97       	sbiw	r24, 0x01	; 1
    5528:	f1 f7       	brne	.-4      	; 0x5526 <CheckAmr_sPassWord_ErrorState+0x172>
    552a:	9a 83       	std	Y+2, r25	; 0x02
    552c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		LCD_voidDisplay_CLR();
    552e:	0e 94 26 28 	call	0x504c	; 0x504c <LCD_voidDisplay_CLR>
		local_state = STD_TYPE_NOTOK;
    5532:	10 92 a9 02 	sts	0x02A9, r1
		LCD_voidSetposition(2,1);
    5536:	82 e0       	ldi	r24, 0x02	; 2
    5538:	61 e0       	ldi	r22, 0x01	; 1
    553a:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
		LCD_voidSendString((u8*)"Try Again");
    553e:	85 e7       	ldi	r24, 0x75	; 117
    5540:	90 e0       	ldi	r25, 0x00	; 0
    5542:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
	}
	return local_state ;
    5546:	80 91 a9 02 	lds	r24, 0x02A9
}
    554a:	60 96       	adiw	r28, 0x10	; 16
    554c:	0f b6       	in	r0, 0x3f	; 63
    554e:	f8 94       	cli
    5550:	de bf       	out	0x3e, r29	; 62
    5552:	0f be       	out	0x3f, r0	; 63
    5554:	cd bf       	out	0x3d, r28	; 61
    5556:	cf 91       	pop	r28
    5558:	df 91       	pop	r29
    555a:	08 95       	ret

0000555c <Amr_UserEntry>:
void Amr_UserEntry(void)
{
    555c:	0f 93       	push	r16
    555e:	1f 93       	push	r17
    5560:	df 93       	push	r29
    5562:	cf 93       	push	r28
    5564:	cd b7       	in	r28, 0x3d	; 61
    5566:	de b7       	in	r29, 0x3e	; 62
    5568:	2e 97       	sbiw	r28, 0x0e	; 14
    556a:	0f b6       	in	r0, 0x3f	; 63
    556c:	f8 94       	cli
    556e:	de bf       	out	0x3e, r29	; 62
    5570:	0f be       	out	0x3f, r0	; 63
    5572:	cd bf       	out	0x3d, r28	; 61


	static ERROR_STATE_t Local_Error_State =STD_TYPE_NOTOK ;
	LCD_voidDisplay_CLR();
    5574:	0e 94 26 28 	call	0x504c	; 0x504c <LCD_voidDisplay_CLR>
	LCD_voidSetposition(1,1);
    5578:	81 e0       	ldi	r24, 0x01	; 1
    557a:	61 e0       	ldi	r22, 0x01	; 1
    557c:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
	LCD_voidSendString((u8*)"Enter AMR's Pass");
    5580:	8b ea       	ldi	r24, 0xAB	; 171
    5582:	90 e0       	ldi	r25, 0x00	; 0
    5584:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
    5588:	24 c0       	rjmp	.+72     	; 0x55d2 <Amr_UserEntry+0x76>
	while(Attempts<3)
	{
		while(passcounter <=3 )
		{
			pass[passcounter] = UART_voidReceiveData_Sync();
    558a:	80 91 a1 02 	lds	r24, 0x02A1
    558e:	08 2f       	mov	r16, r24
    5590:	10 e0       	ldi	r17, 0x00	; 0
    5592:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <UART_voidReceiveData_Sync>
    5596:	f8 01       	movw	r30, r16
    5598:	e7 57       	subi	r30, 0x77	; 119
    559a:	fd 4f       	sbci	r31, 0xFD	; 253
    559c:	80 83       	st	Z, r24
			passcounter++;
    559e:	80 91 a1 02 	lds	r24, 0x02A1
    55a2:	8f 5f       	subi	r24, 0xFF	; 255
    55a4:	80 93 a1 02 	sts	0x02A1, r24
	LCD_voidDisplay_CLR();
	LCD_voidSetposition(1,1);
	LCD_voidSendString((u8*)"Enter AMR's Pass");
	while(Attempts<3)
	{
		while(passcounter <=3 )
    55a8:	80 91 a1 02 	lds	r24, 0x02A1
    55ac:	84 30       	cpi	r24, 0x04	; 4
    55ae:	68 f3       	brcs	.-38     	; 0x558a <Amr_UserEntry+0x2e>
		{
			pass[passcounter] = UART_voidReceiveData_Sync();
			passcounter++;
		}
		passcounter = 0;
    55b0:	10 92 a1 02 	sts	0x02A1, r1
		Local_Error_State = CheckAmr_sPassWord_ErrorState(pass);
    55b4:	89 e8       	ldi	r24, 0x89	; 137
    55b6:	92 e0       	ldi	r25, 0x02	; 2
    55b8:	0e 94 da 29 	call	0x53b4	; 0x53b4 <CheckAmr_sPassWord_ErrorState>
    55bc:	80 93 a5 02 	sts	0x02A5, r24
		if(Local_Error_State == STD_TYPE_OK)
    55c0:	80 91 a5 02 	lds	r24, 0x02A5
    55c4:	81 30       	cpi	r24, 0x01	; 1
    55c6:	49 f0       	breq	.+18     	; 0x55da <Amr_UserEntry+0x7e>
		{
			break;
		}
		Attempts++;
    55c8:	80 91 a0 02 	lds	r24, 0x02A0
    55cc:	8f 5f       	subi	r24, 0xFF	; 255
    55ce:	80 93 a0 02 	sts	0x02A0, r24

	static ERROR_STATE_t Local_Error_State =STD_TYPE_NOTOK ;
	LCD_voidDisplay_CLR();
	LCD_voidSetposition(1,1);
	LCD_voidSendString((u8*)"Enter AMR's Pass");
	while(Attempts<3)
    55d2:	80 91 a0 02 	lds	r24, 0x02A0
    55d6:	83 30       	cpi	r24, 0x03	; 3
    55d8:	38 f3       	brcs	.-50     	; 0x55a8 <Amr_UserEntry+0x4c>
		{
			break;
		}
		Attempts++;
	}
	if(Attempts == 3)
    55da:	80 91 a0 02 	lds	r24, 0x02A0
    55de:	83 30       	cpi	r24, 0x03	; 3
    55e0:	71 f4       	brne	.+28     	; 0x55fe <Amr_UserEntry+0xa2>
	{
		LCD_voidSetposition(2,1);
    55e2:	82 e0       	ldi	r24, 0x02	; 2
    55e4:	61 e0       	ldi	r22, 0x01	; 1
    55e6:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
		LCD_voidSendString((u8*)"No More Attempts");
    55ea:	80 e9       	ldi	r24, 0x90	; 144
    55ec:	90 e0       	ldi	r25, 0x00	; 0
    55ee:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
		while(1)
		{
			DIO_voidSetPinValue(DIO_PORTA , DIO_PIN6 ,DIO_HIGH );//ALARM
    55f2:	80 e0       	ldi	r24, 0x00	; 0
    55f4:	66 e0       	ldi	r22, 0x06	; 6
    55f6:	41 e0       	ldi	r20, 0x01	; 1
    55f8:	0e 94 86 1a 	call	0x350c	; 0x350c <DIO_voidSetPinValue>
    55fc:	fa cf       	rjmp	.-12     	; 0x55f2 <Amr_UserEntry+0x96>
		}
	}
	else
	{
		SERVO_u16SendAngle(90);
    55fe:	8a e5       	ldi	r24, 0x5A	; 90
    5600:	90 e0       	ldi	r25, 0x00	; 0
    5602:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <SERVO_u16SendAngle>
    5606:	80 e0       	ldi	r24, 0x00	; 0
    5608:	90 e8       	ldi	r25, 0x80	; 128
    560a:	ab eb       	ldi	r26, 0xBB	; 187
    560c:	b4 e4       	ldi	r27, 0x44	; 68
    560e:	8b 87       	std	Y+11, r24	; 0x0b
    5610:	9c 87       	std	Y+12, r25	; 0x0c
    5612:	ad 87       	std	Y+13, r26	; 0x0d
    5614:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5616:	6b 85       	ldd	r22, Y+11	; 0x0b
    5618:	7c 85       	ldd	r23, Y+12	; 0x0c
    561a:	8d 85       	ldd	r24, Y+13	; 0x0d
    561c:	9e 85       	ldd	r25, Y+14	; 0x0e
    561e:	20 e0       	ldi	r18, 0x00	; 0
    5620:	30 e0       	ldi	r19, 0x00	; 0
    5622:	4a ef       	ldi	r20, 0xFA	; 250
    5624:	54 e4       	ldi	r21, 0x44	; 68
    5626:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    562a:	dc 01       	movw	r26, r24
    562c:	cb 01       	movw	r24, r22
    562e:	8f 83       	std	Y+7, r24	; 0x07
    5630:	98 87       	std	Y+8, r25	; 0x08
    5632:	a9 87       	std	Y+9, r26	; 0x09
    5634:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5636:	6f 81       	ldd	r22, Y+7	; 0x07
    5638:	78 85       	ldd	r23, Y+8	; 0x08
    563a:	89 85       	ldd	r24, Y+9	; 0x09
    563c:	9a 85       	ldd	r25, Y+10	; 0x0a
    563e:	20 e0       	ldi	r18, 0x00	; 0
    5640:	30 e0       	ldi	r19, 0x00	; 0
    5642:	40 e8       	ldi	r20, 0x80	; 128
    5644:	5f e3       	ldi	r21, 0x3F	; 63
    5646:	0e 94 89 11 	call	0x2312	; 0x2312 <__ltsf2>
    564a:	88 23       	and	r24, r24
    564c:	2c f4       	brge	.+10     	; 0x5658 <Amr_UserEntry+0xfc>
		__ticks = 1;
    564e:	81 e0       	ldi	r24, 0x01	; 1
    5650:	90 e0       	ldi	r25, 0x00	; 0
    5652:	9e 83       	std	Y+6, r25	; 0x06
    5654:	8d 83       	std	Y+5, r24	; 0x05
    5656:	3f c0       	rjmp	.+126    	; 0x56d6 <Amr_UserEntry+0x17a>
	else if (__tmp > 65535)
    5658:	6f 81       	ldd	r22, Y+7	; 0x07
    565a:	78 85       	ldd	r23, Y+8	; 0x08
    565c:	89 85       	ldd	r24, Y+9	; 0x09
    565e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5660:	20 e0       	ldi	r18, 0x00	; 0
    5662:	3f ef       	ldi	r19, 0xFF	; 255
    5664:	4f e7       	ldi	r20, 0x7F	; 127
    5666:	57 e4       	ldi	r21, 0x47	; 71
    5668:	0e 94 29 11 	call	0x2252	; 0x2252 <__gtsf2>
    566c:	18 16       	cp	r1, r24
    566e:	4c f5       	brge	.+82     	; 0x56c2 <Amr_UserEntry+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5670:	6b 85       	ldd	r22, Y+11	; 0x0b
    5672:	7c 85       	ldd	r23, Y+12	; 0x0c
    5674:	8d 85       	ldd	r24, Y+13	; 0x0d
    5676:	9e 85       	ldd	r25, Y+14	; 0x0e
    5678:	20 e0       	ldi	r18, 0x00	; 0
    567a:	30 e0       	ldi	r19, 0x00	; 0
    567c:	40 e2       	ldi	r20, 0x20	; 32
    567e:	51 e4       	ldi	r21, 0x41	; 65
    5680:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5684:	dc 01       	movw	r26, r24
    5686:	cb 01       	movw	r24, r22
    5688:	bc 01       	movw	r22, r24
    568a:	cd 01       	movw	r24, r26
    568c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5690:	dc 01       	movw	r26, r24
    5692:	cb 01       	movw	r24, r22
    5694:	9e 83       	std	Y+6, r25	; 0x06
    5696:	8d 83       	std	Y+5, r24	; 0x05
    5698:	0f c0       	rjmp	.+30     	; 0x56b8 <Amr_UserEntry+0x15c>
    569a:	88 ec       	ldi	r24, 0xC8	; 200
    569c:	90 e0       	ldi	r25, 0x00	; 0
    569e:	9c 83       	std	Y+4, r25	; 0x04
    56a0:	8b 83       	std	Y+3, r24	; 0x03
    56a2:	8b 81       	ldd	r24, Y+3	; 0x03
    56a4:	9c 81       	ldd	r25, Y+4	; 0x04
    56a6:	01 97       	sbiw	r24, 0x01	; 1
    56a8:	f1 f7       	brne	.-4      	; 0x56a6 <Amr_UserEntry+0x14a>
    56aa:	9c 83       	std	Y+4, r25	; 0x04
    56ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56ae:	8d 81       	ldd	r24, Y+5	; 0x05
    56b0:	9e 81       	ldd	r25, Y+6	; 0x06
    56b2:	01 97       	sbiw	r24, 0x01	; 1
    56b4:	9e 83       	std	Y+6, r25	; 0x06
    56b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56b8:	8d 81       	ldd	r24, Y+5	; 0x05
    56ba:	9e 81       	ldd	r25, Y+6	; 0x06
    56bc:	00 97       	sbiw	r24, 0x00	; 0
    56be:	69 f7       	brne	.-38     	; 0x569a <Amr_UserEntry+0x13e>
    56c0:	14 c0       	rjmp	.+40     	; 0x56ea <Amr_UserEntry+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56c2:	6f 81       	ldd	r22, Y+7	; 0x07
    56c4:	78 85       	ldd	r23, Y+8	; 0x08
    56c6:	89 85       	ldd	r24, Y+9	; 0x09
    56c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    56ca:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    56ce:	dc 01       	movw	r26, r24
    56d0:	cb 01       	movw	r24, r22
    56d2:	9e 83       	std	Y+6, r25	; 0x06
    56d4:	8d 83       	std	Y+5, r24	; 0x05
    56d6:	8d 81       	ldd	r24, Y+5	; 0x05
    56d8:	9e 81       	ldd	r25, Y+6	; 0x06
    56da:	9a 83       	std	Y+2, r25	; 0x02
    56dc:	89 83       	std	Y+1, r24	; 0x01
    56de:	89 81       	ldd	r24, Y+1	; 0x01
    56e0:	9a 81       	ldd	r25, Y+2	; 0x02
    56e2:	01 97       	sbiw	r24, 0x01	; 1
    56e4:	f1 f7       	brne	.-4      	; 0x56e2 <Amr_UserEntry+0x186>
    56e6:	9a 83       	std	Y+2, r25	; 0x02
    56e8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1500);
		SERVO_u16SendAngle(0);
    56ea:	80 e0       	ldi	r24, 0x00	; 0
    56ec:	90 e0       	ldi	r25, 0x00	; 0
    56ee:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <SERVO_u16SendAngle>
	}

}
    56f2:	2e 96       	adiw	r28, 0x0e	; 14
    56f4:	0f b6       	in	r0, 0x3f	; 63
    56f6:	f8 94       	cli
    56f8:	de bf       	out	0x3e, r29	; 62
    56fa:	0f be       	out	0x3f, r0	; 63
    56fc:	cd bf       	out	0x3d, r28	; 61
    56fe:	cf 91       	pop	r28
    5700:	df 91       	pop	r29
    5702:	1f 91       	pop	r17
    5704:	0f 91       	pop	r16
    5706:	08 95       	ret

00005708 <CheckMay_sPassWord_ErrorState>:

ERROR_STATE_t CheckMay_sPassWord_ErrorState(u8 *ptru8_to_password)
{
    5708:	df 93       	push	r29
    570a:	cf 93       	push	r28
    570c:	cd b7       	in	r28, 0x3d	; 61
    570e:	de b7       	in	r29, 0x3e	; 62
    5710:	60 97       	sbiw	r28, 0x10	; 16
    5712:	0f b6       	in	r0, 0x3f	; 63
    5714:	f8 94       	cli
    5716:	de bf       	out	0x3e, r29	; 62
    5718:	0f be       	out	0x3f, r0	; 63
    571a:	cd bf       	out	0x3d, r28	; 61
    571c:	98 8b       	std	Y+16, r25	; 0x10
    571e:	8f 87       	std	Y+15, r24	; 0x0f
	Chcek_Counter = 0 ;
    5720:	10 92 a2 02 	sts	0x02A2, r1
	Correct_PASS_Flag = 0 ;
    5724:	10 92 a3 02 	sts	0x02A3, r1
    5728:	1e c0       	rjmp	.+60     	; 0x5766 <CheckMay_sPassWord_ErrorState+0x5e>
	while(Chcek_Counter <=3)
	{
		if(MAYSPASS[Chcek_Counter] == ptru8_to_password[Chcek_Counter ])
    572a:	80 91 a2 02 	lds	r24, 0x02A2
    572e:	88 2f       	mov	r24, r24
    5730:	90 e0       	ldi	r25, 0x00	; 0
    5732:	fc 01       	movw	r30, r24
    5734:	e3 58       	subi	r30, 0x83	; 131
    5736:	fd 4f       	sbci	r31, 0xFD	; 253
    5738:	40 81       	ld	r20, Z
    573a:	80 91 a2 02 	lds	r24, 0x02A2
    573e:	28 2f       	mov	r18, r24
    5740:	30 e0       	ldi	r19, 0x00	; 0
    5742:	8f 85       	ldd	r24, Y+15	; 0x0f
    5744:	98 89       	ldd	r25, Y+16	; 0x10
    5746:	fc 01       	movw	r30, r24
    5748:	e2 0f       	add	r30, r18
    574a:	f3 1f       	adc	r31, r19
    574c:	80 81       	ld	r24, Z
    574e:	48 17       	cp	r20, r24
    5750:	29 f4       	brne	.+10     	; 0x575c <CheckMay_sPassWord_ErrorState+0x54>
		{
			Correct_PASS_Flag++;
    5752:	80 91 a3 02 	lds	r24, 0x02A3
    5756:	8f 5f       	subi	r24, 0xFF	; 255
    5758:	80 93 a3 02 	sts	0x02A3, r24
		}
		Chcek_Counter++;
    575c:	80 91 a2 02 	lds	r24, 0x02A2
    5760:	8f 5f       	subi	r24, 0xFF	; 255
    5762:	80 93 a2 02 	sts	0x02A2, r24

ERROR_STATE_t CheckMay_sPassWord_ErrorState(u8 *ptru8_to_password)
{
	Chcek_Counter = 0 ;
	Correct_PASS_Flag = 0 ;
	while(Chcek_Counter <=3)
    5766:	80 91 a2 02 	lds	r24, 0x02A2
    576a:	84 30       	cpi	r24, 0x04	; 4
    576c:	f0 f2       	brcs	.-68     	; 0x572a <CheckMay_sPassWord_ErrorState+0x22>
			Correct_PASS_Flag++;
		}
		Chcek_Counter++;
	}

	if(Correct_PASS_Flag == 4 )
    576e:	80 91 a3 02 	lds	r24, 0x02A3
    5772:	84 30       	cpi	r24, 0x04	; 4
    5774:	61 f4       	brne	.+24     	; 0x578e <CheckMay_sPassWord_ErrorState+0x86>
	{
		LCD_voidSetposition(2,1);
    5776:	82 e0       	ldi	r24, 0x02	; 2
    5778:	61 e0       	ldi	r22, 0x01	; 1
    577a:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
		LCD_voidSendString((u8*)"Hello MAY");
    577e:	8c eb       	ldi	r24, 0xBC	; 188
    5780:	90 e0       	ldi	r25, 0x00	; 0
    5782:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
		local_state = STD_TYPE_OK;
    5786:	81 e0       	ldi	r24, 0x01	; 1
    5788:	80 93 a9 02 	sts	0x02A9, r24
    578c:	86 c0       	rjmp	.+268    	; 0x589a <CheckMay_sPassWord_ErrorState+0x192>
	}
	else
	{
		LCD_voidSetposition(2,1);
    578e:	82 e0       	ldi	r24, 0x02	; 2
    5790:	61 e0       	ldi	r22, 0x01	; 1
    5792:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
		LCD_voidSendString((u8*)"Wrong Pass");
    5796:	8a e6       	ldi	r24, 0x6A	; 106
    5798:	90 e0       	ldi	r25, 0x00	; 0
    579a:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
    579e:	80 e0       	ldi	r24, 0x00	; 0
    57a0:	90 e0       	ldi	r25, 0x00	; 0
    57a2:	aa ef       	ldi	r26, 0xFA	; 250
    57a4:	b3 e4       	ldi	r27, 0x43	; 67
    57a6:	8b 87       	std	Y+11, r24	; 0x0b
    57a8:	9c 87       	std	Y+12, r25	; 0x0c
    57aa:	ad 87       	std	Y+13, r26	; 0x0d
    57ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    57b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    57b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    57b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    57b6:	20 e0       	ldi	r18, 0x00	; 0
    57b8:	30 e0       	ldi	r19, 0x00	; 0
    57ba:	4a ef       	ldi	r20, 0xFA	; 250
    57bc:	54 e4       	ldi	r21, 0x44	; 68
    57be:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    57c2:	dc 01       	movw	r26, r24
    57c4:	cb 01       	movw	r24, r22
    57c6:	8f 83       	std	Y+7, r24	; 0x07
    57c8:	98 87       	std	Y+8, r25	; 0x08
    57ca:	a9 87       	std	Y+9, r26	; 0x09
    57cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    57ce:	6f 81       	ldd	r22, Y+7	; 0x07
    57d0:	78 85       	ldd	r23, Y+8	; 0x08
    57d2:	89 85       	ldd	r24, Y+9	; 0x09
    57d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    57d6:	20 e0       	ldi	r18, 0x00	; 0
    57d8:	30 e0       	ldi	r19, 0x00	; 0
    57da:	40 e8       	ldi	r20, 0x80	; 128
    57dc:	5f e3       	ldi	r21, 0x3F	; 63
    57de:	0e 94 89 11 	call	0x2312	; 0x2312 <__ltsf2>
    57e2:	88 23       	and	r24, r24
    57e4:	2c f4       	brge	.+10     	; 0x57f0 <CheckMay_sPassWord_ErrorState+0xe8>
		__ticks = 1;
    57e6:	81 e0       	ldi	r24, 0x01	; 1
    57e8:	90 e0       	ldi	r25, 0x00	; 0
    57ea:	9e 83       	std	Y+6, r25	; 0x06
    57ec:	8d 83       	std	Y+5, r24	; 0x05
    57ee:	3f c0       	rjmp	.+126    	; 0x586e <CheckMay_sPassWord_ErrorState+0x166>
	else if (__tmp > 65535)
    57f0:	6f 81       	ldd	r22, Y+7	; 0x07
    57f2:	78 85       	ldd	r23, Y+8	; 0x08
    57f4:	89 85       	ldd	r24, Y+9	; 0x09
    57f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    57f8:	20 e0       	ldi	r18, 0x00	; 0
    57fa:	3f ef       	ldi	r19, 0xFF	; 255
    57fc:	4f e7       	ldi	r20, 0x7F	; 127
    57fe:	57 e4       	ldi	r21, 0x47	; 71
    5800:	0e 94 29 11 	call	0x2252	; 0x2252 <__gtsf2>
    5804:	18 16       	cp	r1, r24
    5806:	4c f5       	brge	.+82     	; 0x585a <CheckMay_sPassWord_ErrorState+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5808:	6b 85       	ldd	r22, Y+11	; 0x0b
    580a:	7c 85       	ldd	r23, Y+12	; 0x0c
    580c:	8d 85       	ldd	r24, Y+13	; 0x0d
    580e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5810:	20 e0       	ldi	r18, 0x00	; 0
    5812:	30 e0       	ldi	r19, 0x00	; 0
    5814:	40 e2       	ldi	r20, 0x20	; 32
    5816:	51 e4       	ldi	r21, 0x41	; 65
    5818:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    581c:	dc 01       	movw	r26, r24
    581e:	cb 01       	movw	r24, r22
    5820:	bc 01       	movw	r22, r24
    5822:	cd 01       	movw	r24, r26
    5824:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5828:	dc 01       	movw	r26, r24
    582a:	cb 01       	movw	r24, r22
    582c:	9e 83       	std	Y+6, r25	; 0x06
    582e:	8d 83       	std	Y+5, r24	; 0x05
    5830:	0f c0       	rjmp	.+30     	; 0x5850 <CheckMay_sPassWord_ErrorState+0x148>
    5832:	88 ec       	ldi	r24, 0xC8	; 200
    5834:	90 e0       	ldi	r25, 0x00	; 0
    5836:	9c 83       	std	Y+4, r25	; 0x04
    5838:	8b 83       	std	Y+3, r24	; 0x03
    583a:	8b 81       	ldd	r24, Y+3	; 0x03
    583c:	9c 81       	ldd	r25, Y+4	; 0x04
    583e:	01 97       	sbiw	r24, 0x01	; 1
    5840:	f1 f7       	brne	.-4      	; 0x583e <CheckMay_sPassWord_ErrorState+0x136>
    5842:	9c 83       	std	Y+4, r25	; 0x04
    5844:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5846:	8d 81       	ldd	r24, Y+5	; 0x05
    5848:	9e 81       	ldd	r25, Y+6	; 0x06
    584a:	01 97       	sbiw	r24, 0x01	; 1
    584c:	9e 83       	std	Y+6, r25	; 0x06
    584e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5850:	8d 81       	ldd	r24, Y+5	; 0x05
    5852:	9e 81       	ldd	r25, Y+6	; 0x06
    5854:	00 97       	sbiw	r24, 0x00	; 0
    5856:	69 f7       	brne	.-38     	; 0x5832 <CheckMay_sPassWord_ErrorState+0x12a>
    5858:	14 c0       	rjmp	.+40     	; 0x5882 <CheckMay_sPassWord_ErrorState+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    585a:	6f 81       	ldd	r22, Y+7	; 0x07
    585c:	78 85       	ldd	r23, Y+8	; 0x08
    585e:	89 85       	ldd	r24, Y+9	; 0x09
    5860:	9a 85       	ldd	r25, Y+10	; 0x0a
    5862:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5866:	dc 01       	movw	r26, r24
    5868:	cb 01       	movw	r24, r22
    586a:	9e 83       	std	Y+6, r25	; 0x06
    586c:	8d 83       	std	Y+5, r24	; 0x05
    586e:	8d 81       	ldd	r24, Y+5	; 0x05
    5870:	9e 81       	ldd	r25, Y+6	; 0x06
    5872:	9a 83       	std	Y+2, r25	; 0x02
    5874:	89 83       	std	Y+1, r24	; 0x01
    5876:	89 81       	ldd	r24, Y+1	; 0x01
    5878:	9a 81       	ldd	r25, Y+2	; 0x02
    587a:	01 97       	sbiw	r24, 0x01	; 1
    587c:	f1 f7       	brne	.-4      	; 0x587a <CheckMay_sPassWord_ErrorState+0x172>
    587e:	9a 83       	std	Y+2, r25	; 0x02
    5880:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		LCD_voidDisplay_CLR();
    5882:	0e 94 26 28 	call	0x504c	; 0x504c <LCD_voidDisplay_CLR>
		local_state = STD_TYPE_NOTOK;
    5886:	10 92 a9 02 	sts	0x02A9, r1
		LCD_voidSetposition(2,1);
    588a:	82 e0       	ldi	r24, 0x02	; 2
    588c:	61 e0       	ldi	r22, 0x01	; 1
    588e:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
		LCD_voidSendString((u8*)"Try Again");
    5892:	85 e7       	ldi	r24, 0x75	; 117
    5894:	90 e0       	ldi	r25, 0x00	; 0
    5896:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
	}
	return local_state ;
    589a:	80 91 a9 02 	lds	r24, 0x02A9
}
    589e:	60 96       	adiw	r28, 0x10	; 16
    58a0:	0f b6       	in	r0, 0x3f	; 63
    58a2:	f8 94       	cli
    58a4:	de bf       	out	0x3e, r29	; 62
    58a6:	0f be       	out	0x3f, r0	; 63
    58a8:	cd bf       	out	0x3d, r28	; 61
    58aa:	cf 91       	pop	r28
    58ac:	df 91       	pop	r29
    58ae:	08 95       	ret

000058b0 <May_UserEntry>:
void May_UserEntry(void)
{
    58b0:	0f 93       	push	r16
    58b2:	1f 93       	push	r17
    58b4:	df 93       	push	r29
    58b6:	cf 93       	push	r28
    58b8:	cd b7       	in	r28, 0x3d	; 61
    58ba:	de b7       	in	r29, 0x3e	; 62
    58bc:	2e 97       	sbiw	r28, 0x0e	; 14
    58be:	0f b6       	in	r0, 0x3f	; 63
    58c0:	f8 94       	cli
    58c2:	de bf       	out	0x3e, r29	; 62
    58c4:	0f be       	out	0x3f, r0	; 63
    58c6:	cd bf       	out	0x3d, r28	; 61


	static ERROR_STATE_t Local_Error_State =STD_TYPE_NOTOK ;
	LCD_voidDisplay_CLR();
    58c8:	0e 94 26 28 	call	0x504c	; 0x504c <LCD_voidDisplay_CLR>
	LCD_voidSetposition(1,1);
    58cc:	81 e0       	ldi	r24, 0x01	; 1
    58ce:	61 e0       	ldi	r22, 0x01	; 1
    58d0:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
	LCD_voidSendString((u8*)"Enter MAY's Pass");
    58d4:	86 ec       	ldi	r24, 0xC6	; 198
    58d6:	90 e0       	ldi	r25, 0x00	; 0
    58d8:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
    58dc:	24 c0       	rjmp	.+72     	; 0x5926 <May_UserEntry+0x76>
	while(Attempts<3)
	{
		while(passcounter <=3 )
		{
			pass[passcounter] = UART_voidReceiveData_Sync();
    58de:	80 91 a1 02 	lds	r24, 0x02A1
    58e2:	08 2f       	mov	r16, r24
    58e4:	10 e0       	ldi	r17, 0x00	; 0
    58e6:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <UART_voidReceiveData_Sync>
    58ea:	f8 01       	movw	r30, r16
    58ec:	e7 57       	subi	r30, 0x77	; 119
    58ee:	fd 4f       	sbci	r31, 0xFD	; 253
    58f0:	80 83       	st	Z, r24
			passcounter++;
    58f2:	80 91 a1 02 	lds	r24, 0x02A1
    58f6:	8f 5f       	subi	r24, 0xFF	; 255
    58f8:	80 93 a1 02 	sts	0x02A1, r24
	LCD_voidDisplay_CLR();
	LCD_voidSetposition(1,1);
	LCD_voidSendString((u8*)"Enter MAY's Pass");
	while(Attempts<3)
	{
		while(passcounter <=3 )
    58fc:	80 91 a1 02 	lds	r24, 0x02A1
    5900:	84 30       	cpi	r24, 0x04	; 4
    5902:	68 f3       	brcs	.-38     	; 0x58de <May_UserEntry+0x2e>
		{
			pass[passcounter] = UART_voidReceiveData_Sync();
			passcounter++;
		}
		passcounter = 0;
    5904:	10 92 a1 02 	sts	0x02A1, r1
		Local_Error_State = CheckMay_sPassWord_ErrorState(pass);
    5908:	89 e8       	ldi	r24, 0x89	; 137
    590a:	92 e0       	ldi	r25, 0x02	; 2
    590c:	0e 94 84 2b 	call	0x5708	; 0x5708 <CheckMay_sPassWord_ErrorState>
    5910:	80 93 a6 02 	sts	0x02A6, r24
		if(Local_Error_State == STD_TYPE_OK)
    5914:	80 91 a6 02 	lds	r24, 0x02A6
    5918:	81 30       	cpi	r24, 0x01	; 1
    591a:	49 f0       	breq	.+18     	; 0x592e <May_UserEntry+0x7e>
		{
			break;
		}
		Attempts++;
    591c:	80 91 a0 02 	lds	r24, 0x02A0
    5920:	8f 5f       	subi	r24, 0xFF	; 255
    5922:	80 93 a0 02 	sts	0x02A0, r24

	static ERROR_STATE_t Local_Error_State =STD_TYPE_NOTOK ;
	LCD_voidDisplay_CLR();
	LCD_voidSetposition(1,1);
	LCD_voidSendString((u8*)"Enter MAY's Pass");
	while(Attempts<3)
    5926:	80 91 a0 02 	lds	r24, 0x02A0
    592a:	83 30       	cpi	r24, 0x03	; 3
    592c:	38 f3       	brcs	.-50     	; 0x58fc <May_UserEntry+0x4c>
		{
			break;
		}
		Attempts++;
	}
	if(Attempts == 3)
    592e:	80 91 a0 02 	lds	r24, 0x02A0
    5932:	83 30       	cpi	r24, 0x03	; 3
    5934:	71 f4       	brne	.+28     	; 0x5952 <May_UserEntry+0xa2>
	{
		LCD_voidSetposition(2,1);
    5936:	82 e0       	ldi	r24, 0x02	; 2
    5938:	61 e0       	ldi	r22, 0x01	; 1
    593a:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
		LCD_voidSendString((u8*)"No More Attempts");
    593e:	80 e9       	ldi	r24, 0x90	; 144
    5940:	90 e0       	ldi	r25, 0x00	; 0
    5942:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
		while(1)
		{
			DIO_voidSetPinValue(DIO_PORTA , DIO_PIN6 ,DIO_HIGH );//ALARM
    5946:	80 e0       	ldi	r24, 0x00	; 0
    5948:	66 e0       	ldi	r22, 0x06	; 6
    594a:	41 e0       	ldi	r20, 0x01	; 1
    594c:	0e 94 86 1a 	call	0x350c	; 0x350c <DIO_voidSetPinValue>
    5950:	fa cf       	rjmp	.-12     	; 0x5946 <May_UserEntry+0x96>
		}
	}
	else
	{
		SERVO_u16SendAngle(90);
    5952:	8a e5       	ldi	r24, 0x5A	; 90
    5954:	90 e0       	ldi	r25, 0x00	; 0
    5956:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <SERVO_u16SendAngle>
    595a:	80 e0       	ldi	r24, 0x00	; 0
    595c:	90 e8       	ldi	r25, 0x80	; 128
    595e:	ab eb       	ldi	r26, 0xBB	; 187
    5960:	b4 e4       	ldi	r27, 0x44	; 68
    5962:	8b 87       	std	Y+11, r24	; 0x0b
    5964:	9c 87       	std	Y+12, r25	; 0x0c
    5966:	ad 87       	std	Y+13, r26	; 0x0d
    5968:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    596a:	6b 85       	ldd	r22, Y+11	; 0x0b
    596c:	7c 85       	ldd	r23, Y+12	; 0x0c
    596e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5970:	9e 85       	ldd	r25, Y+14	; 0x0e
    5972:	20 e0       	ldi	r18, 0x00	; 0
    5974:	30 e0       	ldi	r19, 0x00	; 0
    5976:	4a ef       	ldi	r20, 0xFA	; 250
    5978:	54 e4       	ldi	r21, 0x44	; 68
    597a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    597e:	dc 01       	movw	r26, r24
    5980:	cb 01       	movw	r24, r22
    5982:	8f 83       	std	Y+7, r24	; 0x07
    5984:	98 87       	std	Y+8, r25	; 0x08
    5986:	a9 87       	std	Y+9, r26	; 0x09
    5988:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    598a:	6f 81       	ldd	r22, Y+7	; 0x07
    598c:	78 85       	ldd	r23, Y+8	; 0x08
    598e:	89 85       	ldd	r24, Y+9	; 0x09
    5990:	9a 85       	ldd	r25, Y+10	; 0x0a
    5992:	20 e0       	ldi	r18, 0x00	; 0
    5994:	30 e0       	ldi	r19, 0x00	; 0
    5996:	40 e8       	ldi	r20, 0x80	; 128
    5998:	5f e3       	ldi	r21, 0x3F	; 63
    599a:	0e 94 89 11 	call	0x2312	; 0x2312 <__ltsf2>
    599e:	88 23       	and	r24, r24
    59a0:	2c f4       	brge	.+10     	; 0x59ac <May_UserEntry+0xfc>
		__ticks = 1;
    59a2:	81 e0       	ldi	r24, 0x01	; 1
    59a4:	90 e0       	ldi	r25, 0x00	; 0
    59a6:	9e 83       	std	Y+6, r25	; 0x06
    59a8:	8d 83       	std	Y+5, r24	; 0x05
    59aa:	3f c0       	rjmp	.+126    	; 0x5a2a <May_UserEntry+0x17a>
	else if (__tmp > 65535)
    59ac:	6f 81       	ldd	r22, Y+7	; 0x07
    59ae:	78 85       	ldd	r23, Y+8	; 0x08
    59b0:	89 85       	ldd	r24, Y+9	; 0x09
    59b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    59b4:	20 e0       	ldi	r18, 0x00	; 0
    59b6:	3f ef       	ldi	r19, 0xFF	; 255
    59b8:	4f e7       	ldi	r20, 0x7F	; 127
    59ba:	57 e4       	ldi	r21, 0x47	; 71
    59bc:	0e 94 29 11 	call	0x2252	; 0x2252 <__gtsf2>
    59c0:	18 16       	cp	r1, r24
    59c2:	4c f5       	brge	.+82     	; 0x5a16 <May_UserEntry+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    59c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    59c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    59ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    59cc:	20 e0       	ldi	r18, 0x00	; 0
    59ce:	30 e0       	ldi	r19, 0x00	; 0
    59d0:	40 e2       	ldi	r20, 0x20	; 32
    59d2:	51 e4       	ldi	r21, 0x41	; 65
    59d4:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    59d8:	dc 01       	movw	r26, r24
    59da:	cb 01       	movw	r24, r22
    59dc:	bc 01       	movw	r22, r24
    59de:	cd 01       	movw	r24, r26
    59e0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    59e4:	dc 01       	movw	r26, r24
    59e6:	cb 01       	movw	r24, r22
    59e8:	9e 83       	std	Y+6, r25	; 0x06
    59ea:	8d 83       	std	Y+5, r24	; 0x05
    59ec:	0f c0       	rjmp	.+30     	; 0x5a0c <May_UserEntry+0x15c>
    59ee:	88 ec       	ldi	r24, 0xC8	; 200
    59f0:	90 e0       	ldi	r25, 0x00	; 0
    59f2:	9c 83       	std	Y+4, r25	; 0x04
    59f4:	8b 83       	std	Y+3, r24	; 0x03
    59f6:	8b 81       	ldd	r24, Y+3	; 0x03
    59f8:	9c 81       	ldd	r25, Y+4	; 0x04
    59fa:	01 97       	sbiw	r24, 0x01	; 1
    59fc:	f1 f7       	brne	.-4      	; 0x59fa <May_UserEntry+0x14a>
    59fe:	9c 83       	std	Y+4, r25	; 0x04
    5a00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a02:	8d 81       	ldd	r24, Y+5	; 0x05
    5a04:	9e 81       	ldd	r25, Y+6	; 0x06
    5a06:	01 97       	sbiw	r24, 0x01	; 1
    5a08:	9e 83       	std	Y+6, r25	; 0x06
    5a0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    5a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    5a10:	00 97       	sbiw	r24, 0x00	; 0
    5a12:	69 f7       	brne	.-38     	; 0x59ee <May_UserEntry+0x13e>
    5a14:	14 c0       	rjmp	.+40     	; 0x5a3e <May_UserEntry+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a16:	6f 81       	ldd	r22, Y+7	; 0x07
    5a18:	78 85       	ldd	r23, Y+8	; 0x08
    5a1a:	89 85       	ldd	r24, Y+9	; 0x09
    5a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a1e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5a22:	dc 01       	movw	r26, r24
    5a24:	cb 01       	movw	r24, r22
    5a26:	9e 83       	std	Y+6, r25	; 0x06
    5a28:	8d 83       	std	Y+5, r24	; 0x05
    5a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    5a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    5a2e:	9a 83       	std	Y+2, r25	; 0x02
    5a30:	89 83       	std	Y+1, r24	; 0x01
    5a32:	89 81       	ldd	r24, Y+1	; 0x01
    5a34:	9a 81       	ldd	r25, Y+2	; 0x02
    5a36:	01 97       	sbiw	r24, 0x01	; 1
    5a38:	f1 f7       	brne	.-4      	; 0x5a36 <May_UserEntry+0x186>
    5a3a:	9a 83       	std	Y+2, r25	; 0x02
    5a3c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1500);
		SERVO_u16SendAngle(0);
    5a3e:	80 e0       	ldi	r24, 0x00	; 0
    5a40:	90 e0       	ldi	r25, 0x00	; 0
    5a42:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <SERVO_u16SendAngle>
	}
}
    5a46:	2e 96       	adiw	r28, 0x0e	; 14
    5a48:	0f b6       	in	r0, 0x3f	; 63
    5a4a:	f8 94       	cli
    5a4c:	de bf       	out	0x3e, r29	; 62
    5a4e:	0f be       	out	0x3f, r0	; 63
    5a50:	cd bf       	out	0x3d, r28	; 61
    5a52:	cf 91       	pop	r28
    5a54:	df 91       	pop	r29
    5a56:	1f 91       	pop	r17
    5a58:	0f 91       	pop	r16
    5a5a:	08 95       	ret

00005a5c <CheckAlaa_sPassWord_ErrorState>:

ERROR_STATE_t CheckAlaa_sPassWord_ErrorState(u8 *ptru8_to_password)
{
    5a5c:	df 93       	push	r29
    5a5e:	cf 93       	push	r28
    5a60:	cd b7       	in	r28, 0x3d	; 61
    5a62:	de b7       	in	r29, 0x3e	; 62
    5a64:	60 97       	sbiw	r28, 0x10	; 16
    5a66:	0f b6       	in	r0, 0x3f	; 63
    5a68:	f8 94       	cli
    5a6a:	de bf       	out	0x3e, r29	; 62
    5a6c:	0f be       	out	0x3f, r0	; 63
    5a6e:	cd bf       	out	0x3d, r28	; 61
    5a70:	98 8b       	std	Y+16, r25	; 0x10
    5a72:	8f 87       	std	Y+15, r24	; 0x0f
	Chcek_Counter = 0 ;
    5a74:	10 92 a2 02 	sts	0x02A2, r1
	Correct_PASS_Flag = 0 ;
    5a78:	10 92 a3 02 	sts	0x02A3, r1
    5a7c:	1e c0       	rjmp	.+60     	; 0x5aba <CheckAlaa_sPassWord_ErrorState+0x5e>
	while(Chcek_Counter <=3)
	{
		if(ALAASPASS[Chcek_Counter] == ptru8_to_password[Chcek_Counter ])
    5a7e:	80 91 a2 02 	lds	r24, 0x02A2
    5a82:	88 2f       	mov	r24, r24
    5a84:	90 e0       	ldi	r25, 0x00	; 0
    5a86:	fc 01       	movw	r30, r24
    5a88:	ef 57       	subi	r30, 0x7F	; 127
    5a8a:	fd 4f       	sbci	r31, 0xFD	; 253
    5a8c:	40 81       	ld	r20, Z
    5a8e:	80 91 a2 02 	lds	r24, 0x02A2
    5a92:	28 2f       	mov	r18, r24
    5a94:	30 e0       	ldi	r19, 0x00	; 0
    5a96:	8f 85       	ldd	r24, Y+15	; 0x0f
    5a98:	98 89       	ldd	r25, Y+16	; 0x10
    5a9a:	fc 01       	movw	r30, r24
    5a9c:	e2 0f       	add	r30, r18
    5a9e:	f3 1f       	adc	r31, r19
    5aa0:	80 81       	ld	r24, Z
    5aa2:	48 17       	cp	r20, r24
    5aa4:	29 f4       	brne	.+10     	; 0x5ab0 <CheckAlaa_sPassWord_ErrorState+0x54>
		{
			Correct_PASS_Flag++;
    5aa6:	80 91 a3 02 	lds	r24, 0x02A3
    5aaa:	8f 5f       	subi	r24, 0xFF	; 255
    5aac:	80 93 a3 02 	sts	0x02A3, r24
		}
		Chcek_Counter++;
    5ab0:	80 91 a2 02 	lds	r24, 0x02A2
    5ab4:	8f 5f       	subi	r24, 0xFF	; 255
    5ab6:	80 93 a2 02 	sts	0x02A2, r24

ERROR_STATE_t CheckAlaa_sPassWord_ErrorState(u8 *ptru8_to_password)
{
	Chcek_Counter = 0 ;
	Correct_PASS_Flag = 0 ;
	while(Chcek_Counter <=3)
    5aba:	80 91 a2 02 	lds	r24, 0x02A2
    5abe:	84 30       	cpi	r24, 0x04	; 4
    5ac0:	f0 f2       	brcs	.-68     	; 0x5a7e <CheckAlaa_sPassWord_ErrorState+0x22>
			Correct_PASS_Flag++;
		}
		Chcek_Counter++;
	}

	if(Correct_PASS_Flag == 4 )
    5ac2:	80 91 a3 02 	lds	r24, 0x02A3
    5ac6:	84 30       	cpi	r24, 0x04	; 4
    5ac8:	61 f4       	brne	.+24     	; 0x5ae2 <CheckAlaa_sPassWord_ErrorState+0x86>
	{
		LCD_voidSetposition(2,1);
    5aca:	82 e0       	ldi	r24, 0x02	; 2
    5acc:	61 e0       	ldi	r22, 0x01	; 1
    5ace:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
		LCD_voidSendString((u8*)"Hello ALAA");
    5ad2:	87 ed       	ldi	r24, 0xD7	; 215
    5ad4:	90 e0       	ldi	r25, 0x00	; 0
    5ad6:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
		local_state = STD_TYPE_OK;
    5ada:	81 e0       	ldi	r24, 0x01	; 1
    5adc:	80 93 a9 02 	sts	0x02A9, r24
    5ae0:	86 c0       	rjmp	.+268    	; 0x5bee <CheckAlaa_sPassWord_ErrorState+0x192>
	}
	else
	{
		LCD_voidSetposition(2,1);
    5ae2:	82 e0       	ldi	r24, 0x02	; 2
    5ae4:	61 e0       	ldi	r22, 0x01	; 1
    5ae6:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
		LCD_voidSendString((u8*)"Wrong Pass");
    5aea:	8a e6       	ldi	r24, 0x6A	; 106
    5aec:	90 e0       	ldi	r25, 0x00	; 0
    5aee:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
    5af2:	80 e0       	ldi	r24, 0x00	; 0
    5af4:	90 e0       	ldi	r25, 0x00	; 0
    5af6:	aa ef       	ldi	r26, 0xFA	; 250
    5af8:	b3 e4       	ldi	r27, 0x43	; 67
    5afa:	8b 87       	std	Y+11, r24	; 0x0b
    5afc:	9c 87       	std	Y+12, r25	; 0x0c
    5afe:	ad 87       	std	Y+13, r26	; 0x0d
    5b00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b02:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b04:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b06:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b08:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b0a:	20 e0       	ldi	r18, 0x00	; 0
    5b0c:	30 e0       	ldi	r19, 0x00	; 0
    5b0e:	4a ef       	ldi	r20, 0xFA	; 250
    5b10:	54 e4       	ldi	r21, 0x44	; 68
    5b12:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5b16:	dc 01       	movw	r26, r24
    5b18:	cb 01       	movw	r24, r22
    5b1a:	8f 83       	std	Y+7, r24	; 0x07
    5b1c:	98 87       	std	Y+8, r25	; 0x08
    5b1e:	a9 87       	std	Y+9, r26	; 0x09
    5b20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5b22:	6f 81       	ldd	r22, Y+7	; 0x07
    5b24:	78 85       	ldd	r23, Y+8	; 0x08
    5b26:	89 85       	ldd	r24, Y+9	; 0x09
    5b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b2a:	20 e0       	ldi	r18, 0x00	; 0
    5b2c:	30 e0       	ldi	r19, 0x00	; 0
    5b2e:	40 e8       	ldi	r20, 0x80	; 128
    5b30:	5f e3       	ldi	r21, 0x3F	; 63
    5b32:	0e 94 89 11 	call	0x2312	; 0x2312 <__ltsf2>
    5b36:	88 23       	and	r24, r24
    5b38:	2c f4       	brge	.+10     	; 0x5b44 <CheckAlaa_sPassWord_ErrorState+0xe8>
		__ticks = 1;
    5b3a:	81 e0       	ldi	r24, 0x01	; 1
    5b3c:	90 e0       	ldi	r25, 0x00	; 0
    5b3e:	9e 83       	std	Y+6, r25	; 0x06
    5b40:	8d 83       	std	Y+5, r24	; 0x05
    5b42:	3f c0       	rjmp	.+126    	; 0x5bc2 <CheckAlaa_sPassWord_ErrorState+0x166>
	else if (__tmp > 65535)
    5b44:	6f 81       	ldd	r22, Y+7	; 0x07
    5b46:	78 85       	ldd	r23, Y+8	; 0x08
    5b48:	89 85       	ldd	r24, Y+9	; 0x09
    5b4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b4c:	20 e0       	ldi	r18, 0x00	; 0
    5b4e:	3f ef       	ldi	r19, 0xFF	; 255
    5b50:	4f e7       	ldi	r20, 0x7F	; 127
    5b52:	57 e4       	ldi	r21, 0x47	; 71
    5b54:	0e 94 29 11 	call	0x2252	; 0x2252 <__gtsf2>
    5b58:	18 16       	cp	r1, r24
    5b5a:	4c f5       	brge	.+82     	; 0x5bae <CheckAlaa_sPassWord_ErrorState+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b60:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b62:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b64:	20 e0       	ldi	r18, 0x00	; 0
    5b66:	30 e0       	ldi	r19, 0x00	; 0
    5b68:	40 e2       	ldi	r20, 0x20	; 32
    5b6a:	51 e4       	ldi	r21, 0x41	; 65
    5b6c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5b70:	dc 01       	movw	r26, r24
    5b72:	cb 01       	movw	r24, r22
    5b74:	bc 01       	movw	r22, r24
    5b76:	cd 01       	movw	r24, r26
    5b78:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5b7c:	dc 01       	movw	r26, r24
    5b7e:	cb 01       	movw	r24, r22
    5b80:	9e 83       	std	Y+6, r25	; 0x06
    5b82:	8d 83       	std	Y+5, r24	; 0x05
    5b84:	0f c0       	rjmp	.+30     	; 0x5ba4 <CheckAlaa_sPassWord_ErrorState+0x148>
    5b86:	88 ec       	ldi	r24, 0xC8	; 200
    5b88:	90 e0       	ldi	r25, 0x00	; 0
    5b8a:	9c 83       	std	Y+4, r25	; 0x04
    5b8c:	8b 83       	std	Y+3, r24	; 0x03
    5b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    5b90:	9c 81       	ldd	r25, Y+4	; 0x04
    5b92:	01 97       	sbiw	r24, 0x01	; 1
    5b94:	f1 f7       	brne	.-4      	; 0x5b92 <CheckAlaa_sPassWord_ErrorState+0x136>
    5b96:	9c 83       	std	Y+4, r25	; 0x04
    5b98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    5b9c:	9e 81       	ldd	r25, Y+6	; 0x06
    5b9e:	01 97       	sbiw	r24, 0x01	; 1
    5ba0:	9e 83       	std	Y+6, r25	; 0x06
    5ba2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    5ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    5ba8:	00 97       	sbiw	r24, 0x00	; 0
    5baa:	69 f7       	brne	.-38     	; 0x5b86 <CheckAlaa_sPassWord_ErrorState+0x12a>
    5bac:	14 c0       	rjmp	.+40     	; 0x5bd6 <CheckAlaa_sPassWord_ErrorState+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bae:	6f 81       	ldd	r22, Y+7	; 0x07
    5bb0:	78 85       	ldd	r23, Y+8	; 0x08
    5bb2:	89 85       	ldd	r24, Y+9	; 0x09
    5bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bb6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5bba:	dc 01       	movw	r26, r24
    5bbc:	cb 01       	movw	r24, r22
    5bbe:	9e 83       	std	Y+6, r25	; 0x06
    5bc0:	8d 83       	std	Y+5, r24	; 0x05
    5bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    5bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    5bc6:	9a 83       	std	Y+2, r25	; 0x02
    5bc8:	89 83       	std	Y+1, r24	; 0x01
    5bca:	89 81       	ldd	r24, Y+1	; 0x01
    5bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    5bce:	01 97       	sbiw	r24, 0x01	; 1
    5bd0:	f1 f7       	brne	.-4      	; 0x5bce <CheckAlaa_sPassWord_ErrorState+0x172>
    5bd2:	9a 83       	std	Y+2, r25	; 0x02
    5bd4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		LCD_voidDisplay_CLR();
    5bd6:	0e 94 26 28 	call	0x504c	; 0x504c <LCD_voidDisplay_CLR>
		local_state = STD_TYPE_NOTOK;
    5bda:	10 92 a9 02 	sts	0x02A9, r1
		LCD_voidSetposition(2,1);
    5bde:	82 e0       	ldi	r24, 0x02	; 2
    5be0:	61 e0       	ldi	r22, 0x01	; 1
    5be2:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
		LCD_voidSendString((u8*)"Try Again");
    5be6:	85 e7       	ldi	r24, 0x75	; 117
    5be8:	90 e0       	ldi	r25, 0x00	; 0
    5bea:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
	}
	return local_state ;
    5bee:	80 91 a9 02 	lds	r24, 0x02A9
}
    5bf2:	60 96       	adiw	r28, 0x10	; 16
    5bf4:	0f b6       	in	r0, 0x3f	; 63
    5bf6:	f8 94       	cli
    5bf8:	de bf       	out	0x3e, r29	; 62
    5bfa:	0f be       	out	0x3f, r0	; 63
    5bfc:	cd bf       	out	0x3d, r28	; 61
    5bfe:	cf 91       	pop	r28
    5c00:	df 91       	pop	r29
    5c02:	08 95       	ret

00005c04 <Alaa_UserEntry>:
void Alaa_UserEntry(void)
{
    5c04:	0f 93       	push	r16
    5c06:	1f 93       	push	r17
    5c08:	df 93       	push	r29
    5c0a:	cf 93       	push	r28
    5c0c:	cd b7       	in	r28, 0x3d	; 61
    5c0e:	de b7       	in	r29, 0x3e	; 62
    5c10:	2e 97       	sbiw	r28, 0x0e	; 14
    5c12:	0f b6       	in	r0, 0x3f	; 63
    5c14:	f8 94       	cli
    5c16:	de bf       	out	0x3e, r29	; 62
    5c18:	0f be       	out	0x3f, r0	; 63
    5c1a:	cd bf       	out	0x3d, r28	; 61


	static ERROR_STATE_t Local_Error_State =STD_TYPE_NOTOK ;
	LCD_voidDisplay_CLR();
    5c1c:	0e 94 26 28 	call	0x504c	; 0x504c <LCD_voidDisplay_CLR>
	LCD_voidSetposition(1,1);
    5c20:	81 e0       	ldi	r24, 0x01	; 1
    5c22:	61 e0       	ldi	r22, 0x01	; 1
    5c24:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
	LCD_voidSendString((u8*)"Enter ALAA's Pass");
    5c28:	82 ee       	ldi	r24, 0xE2	; 226
    5c2a:	90 e0       	ldi	r25, 0x00	; 0
    5c2c:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
    5c30:	24 c0       	rjmp	.+72     	; 0x5c7a <Alaa_UserEntry+0x76>
	while(Attempts<3)
	{
		while(passcounter <=3 )
		{
			pass[passcounter] = UART_voidReceiveData_Sync();
    5c32:	80 91 a1 02 	lds	r24, 0x02A1
    5c36:	08 2f       	mov	r16, r24
    5c38:	10 e0       	ldi	r17, 0x00	; 0
    5c3a:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <UART_voidReceiveData_Sync>
    5c3e:	f8 01       	movw	r30, r16
    5c40:	e7 57       	subi	r30, 0x77	; 119
    5c42:	fd 4f       	sbci	r31, 0xFD	; 253
    5c44:	80 83       	st	Z, r24
			passcounter++;
    5c46:	80 91 a1 02 	lds	r24, 0x02A1
    5c4a:	8f 5f       	subi	r24, 0xFF	; 255
    5c4c:	80 93 a1 02 	sts	0x02A1, r24
	LCD_voidDisplay_CLR();
	LCD_voidSetposition(1,1);
	LCD_voidSendString((u8*)"Enter ALAA's Pass");
	while(Attempts<3)
	{
		while(passcounter <=3 )
    5c50:	80 91 a1 02 	lds	r24, 0x02A1
    5c54:	84 30       	cpi	r24, 0x04	; 4
    5c56:	68 f3       	brcs	.-38     	; 0x5c32 <Alaa_UserEntry+0x2e>
		{
			pass[passcounter] = UART_voidReceiveData_Sync();
			passcounter++;
		}
		passcounter = 0;
    5c58:	10 92 a1 02 	sts	0x02A1, r1
		Local_Error_State = CheckAlaa_sPassWord_ErrorState(pass);
    5c5c:	89 e8       	ldi	r24, 0x89	; 137
    5c5e:	92 e0       	ldi	r25, 0x02	; 2
    5c60:	0e 94 2e 2d 	call	0x5a5c	; 0x5a5c <CheckAlaa_sPassWord_ErrorState>
    5c64:	80 93 a7 02 	sts	0x02A7, r24
		if(Local_Error_State == STD_TYPE_OK)
    5c68:	80 91 a7 02 	lds	r24, 0x02A7
    5c6c:	81 30       	cpi	r24, 0x01	; 1
    5c6e:	49 f0       	breq	.+18     	; 0x5c82 <Alaa_UserEntry+0x7e>
		{
			break;
		}
		Attempts++;
    5c70:	80 91 a0 02 	lds	r24, 0x02A0
    5c74:	8f 5f       	subi	r24, 0xFF	; 255
    5c76:	80 93 a0 02 	sts	0x02A0, r24

	static ERROR_STATE_t Local_Error_State =STD_TYPE_NOTOK ;
	LCD_voidDisplay_CLR();
	LCD_voidSetposition(1,1);
	LCD_voidSendString((u8*)"Enter ALAA's Pass");
	while(Attempts<3)
    5c7a:	80 91 a0 02 	lds	r24, 0x02A0
    5c7e:	83 30       	cpi	r24, 0x03	; 3
    5c80:	38 f3       	brcs	.-50     	; 0x5c50 <Alaa_UserEntry+0x4c>
		{
			break;
		}
		Attempts++;
	}
	if(Attempts == 3)
    5c82:	80 91 a0 02 	lds	r24, 0x02A0
    5c86:	83 30       	cpi	r24, 0x03	; 3
    5c88:	71 f4       	brne	.+28     	; 0x5ca6 <Alaa_UserEntry+0xa2>
	{
		LCD_voidSetposition(2,1);
    5c8a:	82 e0       	ldi	r24, 0x02	; 2
    5c8c:	61 e0       	ldi	r22, 0x01	; 1
    5c8e:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
		LCD_voidSendString((u8*)"No More Attempts");
    5c92:	80 e9       	ldi	r24, 0x90	; 144
    5c94:	90 e0       	ldi	r25, 0x00	; 0
    5c96:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
		while(1)
		{
			DIO_voidSetPinValue(DIO_PORTA , DIO_PIN6 ,DIO_HIGH );//ALARM
    5c9a:	80 e0       	ldi	r24, 0x00	; 0
    5c9c:	66 e0       	ldi	r22, 0x06	; 6
    5c9e:	41 e0       	ldi	r20, 0x01	; 1
    5ca0:	0e 94 86 1a 	call	0x350c	; 0x350c <DIO_voidSetPinValue>
    5ca4:	fa cf       	rjmp	.-12     	; 0x5c9a <Alaa_UserEntry+0x96>
		}
	}
	else
	{
		SERVO_u16SendAngle(90);
    5ca6:	8a e5       	ldi	r24, 0x5A	; 90
    5ca8:	90 e0       	ldi	r25, 0x00	; 0
    5caa:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <SERVO_u16SendAngle>
    5cae:	80 e0       	ldi	r24, 0x00	; 0
    5cb0:	90 e8       	ldi	r25, 0x80	; 128
    5cb2:	ab eb       	ldi	r26, 0xBB	; 187
    5cb4:	b4 e4       	ldi	r27, 0x44	; 68
    5cb6:	8b 87       	std	Y+11, r24	; 0x0b
    5cb8:	9c 87       	std	Y+12, r25	; 0x0c
    5cba:	ad 87       	std	Y+13, r26	; 0x0d
    5cbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5cbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    5cc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    5cc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    5cc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    5cc6:	20 e0       	ldi	r18, 0x00	; 0
    5cc8:	30 e0       	ldi	r19, 0x00	; 0
    5cca:	4a ef       	ldi	r20, 0xFA	; 250
    5ccc:	54 e4       	ldi	r21, 0x44	; 68
    5cce:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5cd2:	dc 01       	movw	r26, r24
    5cd4:	cb 01       	movw	r24, r22
    5cd6:	8f 83       	std	Y+7, r24	; 0x07
    5cd8:	98 87       	std	Y+8, r25	; 0x08
    5cda:	a9 87       	std	Y+9, r26	; 0x09
    5cdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5cde:	6f 81       	ldd	r22, Y+7	; 0x07
    5ce0:	78 85       	ldd	r23, Y+8	; 0x08
    5ce2:	89 85       	ldd	r24, Y+9	; 0x09
    5ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ce6:	20 e0       	ldi	r18, 0x00	; 0
    5ce8:	30 e0       	ldi	r19, 0x00	; 0
    5cea:	40 e8       	ldi	r20, 0x80	; 128
    5cec:	5f e3       	ldi	r21, 0x3F	; 63
    5cee:	0e 94 89 11 	call	0x2312	; 0x2312 <__ltsf2>
    5cf2:	88 23       	and	r24, r24
    5cf4:	2c f4       	brge	.+10     	; 0x5d00 <Alaa_UserEntry+0xfc>
		__ticks = 1;
    5cf6:	81 e0       	ldi	r24, 0x01	; 1
    5cf8:	90 e0       	ldi	r25, 0x00	; 0
    5cfa:	9e 83       	std	Y+6, r25	; 0x06
    5cfc:	8d 83       	std	Y+5, r24	; 0x05
    5cfe:	3f c0       	rjmp	.+126    	; 0x5d7e <Alaa_UserEntry+0x17a>
	else if (__tmp > 65535)
    5d00:	6f 81       	ldd	r22, Y+7	; 0x07
    5d02:	78 85       	ldd	r23, Y+8	; 0x08
    5d04:	89 85       	ldd	r24, Y+9	; 0x09
    5d06:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d08:	20 e0       	ldi	r18, 0x00	; 0
    5d0a:	3f ef       	ldi	r19, 0xFF	; 255
    5d0c:	4f e7       	ldi	r20, 0x7F	; 127
    5d0e:	57 e4       	ldi	r21, 0x47	; 71
    5d10:	0e 94 29 11 	call	0x2252	; 0x2252 <__gtsf2>
    5d14:	18 16       	cp	r1, r24
    5d16:	4c f5       	brge	.+82     	; 0x5d6a <Alaa_UserEntry+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d18:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d20:	20 e0       	ldi	r18, 0x00	; 0
    5d22:	30 e0       	ldi	r19, 0x00	; 0
    5d24:	40 e2       	ldi	r20, 0x20	; 32
    5d26:	51 e4       	ldi	r21, 0x41	; 65
    5d28:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5d2c:	dc 01       	movw	r26, r24
    5d2e:	cb 01       	movw	r24, r22
    5d30:	bc 01       	movw	r22, r24
    5d32:	cd 01       	movw	r24, r26
    5d34:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5d38:	dc 01       	movw	r26, r24
    5d3a:	cb 01       	movw	r24, r22
    5d3c:	9e 83       	std	Y+6, r25	; 0x06
    5d3e:	8d 83       	std	Y+5, r24	; 0x05
    5d40:	0f c0       	rjmp	.+30     	; 0x5d60 <Alaa_UserEntry+0x15c>
    5d42:	88 ec       	ldi	r24, 0xC8	; 200
    5d44:	90 e0       	ldi	r25, 0x00	; 0
    5d46:	9c 83       	std	Y+4, r25	; 0x04
    5d48:	8b 83       	std	Y+3, r24	; 0x03
    5d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    5d4c:	9c 81       	ldd	r25, Y+4	; 0x04
    5d4e:	01 97       	sbiw	r24, 0x01	; 1
    5d50:	f1 f7       	brne	.-4      	; 0x5d4e <Alaa_UserEntry+0x14a>
    5d52:	9c 83       	std	Y+4, r25	; 0x04
    5d54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d56:	8d 81       	ldd	r24, Y+5	; 0x05
    5d58:	9e 81       	ldd	r25, Y+6	; 0x06
    5d5a:	01 97       	sbiw	r24, 0x01	; 1
    5d5c:	9e 83       	std	Y+6, r25	; 0x06
    5d5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d60:	8d 81       	ldd	r24, Y+5	; 0x05
    5d62:	9e 81       	ldd	r25, Y+6	; 0x06
    5d64:	00 97       	sbiw	r24, 0x00	; 0
    5d66:	69 f7       	brne	.-38     	; 0x5d42 <Alaa_UserEntry+0x13e>
    5d68:	14 c0       	rjmp	.+40     	; 0x5d92 <Alaa_UserEntry+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d6a:	6f 81       	ldd	r22, Y+7	; 0x07
    5d6c:	78 85       	ldd	r23, Y+8	; 0x08
    5d6e:	89 85       	ldd	r24, Y+9	; 0x09
    5d70:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d72:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5d76:	dc 01       	movw	r26, r24
    5d78:	cb 01       	movw	r24, r22
    5d7a:	9e 83       	std	Y+6, r25	; 0x06
    5d7c:	8d 83       	std	Y+5, r24	; 0x05
    5d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    5d80:	9e 81       	ldd	r25, Y+6	; 0x06
    5d82:	9a 83       	std	Y+2, r25	; 0x02
    5d84:	89 83       	std	Y+1, r24	; 0x01
    5d86:	89 81       	ldd	r24, Y+1	; 0x01
    5d88:	9a 81       	ldd	r25, Y+2	; 0x02
    5d8a:	01 97       	sbiw	r24, 0x01	; 1
    5d8c:	f1 f7       	brne	.-4      	; 0x5d8a <Alaa_UserEntry+0x186>
    5d8e:	9a 83       	std	Y+2, r25	; 0x02
    5d90:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1500);
		SERVO_u16SendAngle(0);
    5d92:	80 e0       	ldi	r24, 0x00	; 0
    5d94:	90 e0       	ldi	r25, 0x00	; 0
    5d96:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <SERVO_u16SendAngle>
	}
}
    5d9a:	2e 96       	adiw	r28, 0x0e	; 14
    5d9c:	0f b6       	in	r0, 0x3f	; 63
    5d9e:	f8 94       	cli
    5da0:	de bf       	out	0x3e, r29	; 62
    5da2:	0f be       	out	0x3f, r0	; 63
    5da4:	cd bf       	out	0x3d, r28	; 61
    5da6:	cf 91       	pop	r28
    5da8:	df 91       	pop	r29
    5daa:	1f 91       	pop	r17
    5dac:	0f 91       	pop	r16
    5dae:	08 95       	ret

00005db0 <CheckEmad_sPassWord_ErrorState>:

ERROR_STATE_t CheckEmad_sPassWord_ErrorState(u8 *ptru8_to_password)
{
    5db0:	df 93       	push	r29
    5db2:	cf 93       	push	r28
    5db4:	cd b7       	in	r28, 0x3d	; 61
    5db6:	de b7       	in	r29, 0x3e	; 62
    5db8:	60 97       	sbiw	r28, 0x10	; 16
    5dba:	0f b6       	in	r0, 0x3f	; 63
    5dbc:	f8 94       	cli
    5dbe:	de bf       	out	0x3e, r29	; 62
    5dc0:	0f be       	out	0x3f, r0	; 63
    5dc2:	cd bf       	out	0x3d, r28	; 61
    5dc4:	98 8b       	std	Y+16, r25	; 0x10
    5dc6:	8f 87       	std	Y+15, r24	; 0x0f

	Chcek_Counter = 0 ;
    5dc8:	10 92 a2 02 	sts	0x02A2, r1
	Correct_PASS_Flag = 0 ;
    5dcc:	10 92 a3 02 	sts	0x02A3, r1
    5dd0:	1e c0       	rjmp	.+60     	; 0x5e0e <CheckEmad_sPassWord_ErrorState+0x5e>
	while(Chcek_Counter <=3)
	{
		if(EMADSPASS[Chcek_Counter] == ptru8_to_password[Chcek_Counter ])
    5dd2:	80 91 a2 02 	lds	r24, 0x02A2
    5dd6:	88 2f       	mov	r24, r24
    5dd8:	90 e0       	ldi	r25, 0x00	; 0
    5dda:	fc 01       	movw	r30, r24
    5ddc:	eb 57       	subi	r30, 0x7B	; 123
    5dde:	fd 4f       	sbci	r31, 0xFD	; 253
    5de0:	40 81       	ld	r20, Z
    5de2:	80 91 a2 02 	lds	r24, 0x02A2
    5de6:	28 2f       	mov	r18, r24
    5de8:	30 e0       	ldi	r19, 0x00	; 0
    5dea:	8f 85       	ldd	r24, Y+15	; 0x0f
    5dec:	98 89       	ldd	r25, Y+16	; 0x10
    5dee:	fc 01       	movw	r30, r24
    5df0:	e2 0f       	add	r30, r18
    5df2:	f3 1f       	adc	r31, r19
    5df4:	80 81       	ld	r24, Z
    5df6:	48 17       	cp	r20, r24
    5df8:	29 f4       	brne	.+10     	; 0x5e04 <CheckEmad_sPassWord_ErrorState+0x54>
		{
			Correct_PASS_Flag++;
    5dfa:	80 91 a3 02 	lds	r24, 0x02A3
    5dfe:	8f 5f       	subi	r24, 0xFF	; 255
    5e00:	80 93 a3 02 	sts	0x02A3, r24
		}
		Chcek_Counter++;
    5e04:	80 91 a2 02 	lds	r24, 0x02A2
    5e08:	8f 5f       	subi	r24, 0xFF	; 255
    5e0a:	80 93 a2 02 	sts	0x02A2, r24
ERROR_STATE_t CheckEmad_sPassWord_ErrorState(u8 *ptru8_to_password)
{

	Chcek_Counter = 0 ;
	Correct_PASS_Flag = 0 ;
	while(Chcek_Counter <=3)
    5e0e:	80 91 a2 02 	lds	r24, 0x02A2
    5e12:	84 30       	cpi	r24, 0x04	; 4
    5e14:	f0 f2       	brcs	.-68     	; 0x5dd2 <CheckEmad_sPassWord_ErrorState+0x22>
			Correct_PASS_Flag++;
		}
		Chcek_Counter++;
	}

	if(Correct_PASS_Flag == 4 )
    5e16:	80 91 a3 02 	lds	r24, 0x02A3
    5e1a:	84 30       	cpi	r24, 0x04	; 4
    5e1c:	61 f4       	brne	.+24     	; 0x5e36 <CheckEmad_sPassWord_ErrorState+0x86>
	{
		LCD_voidSetposition(2,1);
    5e1e:	82 e0       	ldi	r24, 0x02	; 2
    5e20:	61 e0       	ldi	r22, 0x01	; 1
    5e22:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
		LCD_voidSendString((u8*)"Hello EMAD");
    5e26:	84 ef       	ldi	r24, 0xF4	; 244
    5e28:	90 e0       	ldi	r25, 0x00	; 0
    5e2a:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
		local_state = STD_TYPE_OK;
    5e2e:	81 e0       	ldi	r24, 0x01	; 1
    5e30:	80 93 a9 02 	sts	0x02A9, r24
    5e34:	86 c0       	rjmp	.+268    	; 0x5f42 <CheckEmad_sPassWord_ErrorState+0x192>
	}
	else
	{
		LCD_voidSetposition(2,1);
    5e36:	82 e0       	ldi	r24, 0x02	; 2
    5e38:	61 e0       	ldi	r22, 0x01	; 1
    5e3a:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
		LCD_voidSendString((u8*)"Wrong Pass");
    5e3e:	8a e6       	ldi	r24, 0x6A	; 106
    5e40:	90 e0       	ldi	r25, 0x00	; 0
    5e42:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
    5e46:	80 e0       	ldi	r24, 0x00	; 0
    5e48:	90 e0       	ldi	r25, 0x00	; 0
    5e4a:	aa ef       	ldi	r26, 0xFA	; 250
    5e4c:	b3 e4       	ldi	r27, 0x43	; 67
    5e4e:	8b 87       	std	Y+11, r24	; 0x0b
    5e50:	9c 87       	std	Y+12, r25	; 0x0c
    5e52:	ad 87       	std	Y+13, r26	; 0x0d
    5e54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e56:	6b 85       	ldd	r22, Y+11	; 0x0b
    5e58:	7c 85       	ldd	r23, Y+12	; 0x0c
    5e5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e5e:	20 e0       	ldi	r18, 0x00	; 0
    5e60:	30 e0       	ldi	r19, 0x00	; 0
    5e62:	4a ef       	ldi	r20, 0xFA	; 250
    5e64:	54 e4       	ldi	r21, 0x44	; 68
    5e66:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5e6a:	dc 01       	movw	r26, r24
    5e6c:	cb 01       	movw	r24, r22
    5e6e:	8f 83       	std	Y+7, r24	; 0x07
    5e70:	98 87       	std	Y+8, r25	; 0x08
    5e72:	a9 87       	std	Y+9, r26	; 0x09
    5e74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5e76:	6f 81       	ldd	r22, Y+7	; 0x07
    5e78:	78 85       	ldd	r23, Y+8	; 0x08
    5e7a:	89 85       	ldd	r24, Y+9	; 0x09
    5e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e7e:	20 e0       	ldi	r18, 0x00	; 0
    5e80:	30 e0       	ldi	r19, 0x00	; 0
    5e82:	40 e8       	ldi	r20, 0x80	; 128
    5e84:	5f e3       	ldi	r21, 0x3F	; 63
    5e86:	0e 94 89 11 	call	0x2312	; 0x2312 <__ltsf2>
    5e8a:	88 23       	and	r24, r24
    5e8c:	2c f4       	brge	.+10     	; 0x5e98 <CheckEmad_sPassWord_ErrorState+0xe8>
		__ticks = 1;
    5e8e:	81 e0       	ldi	r24, 0x01	; 1
    5e90:	90 e0       	ldi	r25, 0x00	; 0
    5e92:	9e 83       	std	Y+6, r25	; 0x06
    5e94:	8d 83       	std	Y+5, r24	; 0x05
    5e96:	3f c0       	rjmp	.+126    	; 0x5f16 <CheckEmad_sPassWord_ErrorState+0x166>
	else if (__tmp > 65535)
    5e98:	6f 81       	ldd	r22, Y+7	; 0x07
    5e9a:	78 85       	ldd	r23, Y+8	; 0x08
    5e9c:	89 85       	ldd	r24, Y+9	; 0x09
    5e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ea0:	20 e0       	ldi	r18, 0x00	; 0
    5ea2:	3f ef       	ldi	r19, 0xFF	; 255
    5ea4:	4f e7       	ldi	r20, 0x7F	; 127
    5ea6:	57 e4       	ldi	r21, 0x47	; 71
    5ea8:	0e 94 29 11 	call	0x2252	; 0x2252 <__gtsf2>
    5eac:	18 16       	cp	r1, r24
    5eae:	4c f5       	brge	.+82     	; 0x5f02 <CheckEmad_sPassWord_ErrorState+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5eb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    5eb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    5eb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    5eb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    5eb8:	20 e0       	ldi	r18, 0x00	; 0
    5eba:	30 e0       	ldi	r19, 0x00	; 0
    5ebc:	40 e2       	ldi	r20, 0x20	; 32
    5ebe:	51 e4       	ldi	r21, 0x41	; 65
    5ec0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5ec4:	dc 01       	movw	r26, r24
    5ec6:	cb 01       	movw	r24, r22
    5ec8:	bc 01       	movw	r22, r24
    5eca:	cd 01       	movw	r24, r26
    5ecc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5ed0:	dc 01       	movw	r26, r24
    5ed2:	cb 01       	movw	r24, r22
    5ed4:	9e 83       	std	Y+6, r25	; 0x06
    5ed6:	8d 83       	std	Y+5, r24	; 0x05
    5ed8:	0f c0       	rjmp	.+30     	; 0x5ef8 <CheckEmad_sPassWord_ErrorState+0x148>
    5eda:	88 ec       	ldi	r24, 0xC8	; 200
    5edc:	90 e0       	ldi	r25, 0x00	; 0
    5ede:	9c 83       	std	Y+4, r25	; 0x04
    5ee0:	8b 83       	std	Y+3, r24	; 0x03
    5ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    5ee4:	9c 81       	ldd	r25, Y+4	; 0x04
    5ee6:	01 97       	sbiw	r24, 0x01	; 1
    5ee8:	f1 f7       	brne	.-4      	; 0x5ee6 <CheckEmad_sPassWord_ErrorState+0x136>
    5eea:	9c 83       	std	Y+4, r25	; 0x04
    5eec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5eee:	8d 81       	ldd	r24, Y+5	; 0x05
    5ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    5ef2:	01 97       	sbiw	r24, 0x01	; 1
    5ef4:	9e 83       	std	Y+6, r25	; 0x06
    5ef6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    5efa:	9e 81       	ldd	r25, Y+6	; 0x06
    5efc:	00 97       	sbiw	r24, 0x00	; 0
    5efe:	69 f7       	brne	.-38     	; 0x5eda <CheckEmad_sPassWord_ErrorState+0x12a>
    5f00:	14 c0       	rjmp	.+40     	; 0x5f2a <CheckEmad_sPassWord_ErrorState+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f02:	6f 81       	ldd	r22, Y+7	; 0x07
    5f04:	78 85       	ldd	r23, Y+8	; 0x08
    5f06:	89 85       	ldd	r24, Y+9	; 0x09
    5f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f0a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5f0e:	dc 01       	movw	r26, r24
    5f10:	cb 01       	movw	r24, r22
    5f12:	9e 83       	std	Y+6, r25	; 0x06
    5f14:	8d 83       	std	Y+5, r24	; 0x05
    5f16:	8d 81       	ldd	r24, Y+5	; 0x05
    5f18:	9e 81       	ldd	r25, Y+6	; 0x06
    5f1a:	9a 83       	std	Y+2, r25	; 0x02
    5f1c:	89 83       	std	Y+1, r24	; 0x01
    5f1e:	89 81       	ldd	r24, Y+1	; 0x01
    5f20:	9a 81       	ldd	r25, Y+2	; 0x02
    5f22:	01 97       	sbiw	r24, 0x01	; 1
    5f24:	f1 f7       	brne	.-4      	; 0x5f22 <CheckEmad_sPassWord_ErrorState+0x172>
    5f26:	9a 83       	std	Y+2, r25	; 0x02
    5f28:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		LCD_voidDisplay_CLR();
    5f2a:	0e 94 26 28 	call	0x504c	; 0x504c <LCD_voidDisplay_CLR>
		local_state = STD_TYPE_NOTOK;
    5f2e:	10 92 a9 02 	sts	0x02A9, r1
		LCD_voidSetposition(2,1);
    5f32:	82 e0       	ldi	r24, 0x02	; 2
    5f34:	61 e0       	ldi	r22, 0x01	; 1
    5f36:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
		LCD_voidSendString((u8*)"Try Again");
    5f3a:	85 e7       	ldi	r24, 0x75	; 117
    5f3c:	90 e0       	ldi	r25, 0x00	; 0
    5f3e:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
	}
	return local_state ;
    5f42:	80 91 a9 02 	lds	r24, 0x02A9
}
    5f46:	60 96       	adiw	r28, 0x10	; 16
    5f48:	0f b6       	in	r0, 0x3f	; 63
    5f4a:	f8 94       	cli
    5f4c:	de bf       	out	0x3e, r29	; 62
    5f4e:	0f be       	out	0x3f, r0	; 63
    5f50:	cd bf       	out	0x3d, r28	; 61
    5f52:	cf 91       	pop	r28
    5f54:	df 91       	pop	r29
    5f56:	08 95       	ret

00005f58 <Emad_UserEntry>:
void Emad_UserEntry(void)
{
    5f58:	0f 93       	push	r16
    5f5a:	1f 93       	push	r17
    5f5c:	df 93       	push	r29
    5f5e:	cf 93       	push	r28
    5f60:	cd b7       	in	r28, 0x3d	; 61
    5f62:	de b7       	in	r29, 0x3e	; 62
    5f64:	2e 97       	sbiw	r28, 0x0e	; 14
    5f66:	0f b6       	in	r0, 0x3f	; 63
    5f68:	f8 94       	cli
    5f6a:	de bf       	out	0x3e, r29	; 62
    5f6c:	0f be       	out	0x3f, r0	; 63
    5f6e:	cd bf       	out	0x3d, r28	; 61


	static ERROR_STATE_t Local_Error_State =STD_TYPE_NOTOK ;
	LCD_voidDisplay_CLR();
    5f70:	0e 94 26 28 	call	0x504c	; 0x504c <LCD_voidDisplay_CLR>
	LCD_voidSetposition(1,1);
    5f74:	81 e0       	ldi	r24, 0x01	; 1
    5f76:	61 e0       	ldi	r22, 0x01	; 1
    5f78:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
	LCD_voidSendString((u8*)"Enter EMAD's Pass");
    5f7c:	8f ef       	ldi	r24, 0xFF	; 255
    5f7e:	90 e0       	ldi	r25, 0x00	; 0
    5f80:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
    5f84:	24 c0       	rjmp	.+72     	; 0x5fce <Emad_UserEntry+0x76>
	while(Attempts<3)
	{
		while(passcounter <=3 )
		{
			pass[passcounter] = UART_voidReceiveData_Sync();
    5f86:	80 91 a1 02 	lds	r24, 0x02A1
    5f8a:	08 2f       	mov	r16, r24
    5f8c:	10 e0       	ldi	r17, 0x00	; 0
    5f8e:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <UART_voidReceiveData_Sync>
    5f92:	f8 01       	movw	r30, r16
    5f94:	e7 57       	subi	r30, 0x77	; 119
    5f96:	fd 4f       	sbci	r31, 0xFD	; 253
    5f98:	80 83       	st	Z, r24
			passcounter++;
    5f9a:	80 91 a1 02 	lds	r24, 0x02A1
    5f9e:	8f 5f       	subi	r24, 0xFF	; 255
    5fa0:	80 93 a1 02 	sts	0x02A1, r24
	LCD_voidDisplay_CLR();
	LCD_voidSetposition(1,1);
	LCD_voidSendString((u8*)"Enter EMAD's Pass");
	while(Attempts<3)
	{
		while(passcounter <=3 )
    5fa4:	80 91 a1 02 	lds	r24, 0x02A1
    5fa8:	84 30       	cpi	r24, 0x04	; 4
    5faa:	68 f3       	brcs	.-38     	; 0x5f86 <Emad_UserEntry+0x2e>
		{
			pass[passcounter] = UART_voidReceiveData_Sync();
			passcounter++;
		}
		passcounter = 0;
    5fac:	10 92 a1 02 	sts	0x02A1, r1
		Local_Error_State = CheckEmad_sPassWord_ErrorState(pass);
    5fb0:	89 e8       	ldi	r24, 0x89	; 137
    5fb2:	92 e0       	ldi	r25, 0x02	; 2
    5fb4:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <CheckEmad_sPassWord_ErrorState>
    5fb8:	80 93 a8 02 	sts	0x02A8, r24
		if(Local_Error_State == STD_TYPE_OK)
    5fbc:	80 91 a8 02 	lds	r24, 0x02A8
    5fc0:	81 30       	cpi	r24, 0x01	; 1
    5fc2:	49 f0       	breq	.+18     	; 0x5fd6 <Emad_UserEntry+0x7e>
		{
			break;
		}
		Attempts++;
    5fc4:	80 91 a0 02 	lds	r24, 0x02A0
    5fc8:	8f 5f       	subi	r24, 0xFF	; 255
    5fca:	80 93 a0 02 	sts	0x02A0, r24

	static ERROR_STATE_t Local_Error_State =STD_TYPE_NOTOK ;
	LCD_voidDisplay_CLR();
	LCD_voidSetposition(1,1);
	LCD_voidSendString((u8*)"Enter EMAD's Pass");
	while(Attempts<3)
    5fce:	80 91 a0 02 	lds	r24, 0x02A0
    5fd2:	83 30       	cpi	r24, 0x03	; 3
    5fd4:	38 f3       	brcs	.-50     	; 0x5fa4 <Emad_UserEntry+0x4c>
			break;
		}
		Attempts++;

	}
	if(Attempts == 3)
    5fd6:	80 91 a0 02 	lds	r24, 0x02A0
    5fda:	83 30       	cpi	r24, 0x03	; 3
    5fdc:	71 f4       	brne	.+28     	; 0x5ffa <Emad_UserEntry+0xa2>
	{
		LCD_voidSetposition(2,1);
    5fde:	82 e0       	ldi	r24, 0x02	; 2
    5fe0:	61 e0       	ldi	r22, 0x01	; 1
    5fe2:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
		LCD_voidSendString((u8*)"No More Attempts");
    5fe6:	80 e9       	ldi	r24, 0x90	; 144
    5fe8:	90 e0       	ldi	r25, 0x00	; 0
    5fea:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
		while(1)
		{
			DIO_voidSetPinValue(DIO_PORTA , DIO_PIN6 ,DIO_HIGH );//ALARM
    5fee:	80 e0       	ldi	r24, 0x00	; 0
    5ff0:	66 e0       	ldi	r22, 0x06	; 6
    5ff2:	41 e0       	ldi	r20, 0x01	; 1
    5ff4:	0e 94 86 1a 	call	0x350c	; 0x350c <DIO_voidSetPinValue>
    5ff8:	fa cf       	rjmp	.-12     	; 0x5fee <Emad_UserEntry+0x96>
		}
	}
	else
	{
		SERVO_u16SendAngle(90);
    5ffa:	8a e5       	ldi	r24, 0x5A	; 90
    5ffc:	90 e0       	ldi	r25, 0x00	; 0
    5ffe:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <SERVO_u16SendAngle>
    6002:	80 e0       	ldi	r24, 0x00	; 0
    6004:	90 e8       	ldi	r25, 0x80	; 128
    6006:	ab eb       	ldi	r26, 0xBB	; 187
    6008:	b4 e4       	ldi	r27, 0x44	; 68
    600a:	8b 87       	std	Y+11, r24	; 0x0b
    600c:	9c 87       	std	Y+12, r25	; 0x0c
    600e:	ad 87       	std	Y+13, r26	; 0x0d
    6010:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6012:	6b 85       	ldd	r22, Y+11	; 0x0b
    6014:	7c 85       	ldd	r23, Y+12	; 0x0c
    6016:	8d 85       	ldd	r24, Y+13	; 0x0d
    6018:	9e 85       	ldd	r25, Y+14	; 0x0e
    601a:	20 e0       	ldi	r18, 0x00	; 0
    601c:	30 e0       	ldi	r19, 0x00	; 0
    601e:	4a ef       	ldi	r20, 0xFA	; 250
    6020:	54 e4       	ldi	r21, 0x44	; 68
    6022:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6026:	dc 01       	movw	r26, r24
    6028:	cb 01       	movw	r24, r22
    602a:	8f 83       	std	Y+7, r24	; 0x07
    602c:	98 87       	std	Y+8, r25	; 0x08
    602e:	a9 87       	std	Y+9, r26	; 0x09
    6030:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6032:	6f 81       	ldd	r22, Y+7	; 0x07
    6034:	78 85       	ldd	r23, Y+8	; 0x08
    6036:	89 85       	ldd	r24, Y+9	; 0x09
    6038:	9a 85       	ldd	r25, Y+10	; 0x0a
    603a:	20 e0       	ldi	r18, 0x00	; 0
    603c:	30 e0       	ldi	r19, 0x00	; 0
    603e:	40 e8       	ldi	r20, 0x80	; 128
    6040:	5f e3       	ldi	r21, 0x3F	; 63
    6042:	0e 94 89 11 	call	0x2312	; 0x2312 <__ltsf2>
    6046:	88 23       	and	r24, r24
    6048:	2c f4       	brge	.+10     	; 0x6054 <Emad_UserEntry+0xfc>
		__ticks = 1;
    604a:	81 e0       	ldi	r24, 0x01	; 1
    604c:	90 e0       	ldi	r25, 0x00	; 0
    604e:	9e 83       	std	Y+6, r25	; 0x06
    6050:	8d 83       	std	Y+5, r24	; 0x05
    6052:	3f c0       	rjmp	.+126    	; 0x60d2 <Emad_UserEntry+0x17a>
	else if (__tmp > 65535)
    6054:	6f 81       	ldd	r22, Y+7	; 0x07
    6056:	78 85       	ldd	r23, Y+8	; 0x08
    6058:	89 85       	ldd	r24, Y+9	; 0x09
    605a:	9a 85       	ldd	r25, Y+10	; 0x0a
    605c:	20 e0       	ldi	r18, 0x00	; 0
    605e:	3f ef       	ldi	r19, 0xFF	; 255
    6060:	4f e7       	ldi	r20, 0x7F	; 127
    6062:	57 e4       	ldi	r21, 0x47	; 71
    6064:	0e 94 29 11 	call	0x2252	; 0x2252 <__gtsf2>
    6068:	18 16       	cp	r1, r24
    606a:	4c f5       	brge	.+82     	; 0x60be <Emad_UserEntry+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    606c:	6b 85       	ldd	r22, Y+11	; 0x0b
    606e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6070:	8d 85       	ldd	r24, Y+13	; 0x0d
    6072:	9e 85       	ldd	r25, Y+14	; 0x0e
    6074:	20 e0       	ldi	r18, 0x00	; 0
    6076:	30 e0       	ldi	r19, 0x00	; 0
    6078:	40 e2       	ldi	r20, 0x20	; 32
    607a:	51 e4       	ldi	r21, 0x41	; 65
    607c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6080:	dc 01       	movw	r26, r24
    6082:	cb 01       	movw	r24, r22
    6084:	bc 01       	movw	r22, r24
    6086:	cd 01       	movw	r24, r26
    6088:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    608c:	dc 01       	movw	r26, r24
    608e:	cb 01       	movw	r24, r22
    6090:	9e 83       	std	Y+6, r25	; 0x06
    6092:	8d 83       	std	Y+5, r24	; 0x05
    6094:	0f c0       	rjmp	.+30     	; 0x60b4 <Emad_UserEntry+0x15c>
    6096:	88 ec       	ldi	r24, 0xC8	; 200
    6098:	90 e0       	ldi	r25, 0x00	; 0
    609a:	9c 83       	std	Y+4, r25	; 0x04
    609c:	8b 83       	std	Y+3, r24	; 0x03
    609e:	8b 81       	ldd	r24, Y+3	; 0x03
    60a0:	9c 81       	ldd	r25, Y+4	; 0x04
    60a2:	01 97       	sbiw	r24, 0x01	; 1
    60a4:	f1 f7       	brne	.-4      	; 0x60a2 <Emad_UserEntry+0x14a>
    60a6:	9c 83       	std	Y+4, r25	; 0x04
    60a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60aa:	8d 81       	ldd	r24, Y+5	; 0x05
    60ac:	9e 81       	ldd	r25, Y+6	; 0x06
    60ae:	01 97       	sbiw	r24, 0x01	; 1
    60b0:	9e 83       	std	Y+6, r25	; 0x06
    60b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60b4:	8d 81       	ldd	r24, Y+5	; 0x05
    60b6:	9e 81       	ldd	r25, Y+6	; 0x06
    60b8:	00 97       	sbiw	r24, 0x00	; 0
    60ba:	69 f7       	brne	.-38     	; 0x6096 <Emad_UserEntry+0x13e>
    60bc:	14 c0       	rjmp	.+40     	; 0x60e6 <Emad_UserEntry+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60be:	6f 81       	ldd	r22, Y+7	; 0x07
    60c0:	78 85       	ldd	r23, Y+8	; 0x08
    60c2:	89 85       	ldd	r24, Y+9	; 0x09
    60c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    60c6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    60ca:	dc 01       	movw	r26, r24
    60cc:	cb 01       	movw	r24, r22
    60ce:	9e 83       	std	Y+6, r25	; 0x06
    60d0:	8d 83       	std	Y+5, r24	; 0x05
    60d2:	8d 81       	ldd	r24, Y+5	; 0x05
    60d4:	9e 81       	ldd	r25, Y+6	; 0x06
    60d6:	9a 83       	std	Y+2, r25	; 0x02
    60d8:	89 83       	std	Y+1, r24	; 0x01
    60da:	89 81       	ldd	r24, Y+1	; 0x01
    60dc:	9a 81       	ldd	r25, Y+2	; 0x02
    60de:	01 97       	sbiw	r24, 0x01	; 1
    60e0:	f1 f7       	brne	.-4      	; 0x60de <Emad_UserEntry+0x186>
    60e2:	9a 83       	std	Y+2, r25	; 0x02
    60e4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1500);
		SERVO_u16SendAngle(0);
    60e6:	80 e0       	ldi	r24, 0x00	; 0
    60e8:	90 e0       	ldi	r25, 0x00	; 0
    60ea:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <SERVO_u16SendAngle>
	}
}
    60ee:	2e 96       	adiw	r28, 0x0e	; 14
    60f0:	0f b6       	in	r0, 0x3f	; 63
    60f2:	f8 94       	cli
    60f4:	de bf       	out	0x3e, r29	; 62
    60f6:	0f be       	out	0x3f, r0	; 63
    60f8:	cd bf       	out	0x3d, r28	; 61
    60fa:	cf 91       	pop	r28
    60fc:	df 91       	pop	r29
    60fe:	1f 91       	pop	r17
    6100:	0f 91       	pop	r16
    6102:	08 95       	ret

00006104 <Display_LedsOptions>:


void Display_LedsOptions(void)
{
    6104:	df 93       	push	r29
    6106:	cf 93       	push	r28
    6108:	cd b7       	in	r28, 0x3d	; 61
    610a:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSetposition(1,1);
    610c:	81 e0       	ldi	r24, 0x01	; 1
    610e:	61 e0       	ldi	r22, 0x01	; 1
    6110:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
	LCD_voidSendString((u8*)"1_LED ");
    6114:	81 e1       	ldi	r24, 0x11	; 17
    6116:	91 e0       	ldi	r25, 0x01	; 1
    6118:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
	LCD_voidSetposition(1,9);
    611c:	81 e0       	ldi	r24, 0x01	; 1
    611e:	69 e0       	ldi	r22, 0x09	; 9
    6120:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
	LCD_voidSendString((u8*)"2_LEDS ");
    6124:	88 e1       	ldi	r24, 0x18	; 24
    6126:	91 e0       	ldi	r25, 0x01	; 1
    6128:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
	LCD_voidSetposition(2,1);
    612c:	82 e0       	ldi	r24, 0x02	; 2
    612e:	61 e0       	ldi	r22, 0x01	; 1
    6130:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
	LCD_voidSendString((u8*)"3_LEDS ");
    6134:	80 e2       	ldi	r24, 0x20	; 32
    6136:	91 e0       	ldi	r25, 0x01	; 1
    6138:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
	LCD_voidSetposition(2,9);
    613c:	82 e0       	ldi	r24, 0x02	; 2
    613e:	69 e0       	ldi	r22, 0x09	; 9
    6140:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
	LCD_voidSendString((u8*)"4_OFF");
    6144:	88 e2       	ldi	r24, 0x28	; 40
    6146:	91 e0       	ldi	r25, 0x01	; 1
    6148:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
}
    614c:	cf 91       	pop	r28
    614e:	df 91       	pop	r29
    6150:	08 95       	ret

00006152 <Display_UsersOptions>:
void Display_UsersOptions(void)
{
    6152:	df 93       	push	r29
    6154:	cf 93       	push	r28
    6156:	cd b7       	in	r28, 0x3d	; 61
    6158:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSetposition(1,1);
    615a:	81 e0       	ldi	r24, 0x01	; 1
    615c:	61 e0       	ldi	r22, 0x01	; 1
    615e:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
	LCD_voidSendString((u8*)"1_ALI");
    6162:	8e e2       	ldi	r24, 0x2E	; 46
    6164:	91 e0       	ldi	r25, 0x01	; 1
    6166:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
	LCD_voidSetposition(1,6);
    616a:	81 e0       	ldi	r24, 0x01	; 1
    616c:	66 e0       	ldi	r22, 0x06	; 6
    616e:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
	LCD_voidSendString((u8*)"2_AMR");
    6172:	84 e3       	ldi	r24, 0x34	; 52
    6174:	91 e0       	ldi	r25, 0x01	; 1
    6176:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
	LCD_voidSetposition(1,11);
    617a:	81 e0       	ldi	r24, 0x01	; 1
    617c:	6b e0       	ldi	r22, 0x0B	; 11
    617e:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
	LCD_voidSendString((u8*)" 3_MAY");
    6182:	8a e3       	ldi	r24, 0x3A	; 58
    6184:	91 e0       	ldi	r25, 0x01	; 1
    6186:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
	LCD_voidSetposition(2,1);
    618a:	82 e0       	ldi	r24, 0x02	; 2
    618c:	61 e0       	ldi	r22, 0x01	; 1
    618e:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
	LCD_voidSendString((u8*)"4_ALAA");
    6192:	81 e4       	ldi	r24, 0x41	; 65
    6194:	91 e0       	ldi	r25, 0x01	; 1
    6196:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
	LCD_voidSetposition(2,8);
    619a:	82 e0       	ldi	r24, 0x02	; 2
    619c:	68 e0       	ldi	r22, 0x08	; 8
    619e:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
	LCD_voidSendString((u8*)"5_EMAD");
    61a2:	88 e4       	ldi	r24, 0x48	; 72
    61a4:	91 e0       	ldi	r25, 0x01	; 1
    61a6:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
}
    61aa:	cf 91       	pop	r28
    61ac:	df 91       	pop	r29
    61ae:	08 95       	ret

000061b0 <_1LED_ON>:


void _1LED_ON(void)
{
    61b0:	df 93       	push	r29
    61b2:	cf 93       	push	r28
    61b4:	cd b7       	in	r28, 0x3d	; 61
    61b6:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue( DIO_PORTA , DIO_PIN3 , DIO_HIGH );
    61b8:	80 e0       	ldi	r24, 0x00	; 0
    61ba:	63 e0       	ldi	r22, 0x03	; 3
    61bc:	41 e0       	ldi	r20, 0x01	; 1
    61be:	0e 94 86 1a 	call	0x350c	; 0x350c <DIO_voidSetPinValue>
	DIO_voidSetPinValue( DIO_PORTA , DIO_PIN4 , DIO_LOW );
    61c2:	80 e0       	ldi	r24, 0x00	; 0
    61c4:	64 e0       	ldi	r22, 0x04	; 4
    61c6:	40 e0       	ldi	r20, 0x00	; 0
    61c8:	0e 94 86 1a 	call	0x350c	; 0x350c <DIO_voidSetPinValue>
	DIO_voidSetPinValue( DIO_PORTA , DIO_PIN5 , DIO_LOW );
    61cc:	80 e0       	ldi	r24, 0x00	; 0
    61ce:	65 e0       	ldi	r22, 0x05	; 5
    61d0:	40 e0       	ldi	r20, 0x00	; 0
    61d2:	0e 94 86 1a 	call	0x350c	; 0x350c <DIO_voidSetPinValue>
}
    61d6:	cf 91       	pop	r28
    61d8:	df 91       	pop	r29
    61da:	08 95       	ret

000061dc <_2LEDS_ON>:
void _2LEDS_ON(void)
{
    61dc:	df 93       	push	r29
    61de:	cf 93       	push	r28
    61e0:	cd b7       	in	r28, 0x3d	; 61
    61e2:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue( DIO_PORTA , DIO_PIN3 , DIO_HIGH );
    61e4:	80 e0       	ldi	r24, 0x00	; 0
    61e6:	63 e0       	ldi	r22, 0x03	; 3
    61e8:	41 e0       	ldi	r20, 0x01	; 1
    61ea:	0e 94 86 1a 	call	0x350c	; 0x350c <DIO_voidSetPinValue>
	DIO_voidSetPinValue( DIO_PORTA , DIO_PIN4 , DIO_HIGH );
    61ee:	80 e0       	ldi	r24, 0x00	; 0
    61f0:	64 e0       	ldi	r22, 0x04	; 4
    61f2:	41 e0       	ldi	r20, 0x01	; 1
    61f4:	0e 94 86 1a 	call	0x350c	; 0x350c <DIO_voidSetPinValue>
	DIO_voidSetPinValue( DIO_PORTA , DIO_PIN5 , DIO_LOW );
    61f8:	80 e0       	ldi	r24, 0x00	; 0
    61fa:	65 e0       	ldi	r22, 0x05	; 5
    61fc:	40 e0       	ldi	r20, 0x00	; 0
    61fe:	0e 94 86 1a 	call	0x350c	; 0x350c <DIO_voidSetPinValue>
}
    6202:	cf 91       	pop	r28
    6204:	df 91       	pop	r29
    6206:	08 95       	ret

00006208 <_3LEDS_ON>:
void _3LEDS_ON(void)
{
    6208:	df 93       	push	r29
    620a:	cf 93       	push	r28
    620c:	cd b7       	in	r28, 0x3d	; 61
    620e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue( DIO_PORTA , DIO_PIN3 , DIO_HIGH );
    6210:	80 e0       	ldi	r24, 0x00	; 0
    6212:	63 e0       	ldi	r22, 0x03	; 3
    6214:	41 e0       	ldi	r20, 0x01	; 1
    6216:	0e 94 86 1a 	call	0x350c	; 0x350c <DIO_voidSetPinValue>
	DIO_voidSetPinValue( DIO_PORTA , DIO_PIN4 , DIO_HIGH );
    621a:	80 e0       	ldi	r24, 0x00	; 0
    621c:	64 e0       	ldi	r22, 0x04	; 4
    621e:	41 e0       	ldi	r20, 0x01	; 1
    6220:	0e 94 86 1a 	call	0x350c	; 0x350c <DIO_voidSetPinValue>
	DIO_voidSetPinValue( DIO_PORTA , DIO_PIN5 , DIO_HIGH );
    6224:	80 e0       	ldi	r24, 0x00	; 0
    6226:	65 e0       	ldi	r22, 0x05	; 5
    6228:	41 e0       	ldi	r20, 0x01	; 1
    622a:	0e 94 86 1a 	call	0x350c	; 0x350c <DIO_voidSetPinValue>
}
    622e:	cf 91       	pop	r28
    6230:	df 91       	pop	r29
    6232:	08 95       	ret

00006234 <LEDS_OFF>:
void LEDS_OFF(void)
{
    6234:	df 93       	push	r29
    6236:	cf 93       	push	r28
    6238:	cd b7       	in	r28, 0x3d	; 61
    623a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue( DIO_PORTA , DIO_PIN3 , DIO_LOW );
    623c:	80 e0       	ldi	r24, 0x00	; 0
    623e:	63 e0       	ldi	r22, 0x03	; 3
    6240:	40 e0       	ldi	r20, 0x00	; 0
    6242:	0e 94 86 1a 	call	0x350c	; 0x350c <DIO_voidSetPinValue>
	DIO_voidSetPinValue( DIO_PORTA , DIO_PIN4 , DIO_LOW );
    6246:	80 e0       	ldi	r24, 0x00	; 0
    6248:	64 e0       	ldi	r22, 0x04	; 4
    624a:	40 e0       	ldi	r20, 0x00	; 0
    624c:	0e 94 86 1a 	call	0x350c	; 0x350c <DIO_voidSetPinValue>
	DIO_voidSetPinValue( DIO_PORTA , DIO_PIN5 , DIO_LOW );
    6250:	80 e0       	ldi	r24, 0x00	; 0
    6252:	65 e0       	ldi	r22, 0x05	; 5
    6254:	40 e0       	ldi	r20, 0x00	; 0
    6256:	0e 94 86 1a 	call	0x350c	; 0x350c <DIO_voidSetPinValue>
}
    625a:	cf 91       	pop	r28
    625c:	df 91       	pop	r29
    625e:	08 95       	ret

00006260 <main>:
#include "MCAL/UART/UART_interface.h"
#include "HAL/LCD/LCD_interface.h"
#include "HAL/SERVO/SERVO_interface.h"

int main(void)
{
    6260:	df 93       	push	r29
    6262:	cf 93       	push	r28
    6264:	cd b7       	in	r28, 0x3d	; 61
    6266:	de b7       	in	r29, 0x3e	; 62
    6268:	e9 97       	sbiw	r28, 0x39	; 57
    626a:	0f b6       	in	r0, 0x3f	; 63
    626c:	f8 94       	cli
    626e:	de bf       	out	0x3e, r29	; 62
    6270:	0f be       	out	0x3f, r0	; 63
    6272:	cd bf       	out	0x3d, r28	; 61
	LCD_voidInit();
    6274:	0e 94 4e 23 	call	0x469c	; 0x469c <LCD_voidInit>
	SERVO_voidInit();
    6278:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <SERVO_voidInit>
			.Character_Size       = EIGHT_BIT,
			.Clock_Polarity       = TXD_RISING_RXD_FALLING,
			.TX_RX_ENABLE_DISABLE = RX_Only_Enable,
			.UART_SPEED           = NORMAL_SPEED,
			.BAUD_RATE            = 9600,
	};
    627c:	ce 01       	movw	r24, r28
    627e:	8c 96       	adiw	r24, 0x2c	; 44
    6280:	9e ab       	std	Y+54, r25	; 0x36
    6282:	8d ab       	std	Y+53, r24	; 0x35
    6284:	e0 e9       	ldi	r30, 0x90	; 144
    6286:	f2 e0       	ldi	r31, 0x02	; 2
    6288:	f8 af       	std	Y+56, r31	; 0x38
    628a:	ef ab       	std	Y+55, r30	; 0x37
    628c:	f9 e0       	ldi	r31, 0x09	; 9
    628e:	f9 af       	std	Y+57, r31	; 0x39
    6290:	ef a9       	ldd	r30, Y+55	; 0x37
    6292:	f8 ad       	ldd	r31, Y+56	; 0x38
    6294:	00 80       	ld	r0, Z
    6296:	8f a9       	ldd	r24, Y+55	; 0x37
    6298:	98 ad       	ldd	r25, Y+56	; 0x38
    629a:	01 96       	adiw	r24, 0x01	; 1
    629c:	98 af       	std	Y+56, r25	; 0x38
    629e:	8f ab       	std	Y+55, r24	; 0x37
    62a0:	ed a9       	ldd	r30, Y+53	; 0x35
    62a2:	fe a9       	ldd	r31, Y+54	; 0x36
    62a4:	00 82       	st	Z, r0
    62a6:	8d a9       	ldd	r24, Y+53	; 0x35
    62a8:	9e a9       	ldd	r25, Y+54	; 0x36
    62aa:	01 96       	adiw	r24, 0x01	; 1
    62ac:	9e ab       	std	Y+54, r25	; 0x36
    62ae:	8d ab       	std	Y+53, r24	; 0x35
    62b0:	99 ad       	ldd	r25, Y+57	; 0x39
    62b2:	91 50       	subi	r25, 0x01	; 1
    62b4:	99 af       	std	Y+57, r25	; 0x39
    62b6:	e9 ad       	ldd	r30, Y+57	; 0x39
    62b8:	ee 23       	and	r30, r30
    62ba:	51 f7       	brne	.-44     	; 0x6290 <main+0x30>
	DIO_voidSetPinDirection(DIO_PORTD ,DIO_PIN0 , DIO_INPUT);  //RX
    62bc:	83 e0       	ldi	r24, 0x03	; 3
    62be:	60 e0       	ldi	r22, 0x00	; 0
    62c0:	40 e0       	ldi	r20, 0x00	; 0
    62c2:	0e 94 7e 19 	call	0x32fc	; 0x32fc <DIO_voidSetPinDirection>
	UART_void_Init(&myuart);
    62c6:	ce 01       	movw	r24, r28
    62c8:	8c 96       	adiw	r24, 0x2c	; 44
    62ca:	0e 94 12 14 	call	0x2824	; 0x2824 <UART_void_Init>

	DIO_voidSetPinDirection(DIO_PORTA ,DIO_PIN3 , DIO_OUTPUT);//LED1
    62ce:	80 e0       	ldi	r24, 0x00	; 0
    62d0:	63 e0       	ldi	r22, 0x03	; 3
    62d2:	41 e0       	ldi	r20, 0x01	; 1
    62d4:	0e 94 7e 19 	call	0x32fc	; 0x32fc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTA ,DIO_PIN4 , DIO_OUTPUT);//LED2
    62d8:	80 e0       	ldi	r24, 0x00	; 0
    62da:	64 e0       	ldi	r22, 0x04	; 4
    62dc:	41 e0       	ldi	r20, 0x01	; 1
    62de:	0e 94 7e 19 	call	0x32fc	; 0x32fc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTA ,DIO_PIN5 , DIO_OUTPUT);//LED3
    62e2:	80 e0       	ldi	r24, 0x00	; 0
    62e4:	65 e0       	ldi	r22, 0x05	; 5
    62e6:	41 e0       	ldi	r20, 0x01	; 1
    62e8:	0e 94 7e 19 	call	0x32fc	; 0x32fc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTA ,DIO_PIN6 , DIO_OUTPUT);//Alarm
    62ec:	80 e0       	ldi	r24, 0x00	; 0
    62ee:	66 e0       	ldi	r22, 0x06	; 6
    62f0:	41 e0       	ldi	r20, 0x01	; 1
    62f2:	0e 94 7e 19 	call	0x32fc	; 0x32fc <DIO_voidSetPinDirection>

	u8 Local_RecivedData;

	LCD_voidSetposition(1,1);
    62f6:	81 e0       	ldi	r24, 0x01	; 1
    62f8:	61 e0       	ldi	r22, 0x01	; 1
    62fa:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
	LCD_voidSendString((u8*)"1)Safety Door");
    62fe:	8f e4       	ldi	r24, 0x4F	; 79
    6300:	91 e0       	ldi	r25, 0x01	; 1
    6302:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
	LCD_voidSetposition(2,1);
    6306:	82 e0       	ldi	r24, 0x02	; 2
    6308:	61 e0       	ldi	r22, 0x01	; 1
    630a:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
	LCD_voidSendString((u8*)"2)Control Light");
    630e:	8d e5       	ldi	r24, 0x5D	; 93
    6310:	91 e0       	ldi	r25, 0x01	; 1
    6312:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
    6316:	80 e0       	ldi	r24, 0x00	; 0
    6318:	90 e8       	ldi	r25, 0x80	; 128
    631a:	ab eb       	ldi	r26, 0xBB	; 187
    631c:	b4 e4       	ldi	r27, 0x44	; 68
    631e:	8f a3       	std	Y+39, r24	; 0x27
    6320:	98 a7       	std	Y+40, r25	; 0x28
    6322:	a9 a7       	std	Y+41, r26	; 0x29
    6324:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6326:	6f a1       	ldd	r22, Y+39	; 0x27
    6328:	78 a5       	ldd	r23, Y+40	; 0x28
    632a:	89 a5       	ldd	r24, Y+41	; 0x29
    632c:	9a a5       	ldd	r25, Y+42	; 0x2a
    632e:	20 e0       	ldi	r18, 0x00	; 0
    6330:	30 e0       	ldi	r19, 0x00	; 0
    6332:	4a ef       	ldi	r20, 0xFA	; 250
    6334:	54 e4       	ldi	r21, 0x44	; 68
    6336:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    633a:	dc 01       	movw	r26, r24
    633c:	cb 01       	movw	r24, r22
    633e:	8b a3       	std	Y+35, r24	; 0x23
    6340:	9c a3       	std	Y+36, r25	; 0x24
    6342:	ad a3       	std	Y+37, r26	; 0x25
    6344:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6346:	6b a1       	ldd	r22, Y+35	; 0x23
    6348:	7c a1       	ldd	r23, Y+36	; 0x24
    634a:	8d a1       	ldd	r24, Y+37	; 0x25
    634c:	9e a1       	ldd	r25, Y+38	; 0x26
    634e:	20 e0       	ldi	r18, 0x00	; 0
    6350:	30 e0       	ldi	r19, 0x00	; 0
    6352:	40 e8       	ldi	r20, 0x80	; 128
    6354:	5f e3       	ldi	r21, 0x3F	; 63
    6356:	0e 94 89 11 	call	0x2312	; 0x2312 <__ltsf2>
    635a:	88 23       	and	r24, r24
    635c:	2c f4       	brge	.+10     	; 0x6368 <main+0x108>
		__ticks = 1;
    635e:	81 e0       	ldi	r24, 0x01	; 1
    6360:	90 e0       	ldi	r25, 0x00	; 0
    6362:	9a a3       	std	Y+34, r25	; 0x22
    6364:	89 a3       	std	Y+33, r24	; 0x21
    6366:	3f c0       	rjmp	.+126    	; 0x63e6 <main+0x186>
	else if (__tmp > 65535)
    6368:	6b a1       	ldd	r22, Y+35	; 0x23
    636a:	7c a1       	ldd	r23, Y+36	; 0x24
    636c:	8d a1       	ldd	r24, Y+37	; 0x25
    636e:	9e a1       	ldd	r25, Y+38	; 0x26
    6370:	20 e0       	ldi	r18, 0x00	; 0
    6372:	3f ef       	ldi	r19, 0xFF	; 255
    6374:	4f e7       	ldi	r20, 0x7F	; 127
    6376:	57 e4       	ldi	r21, 0x47	; 71
    6378:	0e 94 29 11 	call	0x2252	; 0x2252 <__gtsf2>
    637c:	18 16       	cp	r1, r24
    637e:	4c f5       	brge	.+82     	; 0x63d2 <main+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6380:	6f a1       	ldd	r22, Y+39	; 0x27
    6382:	78 a5       	ldd	r23, Y+40	; 0x28
    6384:	89 a5       	ldd	r24, Y+41	; 0x29
    6386:	9a a5       	ldd	r25, Y+42	; 0x2a
    6388:	20 e0       	ldi	r18, 0x00	; 0
    638a:	30 e0       	ldi	r19, 0x00	; 0
    638c:	40 e2       	ldi	r20, 0x20	; 32
    638e:	51 e4       	ldi	r21, 0x41	; 65
    6390:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6394:	dc 01       	movw	r26, r24
    6396:	cb 01       	movw	r24, r22
    6398:	bc 01       	movw	r22, r24
    639a:	cd 01       	movw	r24, r26
    639c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    63a0:	dc 01       	movw	r26, r24
    63a2:	cb 01       	movw	r24, r22
    63a4:	9a a3       	std	Y+34, r25	; 0x22
    63a6:	89 a3       	std	Y+33, r24	; 0x21
    63a8:	0f c0       	rjmp	.+30     	; 0x63c8 <main+0x168>
    63aa:	88 ec       	ldi	r24, 0xC8	; 200
    63ac:	90 e0       	ldi	r25, 0x00	; 0
    63ae:	98 a3       	std	Y+32, r25	; 0x20
    63b0:	8f 8f       	std	Y+31, r24	; 0x1f
    63b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    63b4:	98 a1       	ldd	r25, Y+32	; 0x20
    63b6:	01 97       	sbiw	r24, 0x01	; 1
    63b8:	f1 f7       	brne	.-4      	; 0x63b6 <main+0x156>
    63ba:	98 a3       	std	Y+32, r25	; 0x20
    63bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    63be:	89 a1       	ldd	r24, Y+33	; 0x21
    63c0:	9a a1       	ldd	r25, Y+34	; 0x22
    63c2:	01 97       	sbiw	r24, 0x01	; 1
    63c4:	9a a3       	std	Y+34, r25	; 0x22
    63c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    63c8:	89 a1       	ldd	r24, Y+33	; 0x21
    63ca:	9a a1       	ldd	r25, Y+34	; 0x22
    63cc:	00 97       	sbiw	r24, 0x00	; 0
    63ce:	69 f7       	brne	.-38     	; 0x63aa <main+0x14a>
    63d0:	14 c0       	rjmp	.+40     	; 0x63fa <main+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    63d2:	6b a1       	ldd	r22, Y+35	; 0x23
    63d4:	7c a1       	ldd	r23, Y+36	; 0x24
    63d6:	8d a1       	ldd	r24, Y+37	; 0x25
    63d8:	9e a1       	ldd	r25, Y+38	; 0x26
    63da:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    63de:	dc 01       	movw	r26, r24
    63e0:	cb 01       	movw	r24, r22
    63e2:	9a a3       	std	Y+34, r25	; 0x22
    63e4:	89 a3       	std	Y+33, r24	; 0x21
    63e6:	89 a1       	ldd	r24, Y+33	; 0x21
    63e8:	9a a1       	ldd	r25, Y+34	; 0x22
    63ea:	9e 8f       	std	Y+30, r25	; 0x1e
    63ec:	8d 8f       	std	Y+29, r24	; 0x1d
    63ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    63f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    63f2:	01 97       	sbiw	r24, 0x01	; 1
    63f4:	f1 f7       	brne	.-4      	; 0x63f2 <main+0x192>
    63f6:	9e 8f       	std	Y+30, r25	; 0x1e
    63f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1500);
	LCD_voidDisplay_CLR();
    63fa:	0e 94 26 28 	call	0x504c	; 0x504c <LCD_voidDisplay_CLR>

	Local_RecivedData = UART_voidReceiveData_Sync();
    63fe:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <UART_voidReceiveData_Sync>
    6402:	8b a7       	std	Y+43, r24	; 0x2b
	if(Local_RecivedData == '1')
    6404:	8b a5       	ldd	r24, Y+43	; 0x2b
    6406:	81 33       	cpi	r24, 0x31	; 49
    6408:	09 f0       	breq	.+2      	; 0x640c <main+0x1ac>
    640a:	a0 c0       	rjmp	.+320    	; 0x654c <main+0x2ec>
	{
		LCD_voidSetposition(1,1);
    640c:	81 e0       	ldi	r24, 0x01	; 1
    640e:	61 e0       	ldi	r22, 0x01	; 1
    6410:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
		LCD_voidSendString((u8*)"1)Safety Door");
    6414:	8f e4       	ldi	r24, 0x4F	; 79
    6416:	91 e0       	ldi	r25, 0x01	; 1
    6418:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
    641c:	80 e0       	ldi	r24, 0x00	; 0
    641e:	90 e0       	ldi	r25, 0x00	; 0
    6420:	aa e7       	ldi	r26, 0x7A	; 122
    6422:	b4 e4       	ldi	r27, 0x44	; 68
    6424:	89 8f       	std	Y+25, r24	; 0x19
    6426:	9a 8f       	std	Y+26, r25	; 0x1a
    6428:	ab 8f       	std	Y+27, r26	; 0x1b
    642a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    642c:	69 8d       	ldd	r22, Y+25	; 0x19
    642e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6430:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6432:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6434:	20 e0       	ldi	r18, 0x00	; 0
    6436:	30 e0       	ldi	r19, 0x00	; 0
    6438:	4a ef       	ldi	r20, 0xFA	; 250
    643a:	54 e4       	ldi	r21, 0x44	; 68
    643c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6440:	dc 01       	movw	r26, r24
    6442:	cb 01       	movw	r24, r22
    6444:	8d 8b       	std	Y+21, r24	; 0x15
    6446:	9e 8b       	std	Y+22, r25	; 0x16
    6448:	af 8b       	std	Y+23, r26	; 0x17
    644a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    644c:	6d 89       	ldd	r22, Y+21	; 0x15
    644e:	7e 89       	ldd	r23, Y+22	; 0x16
    6450:	8f 89       	ldd	r24, Y+23	; 0x17
    6452:	98 8d       	ldd	r25, Y+24	; 0x18
    6454:	20 e0       	ldi	r18, 0x00	; 0
    6456:	30 e0       	ldi	r19, 0x00	; 0
    6458:	40 e8       	ldi	r20, 0x80	; 128
    645a:	5f e3       	ldi	r21, 0x3F	; 63
    645c:	0e 94 89 11 	call	0x2312	; 0x2312 <__ltsf2>
    6460:	88 23       	and	r24, r24
    6462:	2c f4       	brge	.+10     	; 0x646e <main+0x20e>
		__ticks = 1;
    6464:	81 e0       	ldi	r24, 0x01	; 1
    6466:	90 e0       	ldi	r25, 0x00	; 0
    6468:	9c 8b       	std	Y+20, r25	; 0x14
    646a:	8b 8b       	std	Y+19, r24	; 0x13
    646c:	3f c0       	rjmp	.+126    	; 0x64ec <main+0x28c>
	else if (__tmp > 65535)
    646e:	6d 89       	ldd	r22, Y+21	; 0x15
    6470:	7e 89       	ldd	r23, Y+22	; 0x16
    6472:	8f 89       	ldd	r24, Y+23	; 0x17
    6474:	98 8d       	ldd	r25, Y+24	; 0x18
    6476:	20 e0       	ldi	r18, 0x00	; 0
    6478:	3f ef       	ldi	r19, 0xFF	; 255
    647a:	4f e7       	ldi	r20, 0x7F	; 127
    647c:	57 e4       	ldi	r21, 0x47	; 71
    647e:	0e 94 29 11 	call	0x2252	; 0x2252 <__gtsf2>
    6482:	18 16       	cp	r1, r24
    6484:	4c f5       	brge	.+82     	; 0x64d8 <main+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6486:	69 8d       	ldd	r22, Y+25	; 0x19
    6488:	7a 8d       	ldd	r23, Y+26	; 0x1a
    648a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    648c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    648e:	20 e0       	ldi	r18, 0x00	; 0
    6490:	30 e0       	ldi	r19, 0x00	; 0
    6492:	40 e2       	ldi	r20, 0x20	; 32
    6494:	51 e4       	ldi	r21, 0x41	; 65
    6496:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    649a:	dc 01       	movw	r26, r24
    649c:	cb 01       	movw	r24, r22
    649e:	bc 01       	movw	r22, r24
    64a0:	cd 01       	movw	r24, r26
    64a2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    64a6:	dc 01       	movw	r26, r24
    64a8:	cb 01       	movw	r24, r22
    64aa:	9c 8b       	std	Y+20, r25	; 0x14
    64ac:	8b 8b       	std	Y+19, r24	; 0x13
    64ae:	0f c0       	rjmp	.+30     	; 0x64ce <main+0x26e>
    64b0:	88 ec       	ldi	r24, 0xC8	; 200
    64b2:	90 e0       	ldi	r25, 0x00	; 0
    64b4:	9a 8b       	std	Y+18, r25	; 0x12
    64b6:	89 8b       	std	Y+17, r24	; 0x11
    64b8:	89 89       	ldd	r24, Y+17	; 0x11
    64ba:	9a 89       	ldd	r25, Y+18	; 0x12
    64bc:	01 97       	sbiw	r24, 0x01	; 1
    64be:	f1 f7       	brne	.-4      	; 0x64bc <main+0x25c>
    64c0:	9a 8b       	std	Y+18, r25	; 0x12
    64c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    64c4:	8b 89       	ldd	r24, Y+19	; 0x13
    64c6:	9c 89       	ldd	r25, Y+20	; 0x14
    64c8:	01 97       	sbiw	r24, 0x01	; 1
    64ca:	9c 8b       	std	Y+20, r25	; 0x14
    64cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    64ce:	8b 89       	ldd	r24, Y+19	; 0x13
    64d0:	9c 89       	ldd	r25, Y+20	; 0x14
    64d2:	00 97       	sbiw	r24, 0x00	; 0
    64d4:	69 f7       	brne	.-38     	; 0x64b0 <main+0x250>
    64d6:	14 c0       	rjmp	.+40     	; 0x6500 <main+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    64d8:	6d 89       	ldd	r22, Y+21	; 0x15
    64da:	7e 89       	ldd	r23, Y+22	; 0x16
    64dc:	8f 89       	ldd	r24, Y+23	; 0x17
    64de:	98 8d       	ldd	r25, Y+24	; 0x18
    64e0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    64e4:	dc 01       	movw	r26, r24
    64e6:	cb 01       	movw	r24, r22
    64e8:	9c 8b       	std	Y+20, r25	; 0x14
    64ea:	8b 8b       	std	Y+19, r24	; 0x13
    64ec:	8b 89       	ldd	r24, Y+19	; 0x13
    64ee:	9c 89       	ldd	r25, Y+20	; 0x14
    64f0:	98 8b       	std	Y+16, r25	; 0x10
    64f2:	8f 87       	std	Y+15, r24	; 0x0f
    64f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    64f6:	98 89       	ldd	r25, Y+16	; 0x10
    64f8:	01 97       	sbiw	r24, 0x01	; 1
    64fa:	f1 f7       	brne	.-4      	; 0x64f8 <main+0x298>
    64fc:	98 8b       	std	Y+16, r25	; 0x10
    64fe:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		LCD_voidDisplay_CLR();
    6500:	0e 94 26 28 	call	0x504c	; 0x504c <LCD_voidDisplay_CLR>

		Display_UsersOptions();
    6504:	0e 94 a9 30 	call	0x6152	; 0x6152 <Display_UsersOptions>

		Local_RecivedData = UART_voidReceiveData_Sync();
    6508:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <UART_voidReceiveData_Sync>
    650c:	8b a7       	std	Y+43, r24	; 0x2b
		if(Local_RecivedData == '1')
    650e:	8b a5       	ldd	r24, Y+43	; 0x2b
    6510:	81 33       	cpi	r24, 0x31	; 49
    6512:	19 f4       	brne	.+6      	; 0x651a <main+0x2ba>
		{
			Ali_UserEntry();
    6514:	0e 94 04 29 	call	0x5208	; 0x5208 <Ali_UserEntry>
    6518:	b3 c0       	rjmp	.+358    	; 0x6680 <main+0x420>
		}
		else if(Local_RecivedData == '2')
    651a:	8b a5       	ldd	r24, Y+43	; 0x2b
    651c:	82 33       	cpi	r24, 0x32	; 50
    651e:	19 f4       	brne	.+6      	; 0x6526 <main+0x2c6>
		{
			Amr_UserEntry();
    6520:	0e 94 ae 2a 	call	0x555c	; 0x555c <Amr_UserEntry>
    6524:	ad c0       	rjmp	.+346    	; 0x6680 <main+0x420>
		}
		else if(Local_RecivedData == '3')
    6526:	8b a5       	ldd	r24, Y+43	; 0x2b
    6528:	83 33       	cpi	r24, 0x33	; 51
    652a:	19 f4       	brne	.+6      	; 0x6532 <main+0x2d2>
		{
			May_UserEntry();
    652c:	0e 94 58 2c 	call	0x58b0	; 0x58b0 <May_UserEntry>
    6530:	a7 c0       	rjmp	.+334    	; 0x6680 <main+0x420>
		}
		else if(Local_RecivedData == '4')
    6532:	8b a5       	ldd	r24, Y+43	; 0x2b
    6534:	84 33       	cpi	r24, 0x34	; 52
    6536:	19 f4       	brne	.+6      	; 0x653e <main+0x2de>
		{
			Alaa_UserEntry();
    6538:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <Alaa_UserEntry>
    653c:	a1 c0       	rjmp	.+322    	; 0x6680 <main+0x420>
		}
		else if(Local_RecivedData == '5')
    653e:	8b a5       	ldd	r24, Y+43	; 0x2b
    6540:	85 33       	cpi	r24, 0x35	; 53
    6542:	09 f0       	breq	.+2      	; 0x6546 <main+0x2e6>
    6544:	9d c0       	rjmp	.+314    	; 0x6680 <main+0x420>
		{
			Emad_UserEntry();
    6546:	0e 94 ac 2f 	call	0x5f58	; 0x5f58 <Emad_UserEntry>
    654a:	9a c0       	rjmp	.+308    	; 0x6680 <main+0x420>
		}
	}

	else if(Local_RecivedData == '2')
    654c:	8b a5       	ldd	r24, Y+43	; 0x2b
    654e:	82 33       	cpi	r24, 0x32	; 50
    6550:	09 f0       	breq	.+2      	; 0x6554 <main+0x2f4>
    6552:	96 c0       	rjmp	.+300    	; 0x6680 <main+0x420>
	{
		LCD_voidSetposition(2,1);
    6554:	82 e0       	ldi	r24, 0x02	; 2
    6556:	61 e0       	ldi	r22, 0x01	; 1
    6558:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_voidSetposition>
		LCD_voidSendString((u8*)"2)Control Light");
    655c:	8d e5       	ldi	r24, 0x5D	; 93
    655e:	91 e0       	ldi	r25, 0x01	; 1
    6560:	0e 94 bc 22 	call	0x4578	; 0x4578 <LCD_voidSendString>
    6564:	80 e0       	ldi	r24, 0x00	; 0
    6566:	90 e0       	ldi	r25, 0x00	; 0
    6568:	aa e7       	ldi	r26, 0x7A	; 122
    656a:	b4 e4       	ldi	r27, 0x44	; 68
    656c:	8b 87       	std	Y+11, r24	; 0x0b
    656e:	9c 87       	std	Y+12, r25	; 0x0c
    6570:	ad 87       	std	Y+13, r26	; 0x0d
    6572:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6574:	6b 85       	ldd	r22, Y+11	; 0x0b
    6576:	7c 85       	ldd	r23, Y+12	; 0x0c
    6578:	8d 85       	ldd	r24, Y+13	; 0x0d
    657a:	9e 85       	ldd	r25, Y+14	; 0x0e
    657c:	20 e0       	ldi	r18, 0x00	; 0
    657e:	30 e0       	ldi	r19, 0x00	; 0
    6580:	4a ef       	ldi	r20, 0xFA	; 250
    6582:	54 e4       	ldi	r21, 0x44	; 68
    6584:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6588:	dc 01       	movw	r26, r24
    658a:	cb 01       	movw	r24, r22
    658c:	8f 83       	std	Y+7, r24	; 0x07
    658e:	98 87       	std	Y+8, r25	; 0x08
    6590:	a9 87       	std	Y+9, r26	; 0x09
    6592:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6594:	6f 81       	ldd	r22, Y+7	; 0x07
    6596:	78 85       	ldd	r23, Y+8	; 0x08
    6598:	89 85       	ldd	r24, Y+9	; 0x09
    659a:	9a 85       	ldd	r25, Y+10	; 0x0a
    659c:	20 e0       	ldi	r18, 0x00	; 0
    659e:	30 e0       	ldi	r19, 0x00	; 0
    65a0:	40 e8       	ldi	r20, 0x80	; 128
    65a2:	5f e3       	ldi	r21, 0x3F	; 63
    65a4:	0e 94 89 11 	call	0x2312	; 0x2312 <__ltsf2>
    65a8:	88 23       	and	r24, r24
    65aa:	2c f4       	brge	.+10     	; 0x65b6 <main+0x356>
		__ticks = 1;
    65ac:	81 e0       	ldi	r24, 0x01	; 1
    65ae:	90 e0       	ldi	r25, 0x00	; 0
    65b0:	9e 83       	std	Y+6, r25	; 0x06
    65b2:	8d 83       	std	Y+5, r24	; 0x05
    65b4:	3f c0       	rjmp	.+126    	; 0x6634 <main+0x3d4>
	else if (__tmp > 65535)
    65b6:	6f 81       	ldd	r22, Y+7	; 0x07
    65b8:	78 85       	ldd	r23, Y+8	; 0x08
    65ba:	89 85       	ldd	r24, Y+9	; 0x09
    65bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    65be:	20 e0       	ldi	r18, 0x00	; 0
    65c0:	3f ef       	ldi	r19, 0xFF	; 255
    65c2:	4f e7       	ldi	r20, 0x7F	; 127
    65c4:	57 e4       	ldi	r21, 0x47	; 71
    65c6:	0e 94 29 11 	call	0x2252	; 0x2252 <__gtsf2>
    65ca:	18 16       	cp	r1, r24
    65cc:	4c f5       	brge	.+82     	; 0x6620 <main+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    65ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    65d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    65d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    65d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    65d6:	20 e0       	ldi	r18, 0x00	; 0
    65d8:	30 e0       	ldi	r19, 0x00	; 0
    65da:	40 e2       	ldi	r20, 0x20	; 32
    65dc:	51 e4       	ldi	r21, 0x41	; 65
    65de:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    65e2:	dc 01       	movw	r26, r24
    65e4:	cb 01       	movw	r24, r22
    65e6:	bc 01       	movw	r22, r24
    65e8:	cd 01       	movw	r24, r26
    65ea:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    65ee:	dc 01       	movw	r26, r24
    65f0:	cb 01       	movw	r24, r22
    65f2:	9e 83       	std	Y+6, r25	; 0x06
    65f4:	8d 83       	std	Y+5, r24	; 0x05
    65f6:	0f c0       	rjmp	.+30     	; 0x6616 <main+0x3b6>
    65f8:	88 ec       	ldi	r24, 0xC8	; 200
    65fa:	90 e0       	ldi	r25, 0x00	; 0
    65fc:	9c 83       	std	Y+4, r25	; 0x04
    65fe:	8b 83       	std	Y+3, r24	; 0x03
    6600:	8b 81       	ldd	r24, Y+3	; 0x03
    6602:	9c 81       	ldd	r25, Y+4	; 0x04
    6604:	01 97       	sbiw	r24, 0x01	; 1
    6606:	f1 f7       	brne	.-4      	; 0x6604 <main+0x3a4>
    6608:	9c 83       	std	Y+4, r25	; 0x04
    660a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    660c:	8d 81       	ldd	r24, Y+5	; 0x05
    660e:	9e 81       	ldd	r25, Y+6	; 0x06
    6610:	01 97       	sbiw	r24, 0x01	; 1
    6612:	9e 83       	std	Y+6, r25	; 0x06
    6614:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6616:	8d 81       	ldd	r24, Y+5	; 0x05
    6618:	9e 81       	ldd	r25, Y+6	; 0x06
    661a:	00 97       	sbiw	r24, 0x00	; 0
    661c:	69 f7       	brne	.-38     	; 0x65f8 <main+0x398>
    661e:	14 c0       	rjmp	.+40     	; 0x6648 <main+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6620:	6f 81       	ldd	r22, Y+7	; 0x07
    6622:	78 85       	ldd	r23, Y+8	; 0x08
    6624:	89 85       	ldd	r24, Y+9	; 0x09
    6626:	9a 85       	ldd	r25, Y+10	; 0x0a
    6628:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    662c:	dc 01       	movw	r26, r24
    662e:	cb 01       	movw	r24, r22
    6630:	9e 83       	std	Y+6, r25	; 0x06
    6632:	8d 83       	std	Y+5, r24	; 0x05
    6634:	8d 81       	ldd	r24, Y+5	; 0x05
    6636:	9e 81       	ldd	r25, Y+6	; 0x06
    6638:	9a 83       	std	Y+2, r25	; 0x02
    663a:	89 83       	std	Y+1, r24	; 0x01
    663c:	89 81       	ldd	r24, Y+1	; 0x01
    663e:	9a 81       	ldd	r25, Y+2	; 0x02
    6640:	01 97       	sbiw	r24, 0x01	; 1
    6642:	f1 f7       	brne	.-4      	; 0x6640 <main+0x3e0>
    6644:	9a 83       	std	Y+2, r25	; 0x02
    6646:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_voidDisplay_CLR();
    6648:	0e 94 26 28 	call	0x504c	; 0x504c <LCD_voidDisplay_CLR>

		Display_LedsOptions();
    664c:	0e 94 82 30 	call	0x6104	; 0x6104 <Display_LedsOptions>
		while(1)
		{
			Local_RecivedData = UART_voidReceiveData_Sync();
    6650:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <UART_voidReceiveData_Sync>
    6654:	8b a7       	std	Y+43, r24	; 0x2b
			if(Local_RecivedData == '1')
    6656:	8b a5       	ldd	r24, Y+43	; 0x2b
    6658:	81 33       	cpi	r24, 0x31	; 49
    665a:	11 f4       	brne	.+4      	; 0x6660 <main+0x400>
			{
				_1LED_ON();
    665c:	0e 94 d8 30 	call	0x61b0	; 0x61b0 <_1LED_ON>
			}
			if(Local_RecivedData == '2')
    6660:	8b a5       	ldd	r24, Y+43	; 0x2b
    6662:	82 33       	cpi	r24, 0x32	; 50
    6664:	11 f4       	brne	.+4      	; 0x666a <main+0x40a>
			{
				_2LEDS_ON();
    6666:	0e 94 ee 30 	call	0x61dc	; 0x61dc <_2LEDS_ON>
			}
			if(Local_RecivedData == '3')
    666a:	8b a5       	ldd	r24, Y+43	; 0x2b
    666c:	83 33       	cpi	r24, 0x33	; 51
    666e:	11 f4       	brne	.+4      	; 0x6674 <main+0x414>
			{
				_3LEDS_ON();
    6670:	0e 94 04 31 	call	0x6208	; 0x6208 <_3LEDS_ON>
			}
			if(Local_RecivedData == '4')
    6674:	8b a5       	ldd	r24, Y+43	; 0x2b
    6676:	84 33       	cpi	r24, 0x34	; 52
    6678:	59 f7       	brne	.-42     	; 0x6650 <main+0x3f0>
			{
				LEDS_OFF();
    667a:	0e 94 1a 31 	call	0x6234	; 0x6234 <LEDS_OFF>
    667e:	e8 cf       	rjmp	.-48     	; 0x6650 <main+0x3f0>
		}
	}



	return 0 ;
    6680:	80 e0       	ldi	r24, 0x00	; 0
    6682:	90 e0       	ldi	r25, 0x00	; 0
}
    6684:	e9 96       	adiw	r28, 0x39	; 57
    6686:	0f b6       	in	r0, 0x3f	; 63
    6688:	f8 94       	cli
    668a:	de bf       	out	0x3e, r29	; 62
    668c:	0f be       	out	0x3f, r0	; 63
    668e:	cd bf       	out	0x3d, r28	; 61
    6690:	cf 91       	pop	r28
    6692:	df 91       	pop	r29
    6694:	08 95       	ret

00006696 <__udivmodhi4>:
    6696:	aa 1b       	sub	r26, r26
    6698:	bb 1b       	sub	r27, r27
    669a:	51 e1       	ldi	r21, 0x11	; 17
    669c:	07 c0       	rjmp	.+14     	; 0x66ac <__udivmodhi4_ep>

0000669e <__udivmodhi4_loop>:
    669e:	aa 1f       	adc	r26, r26
    66a0:	bb 1f       	adc	r27, r27
    66a2:	a6 17       	cp	r26, r22
    66a4:	b7 07       	cpc	r27, r23
    66a6:	10 f0       	brcs	.+4      	; 0x66ac <__udivmodhi4_ep>
    66a8:	a6 1b       	sub	r26, r22
    66aa:	b7 0b       	sbc	r27, r23

000066ac <__udivmodhi4_ep>:
    66ac:	88 1f       	adc	r24, r24
    66ae:	99 1f       	adc	r25, r25
    66b0:	5a 95       	dec	r21
    66b2:	a9 f7       	brne	.-22     	; 0x669e <__udivmodhi4_loop>
    66b4:	80 95       	com	r24
    66b6:	90 95       	com	r25
    66b8:	bc 01       	movw	r22, r24
    66ba:	cd 01       	movw	r24, r26
    66bc:	08 95       	ret

000066be <__udivmodsi4>:
    66be:	a1 e2       	ldi	r26, 0x21	; 33
    66c0:	1a 2e       	mov	r1, r26
    66c2:	aa 1b       	sub	r26, r26
    66c4:	bb 1b       	sub	r27, r27
    66c6:	fd 01       	movw	r30, r26
    66c8:	0d c0       	rjmp	.+26     	; 0x66e4 <__udivmodsi4_ep>

000066ca <__udivmodsi4_loop>:
    66ca:	aa 1f       	adc	r26, r26
    66cc:	bb 1f       	adc	r27, r27
    66ce:	ee 1f       	adc	r30, r30
    66d0:	ff 1f       	adc	r31, r31
    66d2:	a2 17       	cp	r26, r18
    66d4:	b3 07       	cpc	r27, r19
    66d6:	e4 07       	cpc	r30, r20
    66d8:	f5 07       	cpc	r31, r21
    66da:	20 f0       	brcs	.+8      	; 0x66e4 <__udivmodsi4_ep>
    66dc:	a2 1b       	sub	r26, r18
    66de:	b3 0b       	sbc	r27, r19
    66e0:	e4 0b       	sbc	r30, r20
    66e2:	f5 0b       	sbc	r31, r21

000066e4 <__udivmodsi4_ep>:
    66e4:	66 1f       	adc	r22, r22
    66e6:	77 1f       	adc	r23, r23
    66e8:	88 1f       	adc	r24, r24
    66ea:	99 1f       	adc	r25, r25
    66ec:	1a 94       	dec	r1
    66ee:	69 f7       	brne	.-38     	; 0x66ca <__udivmodsi4_loop>
    66f0:	60 95       	com	r22
    66f2:	70 95       	com	r23
    66f4:	80 95       	com	r24
    66f6:	90 95       	com	r25
    66f8:	9b 01       	movw	r18, r22
    66fa:	ac 01       	movw	r20, r24
    66fc:	bd 01       	movw	r22, r26
    66fe:	cf 01       	movw	r24, r30
    6700:	08 95       	ret

00006702 <__mulsi3>:
    6702:	62 9f       	mul	r22, r18
    6704:	d0 01       	movw	r26, r0
    6706:	73 9f       	mul	r23, r19
    6708:	f0 01       	movw	r30, r0
    670a:	82 9f       	mul	r24, r18
    670c:	e0 0d       	add	r30, r0
    670e:	f1 1d       	adc	r31, r1
    6710:	64 9f       	mul	r22, r20
    6712:	e0 0d       	add	r30, r0
    6714:	f1 1d       	adc	r31, r1
    6716:	92 9f       	mul	r25, r18
    6718:	f0 0d       	add	r31, r0
    671a:	83 9f       	mul	r24, r19
    671c:	f0 0d       	add	r31, r0
    671e:	74 9f       	mul	r23, r20
    6720:	f0 0d       	add	r31, r0
    6722:	65 9f       	mul	r22, r21
    6724:	f0 0d       	add	r31, r0
    6726:	99 27       	eor	r25, r25
    6728:	72 9f       	mul	r23, r18
    672a:	b0 0d       	add	r27, r0
    672c:	e1 1d       	adc	r30, r1
    672e:	f9 1f       	adc	r31, r25
    6730:	63 9f       	mul	r22, r19
    6732:	b0 0d       	add	r27, r0
    6734:	e1 1d       	adc	r30, r1
    6736:	f9 1f       	adc	r31, r25
    6738:	bd 01       	movw	r22, r26
    673a:	cf 01       	movw	r24, r30
    673c:	11 24       	eor	r1, r1
    673e:	08 95       	ret

00006740 <__prologue_saves__>:
    6740:	2f 92       	push	r2
    6742:	3f 92       	push	r3
    6744:	4f 92       	push	r4
    6746:	5f 92       	push	r5
    6748:	6f 92       	push	r6
    674a:	7f 92       	push	r7
    674c:	8f 92       	push	r8
    674e:	9f 92       	push	r9
    6750:	af 92       	push	r10
    6752:	bf 92       	push	r11
    6754:	cf 92       	push	r12
    6756:	df 92       	push	r13
    6758:	ef 92       	push	r14
    675a:	ff 92       	push	r15
    675c:	0f 93       	push	r16
    675e:	1f 93       	push	r17
    6760:	cf 93       	push	r28
    6762:	df 93       	push	r29
    6764:	cd b7       	in	r28, 0x3d	; 61
    6766:	de b7       	in	r29, 0x3e	; 62
    6768:	ca 1b       	sub	r28, r26
    676a:	db 0b       	sbc	r29, r27
    676c:	0f b6       	in	r0, 0x3f	; 63
    676e:	f8 94       	cli
    6770:	de bf       	out	0x3e, r29	; 62
    6772:	0f be       	out	0x3f, r0	; 63
    6774:	cd bf       	out	0x3d, r28	; 61
    6776:	09 94       	ijmp

00006778 <__epilogue_restores__>:
    6778:	2a 88       	ldd	r2, Y+18	; 0x12
    677a:	39 88       	ldd	r3, Y+17	; 0x11
    677c:	48 88       	ldd	r4, Y+16	; 0x10
    677e:	5f 84       	ldd	r5, Y+15	; 0x0f
    6780:	6e 84       	ldd	r6, Y+14	; 0x0e
    6782:	7d 84       	ldd	r7, Y+13	; 0x0d
    6784:	8c 84       	ldd	r8, Y+12	; 0x0c
    6786:	9b 84       	ldd	r9, Y+11	; 0x0b
    6788:	aa 84       	ldd	r10, Y+10	; 0x0a
    678a:	b9 84       	ldd	r11, Y+9	; 0x09
    678c:	c8 84       	ldd	r12, Y+8	; 0x08
    678e:	df 80       	ldd	r13, Y+7	; 0x07
    6790:	ee 80       	ldd	r14, Y+6	; 0x06
    6792:	fd 80       	ldd	r15, Y+5	; 0x05
    6794:	0c 81       	ldd	r16, Y+4	; 0x04
    6796:	1b 81       	ldd	r17, Y+3	; 0x03
    6798:	aa 81       	ldd	r26, Y+2	; 0x02
    679a:	b9 81       	ldd	r27, Y+1	; 0x01
    679c:	ce 0f       	add	r28, r30
    679e:	d1 1d       	adc	r29, r1
    67a0:	0f b6       	in	r0, 0x3f	; 63
    67a2:	f8 94       	cli
    67a4:	de bf       	out	0x3e, r29	; 62
    67a6:	0f be       	out	0x3f, r0	; 63
    67a8:	cd bf       	out	0x3d, r28	; 61
    67aa:	ed 01       	movw	r28, r26
    67ac:	08 95       	ret

000067ae <_exit>:
    67ae:	f8 94       	cli

000067b0 <__stop_program>:
    67b0:	ff cf       	rjmp	.-2      	; 0x67b0 <__stop_program>
